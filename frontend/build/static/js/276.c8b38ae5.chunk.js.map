{"version":3,"file":"static/js/276.c8b38ae5.chunk.js","mappings":"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","sources":["utils/riskManagement.js","components/LockedOdds.js","utils/leagueTitle.js","components/SubcategoryMatchCard.js","pages/Soccer.js"],"sourcesContent":["const DISABLE_ODDS_LOCK = process.env.REACT_APP_DISABLE_ODDS_LOCK === 'true';\r\n\r\nexport const RISK_THRESHOLDS = {\r\n  // Minimum odds allowed (below this is risky): relax slightly to avoid over-locking\r\n  MIN_ODDS: 1.11,\r\n  \r\n  MAX_ODDS: 50.0,\r\n  \r\n  LIVE_RISK_MULTIPLIER: 1.5,\r\n  \r\n  LIVE_SCORE_DIFFERENCE_THRESHOLD: 3,\r\n  \r\n  LIVE_TIME_THRESHOLD_MINUTES: 10,\r\n  \r\n  OBVIOUS_WIN_THRESHOLD: 1.11,\r\n  OBVIOUS_LOSS_THRESHOLD: 50.0,\r\n};\r\n\r\n/**\r\n * Check if odds are too low (high risk)\r\n * @param {number} odds - The odds value\r\n * @returns {boolean} - True if odds are too low\r\n */\r\nexport const isOddsTooLow = (odds) => {\r\n  if (!odds || typeof odds !== 'number') return false;\r\n  return odds < RISK_THRESHOLDS.MIN_ODDS;\r\n};\r\n\r\n/**\r\n * Check if odds are too high (too obvious)\r\n * @param {number} odds - The odds value\r\n * @returns {boolean} - True if odds are too high\r\n */\r\nexport const isOddsTooHigh = (odds) => {\r\n  if (!odds || typeof odds !== 'number') return false;\r\n  return odds > RISK_THRESHOLDS.MAX_ODDS;\r\n};\r\n\r\n/**\r\n * Check if live match has obvious outcome based on score\r\n * @param {Object} match - Match object\r\n * @returns {boolean} - True if outcome is too obvious\r\n */\r\nexport const isLiveMatchObvious = (match) => {\r\n  if (!match.isLive && match.status !== 'live') return false;\r\n  \r\n  if (match.homeScore !== undefined && match.awayScore !== undefined) {\r\n    const scoreDiff = Math.abs(match.homeScore - match.awayScore);\r\n    if (scoreDiff >= RISK_THRESHOLDS.LIVE_SCORE_DIFFERENCE_THRESHOLD) {\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  // Check if match is in final minutes\r\n  if (match.startTime) {\r\n    const startTime = new Date(match.startTime);\r\n    const now = new Date();\r\n    const matchDuration = 90; // Assuming 90 minutes for soccer\r\n    const elapsedMinutes = (now - startTime) / (1000 * 60);\r\n    const remainingMinutes = matchDuration - elapsedMinutes;\r\n    \r\n    if (remainingMinutes <= RISK_THRESHOLDS.LIVE_TIME_THRESHOLD_MINUTES) {\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Check if odds represent an obvious outcome\r\n * @param {number} odds - The odds value\r\n * @returns {boolean} - True if outcome is too obvious\r\n */\r\nexport const isObviousOutcome = (odds) => {\r\n  if (!odds || typeof odds !== 'number') return false;\r\n  \r\n  // Only very low odds (below 1.14) are considered risky\r\n  if (odds <= RISK_THRESHOLDS.OBVIOUS_WIN_THRESHOLD) return true;\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Main function to determine if odds should be disabled\r\n * @param {Object} match - Match object\r\n * @param {number} odds - The odds value\r\n * @param {string} oddsType - Type of odds (1, X, 2, etc.)\r\n * @returns {Object} - Risk assessment result\r\n */\r\nexport const assessOddsRisk = (match, odds, oddsType) => {\r\n  // Environment override to never lock odds (useful for production hosting issues)\r\n  if (DISABLE_ODDS_LOCK) {\r\n    return {\r\n      shouldDisable: false,\r\n      reason: null,\r\n      riskLevel: 'none',\r\n      riskFactors: []\r\n    };\r\n  }\r\n\r\n  if (!odds || typeof odds !== 'number') {\r\n    return {\r\n      shouldDisable: false,\r\n      reason: null,\r\n      riskLevel: 'none'\r\n    };\r\n  }\r\n  \r\n  const riskFactors = [];\r\n  let riskLevel = 'low';\r\n  \r\n  // Check if odds are too low\r\n  if (isOddsTooLow(odds)) {\r\n    riskFactors.push('odds_too_low');\r\n    riskLevel = 'high';\r\n  }\r\n  \r\n  // Check if outcome is too obvious (only low odds below 1.14 are considered risky)\r\n  if (isObviousOutcome(odds)) {\r\n    riskFactors.push('obvious_outcome');\r\n    riskLevel = 'high';\r\n  }\r\n  \r\n  // Check live match specific risks\r\n  if (match.isLive || match.status === 'live') {\r\n    if (isLiveMatchObvious(match)) {\r\n      riskFactors.push('live_match_obvious');\r\n      riskLevel = 'high';\r\n    } else {\r\n      riskLevel = 'medium'; // Live matches are inherently riskier\r\n    }\r\n  }\r\n  \r\n  // Check for specific odds type risks\r\n  if (oddsType === 'X' && odds < 1.50) {\r\n    // Draw odds below 1.50 are suspicious\r\n    riskFactors.push('suspicious_draw_odds');\r\n    riskLevel = 'medium';\r\n  }\r\n  \r\n  // Only lock live odds for truly high-risk scenarios\r\n  const isLive = match?.isLive || match?.status === 'live';\r\n  let shouldDisable;\r\n  if (isLive) {\r\n    // For live matches, disable ONLY when the live state is obviously risky\r\n    // i.e., outcome is obvious based on score/time\r\n    shouldDisable = riskFactors.includes('live_match_obvious');\r\n  } else {\r\n    // Pre-match: disable when overall risk is high\r\n    shouldDisable = riskLevel === 'high';\r\n  }\r\n\r\n  return {\r\n    shouldDisable,\r\n    reason: riskFactors.length > 0 ? riskFactors.join(', ') : null,\r\n    riskLevel,\r\n    riskFactors\r\n  };\r\n};\r\n\r\n/**\r\n * Get risk level display text\r\n * @param {string} riskLevel - Risk level\r\n * @returns {string} - Display text\r\n */\r\nexport const getRiskLevelText = (riskLevel) => {\r\n  switch (riskLevel) {\r\n    case 'high':\r\n      return 'High Risk - Odds Disabled';\r\n    case 'medium':\r\n      return 'Medium Risk';\r\n    case 'low':\r\n      return 'Low Risk';\r\n    default:\r\n      return 'Unknown Risk';\r\n  }\r\n};\r\n\r\n/**\r\n * Get risk reason display text\r\n * @param {Array} riskFactors - Array of risk factors\r\n * @returns {string} - Human readable risk reason\r\n */\r\nexport const getRiskReasonText = (riskFactors) => {\r\n  if (!riskFactors || riskFactors.length === 0) return '';\r\n  \r\n  const reasonMap = {\r\n    'odds_too_low': 'Odds too low',\r\n    'obvious_outcome': 'Odds too low (below 1.11)',\r\n    'live_match_obvious': 'Live match outcome obvious',\r\n    'suspicious_draw_odds': 'Suspicious draw odds'\r\n  };\r\n  \r\n  return riskFactors.map(factor => reasonMap[factor] || factor).join(', ');\r\n};\r\n","import React from 'react';\n\nconst LockedOdds = ({ \n  riskAssessment, \n  className = '' \n}) => {\n  const { shouldDisable } = riskAssessment;\n  \n  if (!shouldDisable) {\n    return null;\n  }\n  \n  return (\n    <div \n      className={`locked-odds ${className}`}\n      title=\"Odds Unavailable\"\n    >\n      {/* Lock Icon Only - Perfectly Centered */}\n      <div className=\"lock-icon\">\n        🔒\n      </div>\n    </div>\n  );\n};\n\nexport default LockedOdds;\n","// Utility to compute unified league title: \"Sport.Country.League\" or \"Sport.League\"\n// Derives sport from sport_key (first token) and country/league from remaining tokens when available.\n\nfunction titleCase(str = '') {\n  return String(str)\n    .replace(/[_.-]+/g, ' ')\n    .split(/\\s+/)\n    .filter(Boolean)\n    .map(w => w.charAt(0).toUpperCase() + w.slice(1))\n    .join(' ');\n}\n\nfunction parseSportKey(raw = '') {\n  const key = String(raw || '').trim();\n  if (!key) return { sport: '', countryFromKey: '', leagueFromKey: '' };\n  const tokens = key.split('_').filter(Boolean);\n  const sport = tokens[0] || '';\n  const countryFromKey = tokens[1] || '';\n  const leagueFromKey = tokens.length > 2 ? tokens.slice(2).join(' ') : '';\n  return { sport, countryFromKey, leagueFromKey };\n}\n\nexport function computeFullLeagueTitle({\n  sportKeyOrName,\n  country,\n  leagueName,\n  fallbackSportTitle\n}) {\n  // Canonical mappings for popular leagues from Odds API keys\n  const CANONICAL_LEAGUE_MAP = {\n    // Soccer\n    'soccer_epl': { sport: 'Soccer', country: 'England', league: 'Premier League' },\n    'soccer_england_league_1': { sport: 'Soccer', country: 'England', league: 'League One' },\n    'soccer_france_ligue_one': { sport: 'Soccer', country: 'France', league: 'Ligue 1' },\n    'soccer_spain_la_liga': { sport: 'Soccer', country: 'Spain', league: 'La Liga' },\n    'soccer_italy_serie_a': { sport: 'Soccer', country: 'Italy', league: 'Serie A' },\n    'soccer_germany_bundesliga': { sport: 'Soccer', country: 'Germany', league: 'Bundesliga' },\n    'soccer_netherlands_eredivisie': { sport: 'Soccer', country: 'Netherlands', league: 'Eredivisie' },\n    'soccer_portugal_primeira_liga': { sport: 'Soccer', country: 'Portugal', league: 'Primeira Liga' },\n    'soccer_belgium_first_div': { sport: 'Soccer', country: 'Belgium', league: 'First Division A' },\n    'soccer_uefa_champions_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Champions League' },\n    // Variants provided by API/user\n    'soccer_uefa_champs_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Champions League' },\n    'soccer_uefa_champs_league_qualification': { sport: 'Soccer', country: 'Europe', league: 'UEFA Champions League Qualification' },\n    'soccer_uefa_champs_league_women': { sport: 'Soccer', country: 'Europe', league: \"UEFA Women's Champions League\" },\n    'soccer_uefa_europa_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Europa League' },\n    'soccer_europe_uefa_europa_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Europa League' },\n    'soccer_uefa_european_championship': { sport: 'Soccer', country: 'Europe', league: 'UEFA Euro 2024' },\n    'soccer_uefa_euro_qualification': { sport: 'Soccer', country: 'Europe', league: 'UEFA Euro Qualification' },\n    'soccer_uefa_nations_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Nations League' },\n    'soccer_concacaf_gold_cup': { sport: 'Soccer', country: 'CONCACAF', league: 'Gold Cup' },\n    'soccer_concacaf_leagues_cup': { sport: 'Soccer', country: 'CONCACAF', league: 'Leagues Cup' },\n    'soccer_conmebol_copa_america': { sport: 'Soccer', country: 'CONMEBOL', league: 'Copa América' },\n    'soccer_conmebol_copa_libertadores': { sport: 'Soccer', country: 'CONMEBOL', league: 'Copa Libertadores' },\n    'soccer_conmebol_copa_sudamericana': { sport: 'Soccer', country: 'CONMEBOL', league: 'Copa Sudamericana' },\n    'soccer_usa_mls': { sport: 'Soccer', country: 'USA', league: 'MLS' },\n    // Basketball\n    'basketball_nba': { sport: 'Basketball', country: 'USA', league: 'NBA' },\n    'basketball_euroleague': { sport: 'Basketball', country: 'Europe', league: 'EuroLeague' },\n    'basketball_spain_liga_acb': { sport: 'Basketball', country: 'Spain', league: 'Liga ACB' },\n    'basketball_france_lnb': { sport: 'Basketball', country: 'France', league: 'LNB Pro A' },\n    // American Football\n    'americanfootball_nfl': { sport: 'American Football', country: 'USA', league: 'NFL' },\n    // Baseball\n    'baseball_mlb': { sport: 'Baseball', country: 'USA', league: 'MLB' },\n    // Ice Hockey\n    'icehockey_nhl': { sport: 'Ice Hockey', country: 'USA', league: 'NHL' },\n    'icehockey_sweden_shl': { sport: 'Ice Hockey', country: 'Sweden', league: 'SHL' },\n    // Tennis\n    'tennis_atp_singles': { sport: 'Tennis', country: '', league: 'ATP' },\n    'tennis_wta_singles': { sport: 'Tennis', country: '', league: 'WTA' },\n    // ATP tournaments\n    'tennis_atp_aus_open_singles': { sport: 'Tennis', country: '', league: 'ATP Australian Open' },\n    'tennis_atp_canadian_open': { sport: 'Tennis', country: '', league: 'ATP Canadian Open' },\n    'tennis_atp_china_open': { sport: 'Tennis', country: '', league: 'ATP China Open' },\n    'tennis_atp_cincinnati_open': { sport: 'Tennis', country: '', league: 'ATP Cincinnati Open' },\n    'tennis_atp_dubai': { sport: 'Tennis', country: '', league: 'ATP Dubai Championships' },\n    'tennis_atp_french_open': { sport: 'Tennis', country: '', league: 'ATP French Open' },\n    'tennis_atp_indian_wells': { sport: 'Tennis', country: '', league: 'ATP Indian Wells' },\n    'tennis_atp_italian_open': { sport: 'Tennis', country: '', league: 'ATP Italian Open' },\n    'tennis_atp_madrid_open': { sport: 'Tennis', country: '', league: 'ATP Madrid Open' },\n    'tennis_atp_miami_open': { sport: 'Tennis', country: '', league: 'ATP Miami Open' },\n    'tennis_atp_monte_carlo_masters': { sport: 'Tennis', country: '', league: 'ATP Monte-Carlo Masters' },\n    'tennis_atp_paris_masters': { sport: 'Tennis', country: '', league: 'ATP Paris Masters' },\n    'tennis_atp_qatar_open': { sport: 'Tennis', country: '', league: 'ATP Qatar Open' },\n    'tennis_atp_shanghai_masters': { sport: 'Tennis', country: '', league: 'ATP Shanghai Masters' },\n    'tennis_atp_us_open': { sport: 'Tennis', country: '', league: 'ATP US Open' },\n    'tennis_atp_wimbledon': { sport: 'Tennis', country: '', league: 'ATP Wimbledon' },\n    // WTA tournaments\n    'tennis_wta_aus_open_singles': { sport: 'Tennis', country: '', league: 'WTA Australian Open' },\n    'tennis_wta_canadian_open': { sport: 'Tennis', country: '', league: 'WTA Canadian Open' },\n    'tennis_wta_china_open': { sport: 'Tennis', country: '', league: 'WTA China Open' },\n    'tennis_wta_cincinnati_open': { sport: 'Tennis', country: '', league: 'WTA Cincinnati Open' },\n    'tennis_wta_dubai': { sport: 'Tennis', country: '', league: 'WTA Dubai Championships' },\n    'tennis_wta_french_open': { sport: 'Tennis', country: '', league: 'WTA French Open' },\n    'tennis_wta_indian_wells': { sport: 'Tennis', country: '', league: 'WTA Indian Wells' },\n    'tennis_wta_italian_open': { sport: 'Tennis', country: '', league: 'WTA Italian Open' },\n    'tennis_wta_madrid_open': { sport: 'Tennis', country: '', league: 'WTA Madrid Open' },\n    'tennis_wta_miami_open': { sport: 'Tennis', country: '', league: 'WTA Miami Open' },\n    'tennis_wta_qatar_open': { sport: 'Tennis', country: '', league: 'WTA Qatar Open' },\n    'tennis_wta_us_open': { sport: 'Tennis', country: '', league: 'WTA US Open' },\n    'tennis_wta_wimbledon': { sport: 'Tennis', country: '', league: 'WTA Wimbledon' },\n    'tennis_wta_wuhan_open': { sport: 'Tennis', country: '', league: 'WTA Wuhan Open' },\n  };\n  // Map common sport tokens and names to normalized display names\n  const SPORT_DISPLAY_MAP = {\n    'soccer': 'Soccer',\n    'football': 'American Football',\n    'americanfootball': 'American Football',\n    'basketball': 'Basketball',\n    'baseball': 'Baseball',\n    'icehockey': 'Ice Hockey',\n    'hockey': 'Hockey',\n    'cricket': 'Cricket',\n    'boxing': 'Boxing',\n    'mma': 'MMA',\n    'volleyball': 'Volleyball',\n    'rugby': 'Rugby',\n    'rugbyleague': 'Rugby League',\n    'aussierules': 'Aussie Rules',\n    'handball': 'Handball',\n    'tabletennis': 'Table Tennis'\n  };\n\n  // Prefer canonical mapping when available\n  const normalizedKey = String(sportKeyOrName || '').toLowerCase();\n  if (CANONICAL_LEAGUE_MAP[normalizedKey]) {\n    const c = CANONICAL_LEAGUE_MAP[normalizedKey];\n    const parts = [c.sport, c.country, c.league].filter(Boolean);\n    return parts.join('.');\n  }\n\n  const { sport, countryFromKey, leagueFromKey } = parseSportKey(sportKeyOrName);\n\n  // Sport: prefer parsed sport from key, else raw name, else fallback title\n  const sportRaw = sport || sportKeyOrName || fallbackSportTitle || '';\n  const normalizedSportKey = String(sportRaw).toLowerCase().replace(/\\s+/g, '');\n  const mappedDisplay = SPORT_DISPLAY_MAP[normalizedSportKey];\n  const sportDisplay = mappedDisplay || titleCase(sportRaw);\n\n  // Country: explicit country wins; else derive from sport_key; else empty\n  const countryRaw = country || countryFromKey || '';\n  let countryDisplay = titleCase(countryRaw);\n\n  // League: explicit league wins; else derive from sport_key remainder; else fallback sport_title\n  const leagueRaw = leagueName || leagueFromKey || fallbackSportTitle || '';\n  let leagueDisplay = titleCase(leagueRaw);\n\n  // Avoid duplicating country if league already contains it (e.g., \"England Premier League\")\n  if (countryDisplay) {\n    const lcLeague = leagueDisplay.toLowerCase();\n    const lcCountry = countryDisplay.toLowerCase();\n    if (lcLeague.includes(lcCountry)) {\n      countryDisplay = '';\n    }\n  }\n\n  // Remove redundant segments like Sport.Country where Country == Sport, or Sport.League where League == Sport\n  if (sportDisplay && countryDisplay && sportDisplay.toLowerCase() === countryDisplay.toLowerCase()) {\n    countryDisplay = '';\n  }\n  if (sportDisplay && leagueDisplay && sportDisplay.toLowerCase() === leagueDisplay.toLowerCase()) {\n    leagueDisplay = '';\n  }\n\n  // Final de-duplication to handle any remaining case-insensitive duplicates\n  const rawParts = [sportDisplay, countryDisplay, leagueDisplay];\n  const parts = [];\n  for (const p of rawParts) {\n    const norm = String(p || '').trim();\n    if (!norm) continue;\n    if (!parts.some(x => x.toLowerCase() === norm.toLowerCase())) {\n      parts.push(norm);\n    }\n  }\n  return parts.join('.');\n}\n\nexport default computeFullLeagueTitle;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport LockedOdds from './LockedOdds';\nimport { assessOddsRisk } from '../utils/riskManagement';\n\nconst SubcategoryMatchCard = ({ subcategory, matches, sport }) => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = useState(true);\n\n    const addToBetslip = (match, betType, odds) => {\n        const bet = {\n            matchId: match.id || match._id, // Use id instead of _id for better compatibility\n            match: `${match.homeTeam} vs ${match.awayTeam}`,\n            homeTeam: match.homeTeam,\n            awayTeam: match.awayTeam,\n            league: match.league,\n            startTime: match.startTime,\n            type: betType,\n            odds: odds,\n            stake: 0,\n            sport: sport\n        };\n        dispatch({ type: 'activeBets/addBet', payload: bet });\n    };\n\n    const getBestOdds = (match, oddsType) => {\n        if (!match.odds) return null;\n        const odds = match.odds[oddsType];\n        return odds && odds > 0 ? odds : null;\n    };\n\n    // Check if match is live\n    const isLiveMatch = (match) => {\n        return match.status === 'live' || match.isLive;\n    };\n\n    // Get live match time display\n    const getLiveTimeDisplay = (match) => {\n        if (!isLiveMatch(match)) return null;\n        \n        // If match has liveTime property, use it\n        if (match.liveTime) {\n            return (\n                <div className=\"live-time-display\">\n                    <span className=\"time-icon\"></span>\n                    <span>{match.liveTime}</span>\n                </div>\n            );\n        }\n        \n        // If match has startTime, calculate live time\n        if (match.startTime) {\n            const startTime = new Date(match.startTime);\n            const now = new Date();\n            const diffMs = now - startTime;\n            const diffMins = Math.floor(diffMs / 60000);\n            \n            if (diffMins > 0) {\n                return (\n                    <div className=\"live-time-display\">\n                        <span className=\"time-icon\"></span>\n                        <span>LIVE {diffMins}'</span>\n                    </div>\n                );\n            }\n        }\n        \n        return (\n            <div className=\"live-time-display\">\n                <span className=\"time-icon\"></span>\n                <span>LIVE</span>\n            </div>\n        );\n    };\n\n    // Get live score display\n    const getLiveScoreDisplay = (match) => {\n        if (!isLiveMatch(match)) return null;\n        \n        if (match.score) {\n            return (\n                <div className=\"live-score\">\n                    {match.score}\n                </div>\n            );\n        }\n        \n        if (match.homeScore !== undefined && match.awayScore !== undefined) {\n            return (\n                <div className=\"live-score\">\n                    {match.homeScore}-{match.awayScore}\n                </div>\n            );\n        }\n        \n        return null;\n    };\n\n\n    // Get all available odds types for additional markets count\n    const getAllBasicOddsTypes = () => {\n        if (!matches || matches.length === 0) return [];\n        \n        const allTypes = new Set();\n        matches.forEach(match => {\n            if (match.odds) {\n                // Handle Map-based odds structure (new structure)\n                if (match.odds instanceof Map || (match.odds && typeof match.odds.get === 'function')) {\n                    match.odds.forEach((value, key) => {\n                        if (value && typeof value === 'number' && value > 0) {\n                            allTypes.add(key);\n                        }\n                    });\n                }\n                // Handle nested odds structure (from matchesSeed.js)\n                else if (match.odds.default && match.odds.default.odds) {\n                    Object.keys(match.odds.default.odds).forEach(key => {\n                        if (match.odds.default.odds[key] && match.odds.default.odds[key] > 0) {\n                            allTypes.add(key);\n                        }\n                    });\n                } else {\n                    // Handle flat odds structure (from transformed API data)\n                    Object.keys(match.odds).forEach(key => {\n                        if (match.odds[key] && match.odds[key] > 0) {\n                            allTypes.add(key);\n                        }\n                    });\n                }\n            }\n        });\n        \n        return Array.from(allTypes);\n    };\n\n\n    const hasValidOdds = (match) => {\n        if (!match.odds) return false;\n        return Object.values(match.odds).some(odds => odds && odds > 0);\n    };\n\n    const formatMatchDateTime = (startTime) => {\n        const date = new Date(startTime);\n        const timeString = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n        const dateString = date.toLocaleDateString([], { day: '2-digit', month: '2-digit' });\n        return `${dateString} ${timeString}`;\n    };\n\n    // Inline MatchRow component\n    const MatchRow = ({ match, basicOddsTypes }) => {\n        // Calculate additional markets count (all odds minus basic odds)\n        const ignoredLineKeys = new Set(['Total','total','handicapLine','handicap_line']);\n        const allMatchOddsTypes = Object.keys(match.odds || {}).filter(key => \n            match.odds[key] && match.odds[key] > 0 && !ignoredLineKeys.has(key)\n        );\n        const additionalMarketsCount = Math.max(0, allMatchOddsTypes.length - basicOddsTypes.length);\n        \n        const handleAdditionalMarketsClick = (e) => {\n            e.stopPropagation();\n            \n            // Preserve Home data before navigating away\n            try {\n                const homeMatches = sessionStorage.getItem('home_matches_data');\n                const homePopular = sessionStorage.getItem('home_popular_data');\n                const homeFiltered = sessionStorage.getItem('home_filtered_data');\n                \n                if (homeMatches || homePopular || homeFiltered) {\n                    console.log('[SUBCATEGORY] Home data already preserved in session storage');\n                }\n            } catch (e) {\n                console.log('[SUBCATEGORY] Session storage not available');\n            }\n            \n            const matchId = match._id || match.id;\n            if (matchId) {\n                navigate(`/match/${matchId}?from=additional`);\n            } else {\n                console.error('Invalid match ID format');\n            }\n        };\n\n        return (\n        <div className={`match-row ${isLiveMatch(match) ? 'live-match' : ''}`} onClick={() => {\n            // Preserve Home data before navigating away\n            try {\n                const homeMatches = sessionStorage.getItem('home_matches_data');\n                const homePopular = sessionStorage.getItem('home_popular_data');\n                const homeFiltered = sessionStorage.getItem('home_filtered_data');\n                \n                if (homeMatches || homePopular || homeFiltered) {\n                    console.log('[SUBCATEGORY] Home data already preserved in session storage');\n                }\n            } catch (e) {\n                console.log('[SUBCATEGORY] Session storage not available');\n            }\n            \n            navigate(`/match/${match._id || match.id}`);\n        }}>\n            {/* Live status badge */}\n            {isLiveMatch(match) && (\n                <div className=\"live-status-badge\">LIVE</div>\n            )}\n            \n            <div className=\"match-teams\">\n                <div className=\"match-date-time\">\n                    {isLiveMatch(match) ? getLiveTimeDisplay(match) : <span>{formatMatchDateTime(match.startTime)}</span>}\n                </div>\n                <div className=\"team\">\n                    {match.homeTeam}\n                </div>\n                {/* Show live score if available */}\n                {isLiveMatch(match) && getLiveScoreDisplay(match)}\n                <div className=\"team\">\n                    {match.awayTeam}\n                </div>\n            </div>\n                {/* Odds Headers */}\n                <div className=\"odds-headers-container\">\n                    {basicOddsTypes.map(oddsType => (\n                        <div key={oddsType} className=\"odds-header\">\n                            {oddsType}\n                        </div>\n                    ))}\n                </div>\n                \n                {/* Odds Buttons */}\n                <div className=\"odds-buttons-container\">\n            {/* Show only basic odds (1, X, 2) - maximum 3 */}\n                    {basicOddsTypes.map((oddsType) => {\n                        const odds = getBestOdds(match, oddsType);\n                        \n                        if (!odds) {\n                            return <div key={oddsType} className=\"odds-button empty\"></div>;\n                        }\n                        \n                        const riskAssessment = assessOddsRisk(match, odds, oddsType);\n                        \n                        // If odds should be disabled, show locked odds component\n                        if (riskAssessment.shouldDisable) {\n                            return (\n                                <LockedOdds\n                                    key={oddsType}\n                                    riskAssessment={riskAssessment}\n                                    className=\"odds-button\"\n                                />\n                            );\n                        }\n                        \n                        // Otherwise show normal odds button with only odds value\n                        return (\n                            <button\n                                key={oddsType}\n                                className={`odds-button ${isLiveMatch(match) ? 'live-highlight' : ''}`}\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    addToBetslip(oddsType, odds, match);\n                                }}\n                            >\n                                <div className=\"odds-value\">{odds.toFixed(2)}</div>\n                            </button>\n                        );\n                    })}\n                </div>\n                {/* Show additional markets button if there are more odds types */}\n                {additionalMarketsCount > 0 && (\n                    <div className=\"additional-markets-container\">\n                        <button \n                            className=\"more-markets-button\" \n                            title=\"View all betting markets\"\n                            onClick={handleAdditionalMarketsClick}\n                        >\n                            <span className=\"more-markets-icon\">+</span>\n                            <span className=\"more-markets-count\">{additionalMarketsCount}</span>\n                        </button>\n                    </div>\n                )}\n        </div>\n    );\n    };\n\n    // Filter out matches without valid odds\n    const validMatches = matches.filter(match => hasValidOdds(match));\n    if (validMatches.length === 0) {\n        return null;\n    }\n\n    // Get all unique basic odds types from all matches\n    const basicOddsTypesArray = getAllBasicOddsTypes();\n\n    return (\n        <div className=\"subcategory-match-card\">\n            {/* Subcategory Header and Basic Odds Headers on the same row */}\n            <div className=\"subcategory-header\">\n                <div className=\"subcategory-title\" onClick={() => setExpanded((prev) => !prev)} style={{ cursor: 'pointer' }}>\n                    <span className=\"arrow\">{expanded ? '▼' : '▶'}</span>\n                    {subcategory}\n                </div>\n                {/* Show only basic odds headers */}\n                {basicOddsTypesArray.map(oddsType => (\n                    <div key={oddsType} className=\"odds-header\">{oddsType}</div>\n                ))}\n                <div className=\"odds-header\"></div>\n            </div>\n            {/* Matches List - only show if expanded */}\n            {expanded && (\n                <div className=\"subcategory-matches\">\n                    {validMatches.map((match, idx) => (\n                        <MatchRow\n                            key={match.id || match._id || idx}\n                            match={match}\n                            basicOddsTypes={basicOddsTypesArray}\n                        />\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SubcategoryMatchCard;","import React, { useState, useEffect } from 'react';\nimport SubcategoryMatchCard from '../components/SubcategoryMatchCard';\nimport apiService from '../services/api';\nimport { computeFullLeagueTitle } from '../utils/leagueTitle';\n\nconst Soccer = () => {\n  const [matches, setMatches] = useState([]);\n  const [filteredMatches, setFilteredMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n\n  // Global search functionality\n  useEffect(() => {\n    const handleGlobalSearch = (event) => {\n      const { searchTerm: globalSearchTerm } = event.detail;\n      setSearchTerm(globalSearchTerm);\n    };\n\n    const handleGlobalDateFilter = (event) => {\n      const { selectedDate: globalSelectedDate } = event.detail;\n      setSelectedDate(globalSelectedDate);\n    };\n\n    // Listen for global search and date filter events\n    window.addEventListener('globalSearch', handleGlobalSearch);\n    window.addEventListener('globalDateFilter', handleGlobalDateFilter);\n\n    // Check for existing search term and date in localStorage\n    const existingSearchTerm = localStorage.getItem('globalSearchTerm');\n    const existingSelectedDate = localStorage.getItem('globalSelectedDate');\n    \n    if (existingSearchTerm) {\n      setSearchTerm(existingSearchTerm);\n    }\n    if (existingSelectedDate) {\n      setSelectedDate(existingSelectedDate);\n    }\n\n    return () => {\n      window.removeEventListener('globalSearch', handleGlobalSearch);\n      window.removeEventListener('globalDateFilter', handleGlobalDateFilter);\n    };\n  }, []);\n\n  // Filter matches based on search term and date\n  useEffect(() => {\n    let filtered = matches;\n\n    // Filter by search term\n    if (searchTerm.trim()) {\n      filtered = filtered.filter(match => {\n        const searchLower = searchTerm.toLowerCase();\n        return (\n          match.homeTeam?.toLowerCase().includes(searchLower) ||\n          match.awayTeam?.toLowerCase().includes(searchLower) ||\n          match.league?.toLowerCase().includes(searchLower) ||\n          match.sport?.toLowerCase().includes(searchLower)\n        );\n      });\n    }\n\n    // Filter by date\n    if (selectedDate) {\n      const selectedDateObj = new Date(selectedDate);\n      selectedDateObj.setHours(0, 0, 0, 0);\n      const nextDay = new Date(selectedDateObj);\n      nextDay.setDate(nextDay.getDate() + 1);\n\n      filtered = filtered.filter(match => {\n        const matchDate = new Date(match.startTime);\n        return matchDate >= selectedDateObj && matchDate < nextDay;\n      });\n    }\n\n    setFilteredMatches(filtered);\n  }, [matches, searchTerm, selectedDate]);\n\n  // Transform backend /api/matches response to frontend format\n  const transformMatchesResponse = (data) => {\n    if (!Array.isArray(data)) return [];\n\n    const now = new Date();\n    return data\n      .filter(match => {\n        // Determine sport from sport_key or sport fields strictly\n        const rawKey = (match.sport_key || match.sport || match.sport_title || '').toLowerCase();\n        const firstToken = rawKey.split('_')[0] || '';\n        const isSoccer = firstToken === 'soccer' || rawKey === 'soccer';\n        // Exclude any mis-labeled leagues that clearly belong to other sports\n        const leagueLower = String(match.league || match.sport_title || '').toLowerCase();\n        // Also guard against truncated or variant labels like \"boxi\"\n        const isClearlyNonSoccer = /\\bboxing\\b|\\bboxi\\b|\\bmma\\b|\\bufc\\b|\\brugby\\b/.test(leagueLower);\n        // Only pre-match upcoming items\n        const start = new Date(match.startTime);\n        const isUpcoming = (match.status || 'upcoming') === 'upcoming' && start > now;\n        return isSoccer && isUpcoming && !isClearlyNonSoccer;\n      })\n      .map(match => {\n        const oddsObj = match.odds || {};\n        const start = new Date(match.startTime);\n\n        // Ensure basic odds are numbers when present\n        ['1','2','X','1X','12','2X'].forEach(k => {\n          if (oddsObj && oddsObj[k] != null) {\n            const num = Number(oddsObj[k]);\n            oddsObj[k] = Number.isFinite(num) ? num : oddsObj[k];\n          }\n        });\n\n        // Only return match if we have at least basic odds for 1 and 2\n        if (!(oddsObj['1'] > 0 && oddsObj['2'] > 0)) {\n          return null;\n        }\n\n        const additionalMarkets = Number(match.additionalMarkets || 0);\n        const ignoredLineKeys = ['Total','total','handicapLine','handicap_line'];\n        const displayedOddsCount = Object.keys(oddsObj).filter(key => oddsObj[key] && oddsObj[key] > 0 && !ignoredLineKeys.includes(key)).length;\n        const additionalOddsCount = Math.max(0, additionalMarkets - displayedOddsCount);\n\n        // Derive country from explicit field or sport_key second token\n        const sportKey = String(match.sport_key || '').toLowerCase();\n        const tokens = sportKey.split('_').filter(Boolean);\n        const derivedCountry = match.country || (tokens.length > 1 ? tokens[1] : '') || '';\n        return {\n          id: match.id,\n          league: match.league || match.competition || match.tournament || 'Other',\n          country: derivedCountry,\n          sport_key: match.sport_key || '',\n          time: start.toLocaleString('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            day: '2-digit',\n            month: '2-digit'\n          }),\n          startTime: start,\n          homeTeam: match.homeTeam,\n          awayTeam: match.awayTeam,\n          odds: oddsObj,\n          additionalOdds: additionalOddsCount > 0 ? `+${additionalOddsCount}` : null,\n          sport: 'Soccer'\n        };\n      })\n      .filter(Boolean);\n  };\n\n  const fetchMatches = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Fetch matches filtered by sport key from API (server-side filter)\n      const response = await apiService.getMatchesByKey('soccer');\n      const apiMatches = response.data.matches || [];\n\n      // Transform to frontend format\n      const soccerMatches = transformMatchesResponse(apiMatches);\n      setMatches(soccerMatches);\n      \n    } catch (err) {\n      console.error('Error fetching soccer matches:', err);\n      setError('Failed to load soccer matches. Please try again later.');\n      setMatches([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMatches();\n    const interval = setInterval(fetchMatches, 30000); // refresh every 30s\n    return () => clearInterval(interval);\n  }, []);\n\n  // Canonical mappings for major soccer competitions\n  const subcategoryMappings = {\n    'EPL': ['Premier League', 'English Premier League', 'EPL', 'England Premier League'],\n    'Serie A': ['Serie A', 'Italian Serie A', 'Italy Serie A'],\n    'Bundesliga': ['Bundesliga', 'German Bundesliga', 'Germany Bundesliga'],\n    'La Liga': ['La Liga', 'Spanish La Liga', 'Spain La Liga'],\n    'Ligue 1': ['Ligue 1', 'French Ligue 1', 'France Ligue One'],\n    'Champions League': ['UEFA Champions League', 'Champions League', 'UCL'],\n    'Europa League': ['UEFA Europa League', 'Europa League', 'UEL'],\n    'MLS': ['Major League Soccer', 'MLS']\n  };\n\n  // Group matches by canonicalized subcategory\n  const groupMatchesBySubcategory = () => {\n    const groupedMatches = {};\n\n    const normalize = (s) => String(s || '').toLowerCase().trim().replace(/[_.-]+/g, ' ');\n    const computeCanonicalSubcategory = (m) => {\n      const leagueNorm = normalize(m.league);\n      for (const [canonical, variations] of Object.entries(subcategoryMappings)) {\n        for (const v of variations) {\n          const vNorm = normalize(v);\n          if (vNorm && leagueNorm === vNorm) {\n            return canonical;\n          }\n        }\n      }\n      return m.league || 'Other';\n    };\n\n    filteredMatches.forEach(match => {\n      const subcategoryKey = computeCanonicalSubcategory(match);\n      if (!groupedMatches[subcategoryKey]) {\n        groupedMatches[subcategoryKey] = [];\n      }\n      groupedMatches[subcategoryKey].push(match);\n    });\n\n    return groupedMatches;\n  };\n\n  const groupedMatches = groupMatchesBySubcategory();\n\n  if (loading) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">Soccer</h1>\n          <p className=\"sport-subtitle\">Bet on Premier League, Champions League and more</p>\n        </div>\n        <div className=\"matches-section\">\n          <div className=\"section-header\">\n            <h2 className=\"section-title\">UPCOMING MATCHES</h2>\n            <div className=\"view-all-btn empty\" style={{ opacity: 0.5 }}>Loading…</div>\n          </div>\n          <div className=\"matches-skeleton-grid\">\n            {Array.from({ length: 8 }).map((_, idx) => (\n              <div key={idx} className=\"skeleton\" style={{ padding: 16 }}>\n                <div className=\"skeleton-line\" style={{ width: '60%', height: 16, marginBottom: 8 }}></div>\n                <div className=\"skeleton-line\" style={{ width: '80%', height: 12, marginBottom: 12 }}></div>\n                <div style={{ display: 'flex', gap: 8 }}>\n                  <div className=\"skeleton-odds\"></div>\n                  <div className=\"skeleton-odds\"></div>\n                  <div className=\"skeleton-odds\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">Soccer</h1>\n          <p className=\"sport-subtitle\">Bet on Premier League, Champions League and more</p>\n        </div>\n        <div className=\"error-container\">\n          <p className=\"error-message\">{error}</p>\n          <button onClick={fetchMatches} className=\"retry-btn\">Retry</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"sport-page\">\n      <div className=\"sport-header\">\n        <h1 className=\"sport-title\">Soccer</h1>\n        <p className=\"sport-subtitle\">Bet on Premier League, Champions League and more</p>\n      </div>\n\n      <div className=\"matches-section\">\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">UPCOMING MATCHES</h2>\n          <button className=\"view-all-btn\">View All</button>\n        </div>\n\n        <div className=\"matches-grid\">\n          {Object.entries(groupedMatches).map(([subcategory, matches]) => {\n            const first = matches[0] || {};\n            const groupTitle = first.fullLeagueTitle || computeFullLeagueTitle({\n              sportKeyOrName: first.sport_key || first.sport || 'Soccer',\n              country: first.country || subcategory || '',\n              leagueName: first.league || subcategory,\n              fallbackSportTitle: 'Soccer'\n            });\n            return (\n              <SubcategoryMatchCard\n                key={subcategory}\n                subcategory={groupTitle}\n                matches={matches}\n                sport=\"Soccer\"\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Soccer;"],"names":["DISABLE_ODDS_LOCK","process","REACT_APP_DISABLE_ODDS_LOCK","RISK_THRESHOLDS","assessOddsRisk","match","odds","oddsType","shouldDisable","reason","riskLevel","riskFactors","isOddsTooLow","push","isObviousOutcome","isLive","status","undefined","homeScore","awayScore","Math","abs","startTime","Date","isLiveMatchObvious","includes","length","join","_ref","riskAssessment","className","_jsx","concat","title","children","titleCase","String","arguments","replace","split","filter","Boolean","map","w","charAt","toUpperCase","slice","computeFullLeagueTitle","sportKeyOrName","country","leagueName","fallbackSportTitle","CANONICAL_LEAGUE_MAP","sport","league","normalizedKey","toLowerCase","c","countryFromKey","leagueFromKey","key","trim","tokens","parseSportKey","sportRaw","sportDisplay","countryDisplay","leagueDisplay","lcLeague","lcCountry","rawParts","parts","p","norm","some","x","subcategory","matches","dispatch","useDispatch","navigate","useNavigate","expanded","setExpanded","useState","isLiveMatch","getLiveTimeDisplay","liveTime","_jsxs","diffMs","diffMins","floor","getLiveScoreDisplay","score","formatMatchDateTime","date","timeString","toLocaleTimeString","hour","minute","dateString","toLocaleDateString","day","month","MatchRow","_ref2","basicOddsTypes","ignoredLineKeys","Set","allMatchOddsTypes","Object","keys","has","additionalMarketsCount","max","onClick","homeMatches","sessionStorage","getItem","homePopular","homeFiltered","console","log","e","_id","id","homeTeam","awayTeam","getBestOdds","LockedOdds","stopPropagation","addToBetslip","betType","bet","matchId","type","stake","payload","toFixed","error","validMatches","values","hasValidOdds","basicOddsTypesArray","getAllBasicOddsTypes","allTypes","forEach","Map","get","value","add","default","Array","from","prev","style","cursor","idx","Soccer","setMatches","filteredMatches","setFilteredMatches","loading","setLoading","setError","searchTerm","setSearchTerm","selectedDate","setSelectedDate","useEffect","handleGlobalSearch","event","globalSearchTerm","detail","handleGlobalDateFilter","globalSelectedDate","window","addEventListener","existingSearchTerm","localStorage","existingSelectedDate","removeEventListener","filtered","_match$homeTeam","_match$awayTeam","_match$league","_match$sport","searchLower","selectedDateObj","setHours","nextDay","setDate","getDate","matchDate","fetchMatches","async","response","apiService","getMatchesByKey","soccerMatches","data","isArray","now","rawKey","sport_key","sport_title","isSoccer","leagueLower","isClearlyNonSoccer","test","start","isUpcoming","oddsObj","k","num","Number","isFinite","additionalMarkets","displayedOddsCount","additionalOddsCount","derivedCountry","competition","tournament","time","toLocaleString","additionalOdds","transformMatchesResponse","err","interval","setInterval","clearInterval","subcategoryMappings","groupedMatches","groupMatchesBySubcategory","normalize","s","subcategoryKey","m","leagueNorm","canonical","variations","entries","v","vNorm","computeCanonicalSubcategory","opacity","_","padding","width","height","marginBottom","display","gap","first","groupTitle","fullLeagueTitle","SubcategoryMatchCard"],"sourceRoot":""}