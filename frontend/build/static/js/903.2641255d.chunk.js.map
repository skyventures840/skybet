{"version":3,"file":"static/js/903.2641255d.chunk.js","mappings":"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","sources":["pages/Bets.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../services/api';\n\nconst Bets = () => {\n  const [betHistory, setBetHistory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [expandedBets, setExpandedBets] = useState(new Set());\n  const [stats, setStats] = useState({\n    activeBets: 0,\n    totalBets: 0,\n    winRate: 0,\n    wonBets: 0,\n    lostBets: 0,\n    voidBets: 0,\n    cancelledBets: 0\n  });\n  const [filters, setFilters] = useState({\n    status: 'all', // all, pending, won, lost, void\n    type: 'all'    // all, single, parlay\n  });\n  const [selectedBet, setSelectedBet] = useState(null);\n  const [showFullPageBet, setShowFullPageBet] = useState(false);\n\n  useEffect(() => {\n    fetchBetHistory();\n    fetchBetStats();\n  }, []);\n\n  useEffect(() => {\n    if (betHistory.length > 0) {\n      fetchBetStats();\n      // Also update local stats for immediate accuracy\n      const localStats = calculateLocalStats(betHistory);\n      setStats(prevStats => ({\n        ...prevStats,\n        ...localStats\n      }));\n    }\n  }, [betHistory]);\n\n  // Listen for real-time bet updates and refresh lists\n  useEffect(() => {\n    const onBetUpdate = () => {\n      fetchBetHistory();\n      fetchBetStats();\n    };\n    window.addEventListener('bet:update', onBetUpdate);\n    return () => window.removeEventListener('bet:update', onBetUpdate);\n  }, []);\n\n\n\n  const fetchBetHistory = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log('Fetching bet history...');\n      const response = await apiService.getUserBets();\n      console.log('Bet history API response:', response);\n      \n      if (response && response.data) {\n        console.log('Bet history data:', response.data);\n        const bets = response.data.bets || [];\n        setBetHistory(bets);\n      } else {\n        console.log('No response data received');\n        setBetHistory([]);\n      }\n    } catch (err) {\n      console.error('Failed to fetch bet history:', err);\n      console.error('Error details:', {\n        message: err.message,\n        response: err.response?.data,\n        status: err.response?.status\n      });\n      setError('Failed to load bet history.');\n      setBetHistory([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Calculate local statistics from bet data\n  const calculateLocalStats = (bets) => {\n    const totalBets = bets.length;\n    const activeBets = bets.filter(bet => (bet.status || 'pending').toLowerCase() === 'pending').length;\n    const wonBets = bets.filter(bet => (bet.status || '').toLowerCase() === 'won').length;\n    const lostBets = bets.filter(bet => (bet.status || '').toLowerCase() === 'lost').length;\n    const voidBets = bets.filter(bet => (bet.status || '').toLowerCase() === 'void').length;\n    const cancelledBets = bets.filter(bet => (bet.status || '').toLowerCase() === 'cancelled').length;\n    \n    const settledBets = wonBets + lostBets;\n    const winRate = settledBets > 0 ? ((wonBets / settledBets) * 100).toFixed(1) : 0;\n    \n    return {\n      totalBets,\n      activeBets,\n      wonBets,\n      lostBets,\n      voidBets,\n      cancelledBets,\n      winRate: parseFloat(winRate)\n    };\n  };\n\n  const fetchBetStats = async () => {\n    try {\n      console.log('Fetching bet stats summary from database...');\n      const response = await apiService.getBetStatsSummary();\n      console.log('Bet stats API response:', response);\n      \n      if (response && response.data) {\n        const summary = response.data;\n        console.log('Processing bet stats summary:', summary);\n        \n        // Use backend data directly (it's more accurate than local calculation)\n        const statsFromDB = {\n          activeBets: summary.activeBets ?? summary.pendingBets ?? 0,\n          totalBets: summary.totalBets ?? 0,\n          winRate: summary.winRate != null ? parseFloat(summary.winRate) : 0,\n          wonBets: summary.wonBets ?? 0,\n          lostBets: summary.lostBets ?? 0,\n          voidBets: summary.voidBets ?? 0,\n          cancelledBets: summary.cancelledBets ?? 0,\n          totalStaked: summary.totalStaked ?? 0,\n          totalWon: summary.totalWon ?? 0,\n          profit: summary.profit ?? 0\n        };\n        \n        console.log('Setting stats from database:', statsFromDB);\n        setStats(statsFromDB);\n      } else {\n        console.warn('No data received from bet stats API, using local calculation');\n        // Fallback to local calculation if API fails\n        const localStats = calculateLocalStats(betHistory);\n        setStats(localStats);\n      }\n    } catch (err) {\n      console.error('Failed to fetch bet stats summary:', err);\n      console.error('Error details:', {\n        message: err.message,\n        response: err.response?.data,\n        status: err.response?.status\n      });\n      \n      // Fallback to local calculation if API fails\n      console.log('Using local calculation as fallback');\n      const localStats = calculateLocalStats(betHistory);\n      setStats(localStats);\n    }\n  };\n\n  // Removed legacy status helpers (color/icon) since redesigned UI no longer uses them\n\n  const toggleBetExpansion = (betId) => {\n    // Enforce single-open accordion behavior\n    if (expandedBets.has(betId)) {\n      // Collapse if the same bet is clicked\n      setExpandedBets(new Set());\n    } else {\n      // Open only the clicked bet, close others\n      setExpandedBets(new Set([betId]));\n    }\n  };\n\n  // Full-page bet view functions\n  const openFullPageBet = (bet) => {\n    setSelectedBet(bet);\n    setShowFullPageBet(true);\n  };\n\n  const closeFullPageBet = () => {\n    setSelectedBet(null);\n    setShowFullPageBet(false);\n  };\n\n  const formatOdds = (odds) => {\n    if (typeof odds === 'number') {\n      return odds.toFixed(2);\n    } else if (odds && typeof odds.selected === 'number') {\n      return odds.selected.toFixed(2);\n    } else if (odds && typeof odds === 'string') {\n      return parseFloat(odds).toFixed(2);\n    }\n    return '0.00';\n  };\n\n  const formatAmount = (amount) => {\n    if (typeof amount === 'number') {\n      return amount.toFixed(2);\n    } else if (amount && typeof amount === 'string') {\n      return parseFloat(amount).toFixed(2);\n    }\n    return '0.00';\n  };\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Filter functions\n  const handleFilterChange = (filterType, value) => {\n    setFilters(prev => ({\n      ...prev,\n      [filterType]: value\n    }));\n  };\n\n  const getFilteredBets = () => {\n    return betHistory.filter(bet => {\n      // Status filter\n      if (filters.status !== 'all') {\n        const betStatus = (bet.status || 'pending').toLowerCase();\n        if (filters.status !== betStatus) {\n          return false;\n        }\n      }\n\n      // Type filter\n      if (filters.type !== 'all') {\n        const isParlay = bet.market === 'parlay' && bet.matches && bet.matches.length > 1;\n        if (filters.type === 'parlay' && !isParlay) {\n          return false;\n        }\n        if (filters.type === 'single' && isParlay) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  };\n\n  // Function to expand multibets into individual match rows\n\n  return (\n    <div className=\"bets-page\">\n      <div className=\"bets-header\">\n        <h1>My Bets</h1>\n        <div className=\"bets-stats\">\n          <div className=\"stat-card\">\n            <span className=\"stat-label\">Active Bets</span>\n            <span className=\"stat-value\">{stats.activeBets}</span>\n          </div>\n          <div className=\"stat-card\">\n            <span className=\"stat-label\">Total Bets</span>\n            <span className=\"stat-value\">{stats.totalBets}</span>\n          </div>\n          <div className=\"stat-card\">\n            <span className=\"stat-label\">Win Rate</span>\n            <span className=\"stat-value\">{stats.winRate}%</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bets-content\">\n        {loading ? (\n          <div className=\"loading-container\">\n            <div className=\"loading-spinner\"></div>\n            <p>Loading bet history...</p>\n          </div>\n        ) : error ? (\n          <div className=\"error-container\">\n            <p className=\"error-message\">{error}</p>\n            <button onClick={fetchBetHistory} className=\"retry-btn\">\n              Retry\n            </button>\n          </div>\n        ) : betHistory.length === 0 ? (\n        <div className=\"no-bets\">\n          <div className=\"no-bets-icon\">🎯</div>\n          <h3>No bets placed yet</h3>\n          <p>Start betting on your favorite sports to see your bet history here.</p>\n        </div>\n        ) : (\n          <div className=\"bet-history-container\">\n            <div className=\"bet-history-header\">\n              <div className=\"bet-history-title-section\">\n                <h2>Bet History</h2>\n                <div className=\"bet-history-stats\">\n                  <span className=\"stat-item\">Total: {stats.totalBets}</span>\n                  <span className=\"stat-item\">Pending: {stats.activeBets}</span>\n                  <span className=\"stat-item\">Won: {stats.wonBets}</span>\n                  <span className=\"stat-item\">Lost: {stats.lostBets}</span>\n                </div>\n              </div>\n              \n              <div className=\"bet-filters\">\n                <div className=\"filter-group\">\n                  <label>Status:</label>\n                  <select \n                    value={filters.status} \n                    onChange={(e) => handleFilterChange('status', e.target.value)}\n                    className=\"filter-select\"\n                  >\n                    <option value=\"all\">All</option>\n                    <option value=\"pending\">Pending</option>\n                    <option value=\"won\">Won</option>\n                    <option value=\"lost\">Lost</option>\n                    <option value=\"void\">Void</option>\n                  </select>\n                </div>\n                \n                <div className=\"filter-group\">\n                  <label>Type:</label>\n                  <select \n                    value={filters.type} \n                    onChange={(e) => handleFilterChange('type', e.target.value)}\n                    className=\"filter-select\"\n                  >\n                    <option value=\"all\">All</option>\n                    <option value=\"single\">Single</option>\n                    <option value=\"parlay\">Parlay</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bet-history-list\">\n              {getFilteredBets().map((bet) => {\n                const isExpanded = expandedBets.has(bet.id);\n                const isMultibet = bet.market === 'parlay' && bet.matches && bet.matches.length > 1;\n                \n                // For testing - create sample matches if none exist\n                let displayMatches = bet.matches || [];\n                // Normalize match status casing and shape for consistent rendering\n                const normalizeStatus = (s) => {\n                  if (!s) return 'pending';\n                  const lower = String(s).toLowerCase();\n                  if (lower === 'win') return 'won';\n                  if (lower === 'loss') return 'lost';\n                  return lower; // pending, won, lost, void\n                };\n                if (isMultibet && displayMatches.length === 0) {\n                  // Parse matches from selection string for legacy bets\n                  if (bet.selection && bet.selection.includes(';')) {\n                    const matchStrings = bet.selection.split(';');\n                    displayMatches = matchStrings.map((matchStr, index) => {\n                      const parts = matchStr.split(':');\n                      if (parts.length >= 2) {\n                        const matchName = parts[0].trim();\n                        const selectionPart = parts[1].trim();\n                        const selectionMatch = selectionPart.match(/(.+?)\\s*\\(([0-9.]+)\\)/);\n                        \n                        return {\n                          matchId: `legacy-${index}`,\n                          homeTeam: matchName.split(' vs ')[0] || 'Unknown',\n                          awayTeam: matchName.split(' vs ')[1] || 'Unknown',\n                          selection: selectionMatch ? selectionMatch[1].trim() : '1',\n                          odds: selectionMatch ? parseFloat(selectionMatch[2]) : 1.5,\n                          status: index === 0 ? 'won' : index === 1 ? 'won' : 'pending',\n                          outcome: index === 0 ? '1' : index === 1 ? '2' : null,\n                          startTime: new Date()\n                        };\n                      }\n                      return null;\n                    }).filter(Boolean);\n                  }\n                }\n                \n                // For single bets, create a single match entry\n                if (!isMultibet && displayMatches.length === 0) {\n                  displayMatches = [{\n                    matchId: bet.matchId,\n                    homeTeam: bet.match?.homeTeam || 'Unknown',\n                    awayTeam: bet.match?.awayTeam || 'Unknown',\n                    selection: bet.selection,\n                    odds: bet.odds?.selected || bet.odds,\n                    status: bet.status,\n                    outcome: bet.result?.outcome || bet.status,\n                    startTime: bet.createdAt\n                  }];\n                }\n                \n                // Normalize statuses for counting\n                displayMatches = displayMatches.map(m => ({\n                  ...m,\n                  status: normalizeStatus(m.status),\n                  outcome: m.outcome || m.result?.finalOutcome || null\n                }));\n\n                const wonCount = displayMatches.filter(m => normalizeStatus(m.status) === 'won').length;\n                const lostCount = displayMatches.filter(m => normalizeStatus(m.status) === 'lost').length;\n                const totalCount = displayMatches.length || 1;\n\n                // getMatchType removed since Type column is no longer used\n\n                const getFtResult = (match) => {\n                  // Prefer structured result scores if present\n                  if (match.result && (match.result.homeScore != null || match.result.awayScore != null)) {\n                    const hs = match.result.homeScore ?? '-';\n                    const as = match.result.awayScore ?? '-';\n                    return `${hs}-${as}`;\n                  }\n                  // Fallbacks\n                  if (match.finalScore) return match.finalScore;\n                  if (match.outcome && ['1','X','2'].includes(String(match.outcome))) return match.outcome;\n                  return normalizeStatus(match.status) === 'pending' ? '—' : (match.outcome || match.status || '—');\n                };\n\n                return (\n                  <div key={bet.id} className={`bet-card ${bet.status} ${isExpanded ? 'expanded' : 'collapsed'}`}>\n                    {/* Collapsed Summary (hidden when expanded) */}\n                    {!isExpanded && (\n                      <div \n                        className=\"bet-summary-collapsed\"\n                        onClick={() => openFullPageBet(bet)}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        <div className=\"bet-summary-info\">\n                          <div className=\"bet-summary-title\">#{bet.id?.slice(-6) || 'N/A'} • {formatDate(bet.createdAt)}</div>\n                        </div>\n                        <div className=\"bet-summary-amounts\">\n                          <span className=\"bet-summary-payout\">${formatAmount(bet.potentialWin)}</span>\n                          <span className={`bet-status status-${(bet.status || 'pending').toLowerCase()}`}>\n                            {(() => {\n                              const s = (bet.status || 'pending').toLowerCase();\n                              return s === 'won' ? 'Won' : s === 'lost' ? 'Lost' : s === 'void' ? 'Void' : 'Pending';\n                            })()}\n                          </span>\n                          <button \n                            className=\"expand-btn\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleBetExpansion(bet.id);\n                            }}\n                            title=\"Expand/Collapse bet details\"\n                          >\n                            ▼\n                          </button>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Expanded Content */}\n                    {isExpanded && (\n                      <div \n                        className=\"betslip-match-details\"\n                        onClick={() => openFullPageBet(bet)}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        {/* Header summary like the screenshot */}\n                        <div className=\"betslip-header-expanded\">\n                          <div className=\"betslip-header-item\">\n                            <span className=\"betslip-header-label\">Amount</span>\n                            <span className=\"betslip-header-value\">${formatAmount(bet.stake)}</span>\n                          </div>\n                          <div className=\"betslip-header-item\">\n                            <span className=\"betslip-header-label\">Possible Payout</span>\n                            <span className=\"betslip-header-value\">${formatAmount(bet.potentialWin)}</span>\n                          </div>\n                          <div className=\"betslip-header-item\">\n                            <span className=\"betslip-header-label\">Won/Lost/Total</span>\n                            <span className=\"betslip-header-value won-lost\">{wonCount}/{lostCount}/{totalCount}</span>\n                          </div>\n                          <button \n                            className=\"collapse-btn\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleBetExpansion(bet.id);\n                            }}\n                            title=\"Collapse bet details\"\n                          >\n                            ▲\n                          </button>\n                        </div>\n\n                        {/* Match table redesigned to mirror attachment */}\n                        <table className=\"betslip-match-table\">\n                          <thead>\n                            <tr>\n                              <th>Match</th>\n                              <th>Pick</th>\n                              <th>FT Results</th>\n                              <th>Outcome</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {displayMatches.map((match, index) => (\n                              <tr key={index}>\n                                <td className=\"match-name\">\n                                  <div className=\"match-name-stack\">\n                                    <span className=\"home-team\">{match.homeTeam}</span>\n                                    <span className=\"vs\">vs</span>\n                                    <span className=\"away-team\">{match.awayTeam}</span>\n                                  </div>\n                                </td>\n                                <td className=\"selection\">\n                                  {match.homeTeam && match.awayTeam ? (\n                                    <>\n                                      {match.selection} ({formatOdds(match.odds)})\n                                    </>\n                                  ) : (match.selection)}\n                                </td>\n                                <td className=\"odds\">{getFtResult(match)}</td>\n                                <td className={`result ${normalizeStatus(match.status) === 'lost' ? 'lost' : ''}`}>\n                                  {normalizeStatus(match.status) === 'won' ? 'Won' : normalizeStatus(match.status) === 'lost' ? 'Lost' : normalizeStatus(match.status) === 'void' ? 'Void' : 'Pending'}\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Full-page bet view */}\n      {showFullPageBet && selectedBet && (\n        <div className=\"full-page-bet-overlay\">\n          <div className=\"full-page-bet-container\">\n            <div className=\"full-page-bet-header\">\n              <h2>Bet Details - #{selectedBet.id?.slice(-6) || 'N/A'}</h2>\n              <button \n                className=\"close-full-page-btn\"\n                onClick={closeFullPageBet}\n                title=\"Close full page view\"\n              >\n                ✕\n              </button>\n            </div>\n            \n            <div className=\"full-page-bet-content\">\n              {(() => {\n                const bet = selectedBet;\n                const isMultibet = bet.market === 'parlay' && bet.matches && bet.matches.length > 1;\n                \n                // Reuse the same logic for displaying matches\n                let displayMatches = bet.matches || [];\n                const normalizeStatus = (s) => {\n                  if (!s) return 'pending';\n                  const lower = String(s).toLowerCase();\n                  if (lower === 'win') return 'won';\n                  if (lower === 'loss') return 'lost';\n                  return lower;\n                };\n                \n                if (isMultibet && displayMatches.length === 0) {\n                  if (bet.selection && bet.selection.includes(';')) {\n                    const matchStrings = bet.selection.split(';');\n                    displayMatches = matchStrings.map((matchStr, index) => {\n                      const parts = matchStr.split(':');\n                      if (parts.length >= 2) {\n                        const matchName = parts[0].trim();\n                        const selectionPart = parts[1].trim();\n                        const selectionMatch = selectionPart.match(/(.+?)\\s*\\(([0-9.]+)\\)/);\n                        \n                        return {\n                          matchId: `legacy-${index}`,\n                          homeTeam: matchName.split(' vs ')[0] || 'Unknown',\n                          awayTeam: matchName.split(' vs ')[1] || 'Unknown',\n                          selection: selectionMatch ? selectionMatch[1].trim() : '1',\n                          odds: selectionMatch ? parseFloat(selectionMatch[2]) : 1.5,\n                          status: index === 0 ? 'won' : index === 1 ? 'won' : 'pending',\n                          outcome: index === 0 ? '1' : index === 1 ? '2' : null,\n                          startTime: new Date()\n                        };\n                      }\n                      return null;\n                    }).filter(Boolean);\n                  }\n                }\n                \n                if (!isMultibet && displayMatches.length === 0) {\n                  displayMatches = [{\n                    matchId: bet.matchId,\n                    homeTeam: bet.match?.homeTeam || 'Unknown',\n                    awayTeam: bet.match?.awayTeam || 'Unknown',\n                    selection: bet.selection,\n                    odds: bet.odds?.selected || bet.odds,\n                    status: bet.status,\n                    outcome: bet.result?.outcome || bet.status,\n                    startTime: bet.createdAt\n                  }];\n                }\n                \n                displayMatches = displayMatches.map(m => ({\n                  ...m,\n                  status: normalizeStatus(m.status),\n                  outcome: m.outcome || m.result?.finalOutcome || null\n                }));\n\n                const wonCount = displayMatches.filter(m => normalizeStatus(m.status) === 'won').length;\n                const lostCount = displayMatches.filter(m => normalizeStatus(m.status) === 'lost').length;\n                const totalCount = displayMatches.length || 1;\n\n                const getFtResult = (match) => {\n                  if (match.result && (match.result.homeScore != null || match.result.awayScore != null)) {\n                    const hs = match.result.homeScore ?? '-';\n                    const as = match.result.awayScore ?? '-';\n                    return `${hs}-${as}`;\n                  }\n                  if (match.finalScore) return match.finalScore;\n                  if (match.outcome && ['1','X','2'].includes(String(match.outcome))) return match.outcome;\n                  return normalizeStatus(match.status) === 'pending' ? '—' : (match.outcome || match.status || '—');\n                };\n\n                return (\n                  <div className=\"full-page-bet-details\">\n                    {/* Bet Summary */}\n                    <div className=\"full-page-bet-summary\">\n                      <div className=\"bet-summary-item\">\n                        <span className=\"label\">Bet ID:</span>\n                        <span className=\"value\">#{bet.id?.slice(-6) || 'N/A'}</span>\n                      </div>\n                      <div className=\"bet-summary-item\">\n                        <span className=\"label\">Date:</span>\n                        <span className=\"value\">{formatDate(bet.createdAt)}</span>\n                      </div>\n                      <div className=\"bet-summary-item\">\n                        <span className=\"label\">Amount:</span>\n                        <span className=\"value\">${formatAmount(bet.stake)}</span>\n                      </div>\n                      <div className=\"bet-summary-item\">\n                        <span className=\"label\">Possible Payout:</span>\n                        <span className=\"value\">${formatAmount(bet.potentialWin)}</span>\n                      </div>\n                      <div className=\"bet-summary-item\">\n                        <span className=\"label\">Status:</span>\n                        <span className={`value status-${(bet.status || 'pending').toLowerCase()}`}>\n                          {(() => {\n                            const s = (bet.status || 'pending').toLowerCase();\n                            return s === 'won' ? 'Won' : s === 'lost' ? 'Lost' : s === 'void' ? 'Void' : 'Pending';\n                          })()}\n                        </span>\n                      </div>\n                      <div className=\"bet-summary-item\">\n                        <span className=\"label\">Won/Lost/Total:</span>\n                        <span className=\"value\">{wonCount}/{lostCount}/{totalCount}</span>\n                      </div>\n                    </div>\n\n                    {/* Match Details */}\n                    <div className=\"full-page-matches\">\n                      <h3>Match Details</h3>\n                      <table className=\"full-page-match-table\">\n                        <thead>\n                          <tr>\n                            <th>Match</th>\n                            <th>Pick</th>\n                            <th>FT Results</th>\n                            <th>Outcome</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {displayMatches.map((match, index) => (\n                            <tr key={index}>\n                              <td className=\"match-name\">\n                                <div className=\"match-name-stack\">\n                                  <span className=\"home-team\">{match.homeTeam}</span>\n                                  <span className=\"vs\">vs</span>\n                                  <span className=\"away-team\">{match.awayTeam}</span>\n                                </div>\n                              </td>\n                              <td className=\"selection\">\n                                {match.homeTeam && match.awayTeam ? (\n                                  <>\n                                    {match.selection} ({formatOdds(match.odds)})\n                                  </>\n                                ) : (match.selection)}\n                              </td>\n                              <td className=\"odds\">{getFtResult(match)}</td>\n                              <td className={`result ${normalizeStatus(match.status) === 'lost' ? 'lost' : ''}`}>\n                                {normalizeStatus(match.status) === 'won' ? 'Won' : normalizeStatus(match.status) === 'lost' ? 'Lost' : normalizeStatus(match.status) === 'void' ? 'Void' : 'Pending'}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                );\n              })()}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Bets;"],"names":["Bets","_selectedBet$id","betHistory","setBetHistory","useState","loading","setLoading","error","setError","expandedBets","setExpandedBets","Set","stats","setStats","activeBets","totalBets","winRate","wonBets","lostBets","voidBets","cancelledBets","filters","setFilters","status","type","selectedBet","setSelectedBet","showFullPageBet","setShowFullPageBet","useEffect","fetchBetHistory","fetchBetStats","length","localStats","calculateLocalStats","prevStats","_objectSpread","onBetUpdate","window","addEventListener","removeEventListener","async","console","log","response","apiService","getUserBets","data","bets","err","_err$response","_err$response2","message","filter","bet","toLowerCase","settledBets","toFixed","parseFloat","getBetStatsSummary","_ref","_summary$activeBets","_summary$totalBets","_summary$wonBets","_summary$lostBets","_summary$voidBets","_summary$cancelledBet","_summary$totalStaked","_summary$totalWon","_summary$profit","summary","statsFromDB","pendingBets","totalStaked","totalWon","profit","warn","_err$response3","_err$response4","toggleBetExpansion","betId","has","openFullPageBet","formatOdds","odds","selected","formatAmount","amount","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","handleFilterChange","filterType","value","prev","_jsxs","className","children","_jsx","onClick","onChange","e","target","betStatus","isParlay","market","matches","map","_bet$id","isExpanded","id","isMultibet","displayMatches","normalizeStatus","s","lower","String","selection","includes","split","matchStr","index","parts","matchName","trim","selectionMatch","match","matchId","concat","homeTeam","awayTeam","outcome","startTime","Boolean","_bet$match","_bet$match2","_bet$odds","_bet$result","result","createdAt","m","_m$result","finalOutcome","wonCount","lostCount","totalCount","getFtResult","homeScore","awayScore","_match$result$homeSco","_match$result$awaySco","hs","as","finalScore","style","cursor","slice","potentialWin","stopPropagation","title","stake","_Fragment","closeFullPageBet","_bet$id2","_bet$match3","_bet$match4","_bet$odds2","_bet$result2","_m$result2","_match$result$homeSco2","_match$result$awaySco2"],"sourceRoot":""}