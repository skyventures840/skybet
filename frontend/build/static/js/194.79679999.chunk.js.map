{"version":3,"file":"static/js/194.79679999.chunk.js","mappings":"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","sources":["utils/riskManagement.js","components/VideoPlayerScheduled.js","components/LockedOdds.js","utils/leagueTitle.js","components/MatchCard.js"],"sourcesContent":["const DISABLE_ODDS_LOCK = process.env.REACT_APP_DISABLE_ODDS_LOCK === 'true';\r\n\r\nexport const RISK_THRESHOLDS = {\r\n  // Minimum odds allowed (below this is risky): relax slightly to avoid over-locking\r\n  MIN_ODDS: 1.11,\r\n  \r\n  MAX_ODDS: 50.0,\r\n  \r\n  LIVE_RISK_MULTIPLIER: 1.5,\r\n  \r\n  LIVE_SCORE_DIFFERENCE_THRESHOLD: 3,\r\n  \r\n  LIVE_TIME_THRESHOLD_MINUTES: 10,\r\n  \r\n  OBVIOUS_WIN_THRESHOLD: 1.11,\r\n  OBVIOUS_LOSS_THRESHOLD: 50.0,\r\n};\r\n\r\n/**\r\n * Check if odds are too low (high risk)\r\n * @param {number} odds - The odds value\r\n * @returns {boolean} - True if odds are too low\r\n */\r\nexport const isOddsTooLow = (odds) => {\r\n  if (!odds || typeof odds !== 'number') return false;\r\n  return odds < RISK_THRESHOLDS.MIN_ODDS;\r\n};\r\n\r\n/**\r\n * Check if odds are too high (too obvious)\r\n * @param {number} odds - The odds value\r\n * @returns {boolean} - True if odds are too high\r\n */\r\nexport const isOddsTooHigh = (odds) => {\r\n  if (!odds || typeof odds !== 'number') return false;\r\n  return odds > RISK_THRESHOLDS.MAX_ODDS;\r\n};\r\n\r\n/**\r\n * Check if live match has obvious outcome based on score\r\n * @param {Object} match - Match object\r\n * @returns {boolean} - True if outcome is too obvious\r\n */\r\nexport const isLiveMatchObvious = (match) => {\r\n  if (!match.isLive && match.status !== 'live') return false;\r\n  \r\n  if (match.homeScore !== undefined && match.awayScore !== undefined) {\r\n    const scoreDiff = Math.abs(match.homeScore - match.awayScore);\r\n    if (scoreDiff >= RISK_THRESHOLDS.LIVE_SCORE_DIFFERENCE_THRESHOLD) {\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  // Check if match is in final minutes\r\n  if (match.startTime) {\r\n    const startTime = new Date(match.startTime);\r\n    const now = new Date();\r\n    const matchDuration = 90; // Assuming 90 minutes for soccer\r\n    const elapsedMinutes = (now - startTime) / (1000 * 60);\r\n    const remainingMinutes = matchDuration - elapsedMinutes;\r\n    \r\n    if (remainingMinutes <= RISK_THRESHOLDS.LIVE_TIME_THRESHOLD_MINUTES) {\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Check if odds represent an obvious outcome\r\n * @param {number} odds - The odds value\r\n * @returns {boolean} - True if outcome is too obvious\r\n */\r\nexport const isObviousOutcome = (odds) => {\r\n  if (!odds || typeof odds !== 'number') return false;\r\n  \r\n  // Only very low odds (below 1.14) are considered risky\r\n  if (odds <= RISK_THRESHOLDS.OBVIOUS_WIN_THRESHOLD) return true;\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Main function to determine if odds should be disabled\r\n * @param {Object} match - Match object\r\n * @param {number} odds - The odds value\r\n * @param {string} oddsType - Type of odds (1, X, 2, etc.)\r\n * @returns {Object} - Risk assessment result\r\n */\r\nexport const assessOddsRisk = (match, odds, oddsType) => {\r\n  // Environment override to never lock odds (useful for production hosting issues)\r\n  if (DISABLE_ODDS_LOCK) {\r\n    return {\r\n      shouldDisable: false,\r\n      reason: null,\r\n      riskLevel: 'none',\r\n      riskFactors: []\r\n    };\r\n  }\r\n\r\n  if (!odds || typeof odds !== 'number') {\r\n    return {\r\n      shouldDisable: false,\r\n      reason: null,\r\n      riskLevel: 'none'\r\n    };\r\n  }\r\n  \r\n  const riskFactors = [];\r\n  let riskLevel = 'low';\r\n  \r\n  // Check if odds are too low\r\n  if (isOddsTooLow(odds)) {\r\n    riskFactors.push('odds_too_low');\r\n    riskLevel = 'high';\r\n  }\r\n  \r\n  // Check if outcome is too obvious (only low odds below 1.14 are considered risky)\r\n  if (isObviousOutcome(odds)) {\r\n    riskFactors.push('obvious_outcome');\r\n    riskLevel = 'high';\r\n  }\r\n  \r\n  // Check live match specific risks\r\n  if (match.isLive || match.status === 'live') {\r\n    if (isLiveMatchObvious(match)) {\r\n      riskFactors.push('live_match_obvious');\r\n      riskLevel = 'high';\r\n    } else {\r\n      riskLevel = 'medium'; // Live matches are inherently riskier\r\n    }\r\n  }\r\n  \r\n  // Check for specific odds type risks\r\n  if (oddsType === 'X' && odds < 1.50) {\r\n    // Draw odds below 1.50 are suspicious\r\n    riskFactors.push('suspicious_draw_odds');\r\n    riskLevel = 'medium';\r\n  }\r\n  \r\n  // Only lock live odds for truly high-risk scenarios\r\n  const isLive = match?.isLive || match?.status === 'live';\r\n  let shouldDisable;\r\n  if (isLive) {\r\n    // For live matches, disable ONLY when the live state is obviously risky\r\n    // i.e., outcome is obvious based on score/time\r\n    shouldDisable = riskFactors.includes('live_match_obvious');\r\n  } else {\r\n    // Pre-match: disable when overall risk is high\r\n    shouldDisable = riskLevel === 'high';\r\n  }\r\n\r\n  return {\r\n    shouldDisable,\r\n    reason: riskFactors.length > 0 ? riskFactors.join(', ') : null,\r\n    riskLevel,\r\n    riskFactors\r\n  };\r\n};\r\n\r\n/**\r\n * Get risk level display text\r\n * @param {string} riskLevel - Risk level\r\n * @returns {string} - Display text\r\n */\r\nexport const getRiskLevelText = (riskLevel) => {\r\n  switch (riskLevel) {\r\n    case 'high':\r\n      return 'High Risk - Odds Disabled';\r\n    case 'medium':\r\n      return 'Medium Risk';\r\n    case 'low':\r\n      return 'Low Risk';\r\n    default:\r\n      return 'Unknown Risk';\r\n  }\r\n};\r\n\r\n/**\r\n * Get risk reason display text\r\n * @param {Array} riskFactors - Array of risk factors\r\n * @returns {string} - Human readable risk reason\r\n */\r\nexport const getRiskReasonText = (riskFactors) => {\r\n  if (!riskFactors || riskFactors.length === 0) return '';\r\n  \r\n  const reasonMap = {\r\n    'odds_too_low': 'Odds too low',\r\n    'obvious_outcome': 'Odds too low (below 1.11)',\r\n    'live_match_obvious': 'Live match outcome obvious',\r\n    'suspicious_draw_odds': 'Suspicious draw odds'\r\n  };\r\n  \r\n  return riskFactors.map(factor => reasonMap[factor] || factor).join(', ');\r\n};\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\r\n\r\n// Props:\r\n// - src: string (required)\r\n// - poster: string (optional)\r\n// - startTime: Date|string (ISO) (required)\r\n// - controls: boolean (default true)\r\n// - className: string\r\n// - videoDisplayControl: string (optional) - 'scheduled', 'manual', 'live_only'\r\n// Behavior: show countdown if now < startTime; auto-play when now >= startTime\r\nconst VideoPlayerScheduled = ({ src, poster, startTime, controls = true, className = '', videoDisplayControl = 'scheduled' }) => {\r\n  const videoRef = useRef(null);\r\n  const [now, setNow] = useState(Date.now());\r\n  const startTs = useMemo(() => {\r\n    if (!startTime) return null;\r\n    const t = typeof startTime === 'string' ? Date.parse(startTime) : +startTime;\r\n    return Number.isFinite(t) ? t : null;\r\n  }, [startTime]);\r\n\r\n  // Determine if video should be displayed based on videoDisplayControl\r\n  const shouldDisplayVideo = useMemo(() => {\r\n    if (!startTs) return false;\r\n    \r\n    switch (videoDisplayControl) {\r\n      case 'scheduled':\r\n        return now >= startTs;\r\n      case 'manual':\r\n        return true; // Admin controls this\r\n      case 'live_only':\r\n        // For live_only, we need to check if the match is actually live\r\n        // This would typically come from the parent component\r\n        return now >= startTs;\r\n      default:\r\n        return now >= startTs;\r\n    }\r\n  }, [startTs, now, videoDisplayControl]);\r\n\r\n  const isReadyToPlay = shouldDisplayVideo && startTs !== null && now >= startTs;\r\n\r\n  useEffect(() => {\r\n    const id = setInterval(() => setNow(Date.now()), 1000);\r\n    return () => clearInterval(id);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isReadyToPlay && videoRef.current) {\r\n      const tryPlay = async () => {\r\n        try {\r\n          await videoRef.current.play();\r\n        } catch (e) {\r\n          // Autoplay may be blocked; show controls for manual start\r\n          // No-op: the user can press play\r\n        }\r\n      };\r\n      tryPlay();\r\n    }\r\n  }, [isReadyToPlay]);\r\n\r\n  const remainingMs = startTs ? Math.max(0, startTs - now) : 0;\r\n  const remainingSec = Math.floor(remainingMs / 1000);\r\n  const hh = String(Math.floor(remainingSec / 3600)).padStart(2, '0');\r\n  const mm = String(Math.floor((remainingSec % 3600) / 60)).padStart(2, '0');\r\n  const ss = String(remainingSec % 60).padStart(2, '0');\r\n\r\n  if (!src || !startTs) {\r\n    return null;\r\n  }\r\n\r\n  // Don't show anything if video shouldn't be displayed\r\n  if (!shouldDisplayVideo) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={`scheduled-video-container ${className}`} style={{ width: '100%', maxWidth: 960, margin: '0 auto' }}>\r\n      {!isReadyToPlay ? (\r\n        <div className=\"scheduled-video-countdown\" style={{\r\n          display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center',\r\n          aspectRatio: '16 / 9', backgroundColor: '#111', color: '#fff', borderRadius: 8, position: 'relative'\r\n        }}>\r\n          {poster && (\r\n            <img src={poster} alt=\"Poster\" style={{ position: 'absolute', inset: 0, width: '100%', height: '100%', objectFit: 'cover', opacity: 0.35, borderRadius: 8 }} />\r\n          )}\r\n          <div style={{ position: 'relative', zIndex: 1, textAlign: 'center', padding: 16 }}>\r\n            <div style={{ fontSize: 18, marginBottom: 8 }}>Broadcast starts in</div>\r\n            <div style={{ fontSize: 36, fontWeight: 700, letterSpacing: 1 }}>{hh}:{mm}:{ss}</div>\r\n            <div style={{ marginTop: 8, fontSize: 14, opacity: 0.85 }}>\r\n              {videoDisplayControl === 'manual' \r\n                ? 'Video is ready to play. Click play to start.' \r\n                : 'The video will start automatically at the scheduled time.'}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <video\r\n          ref={videoRef}\r\n          src={src}\r\n          poster={poster || undefined}\r\n          controls={controls}\r\n          playsInline\r\n          style={{ width: '100%', height: 'auto', borderRadius: 8, background: '#000' }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayerScheduled;\r\n\r\n\r\n","import React from 'react';\n\nconst LockedOdds = ({ \n  riskAssessment, \n  className = '' \n}) => {\n  const { shouldDisable } = riskAssessment;\n  \n  if (!shouldDisable) {\n    return null;\n  }\n  \n  return (\n    <div \n      className={`locked-odds ${className}`}\n      title=\"Odds Unavailable\"\n    >\n      {/* Lock Icon Only - Perfectly Centered */}\n      <div className=\"lock-icon\">\n        🔒\n      </div>\n    </div>\n  );\n};\n\nexport default LockedOdds;\n","// Utility to compute unified league title: \"Sport.Country.League\" or \"Sport.League\"\n// Derives sport from sport_key (first token) and country/league from remaining tokens when available.\n\nfunction titleCase(str = '') {\n  return String(str)\n    .replace(/[_.-]+/g, ' ')\n    .split(/\\s+/)\n    .filter(Boolean)\n    .map(w => w.charAt(0).toUpperCase() + w.slice(1))\n    .join(' ');\n}\n\nfunction parseSportKey(raw = '') {\n  const key = String(raw || '').trim();\n  if (!key) return { sport: '', countryFromKey: '', leagueFromKey: '' };\n  const tokens = key.split('_').filter(Boolean);\n  const sport = tokens[0] || '';\n  const countryFromKey = tokens[1] || '';\n  const leagueFromKey = tokens.length > 2 ? tokens.slice(2).join(' ') : '';\n  return { sport, countryFromKey, leagueFromKey };\n}\n\nexport function computeFullLeagueTitle({\n  sportKeyOrName,\n  country,\n  leagueName,\n  fallbackSportTitle\n}) {\n  // Canonical mappings for popular leagues from Odds API keys\n  const CANONICAL_LEAGUE_MAP = {\n    // Soccer\n    'soccer_epl': { sport: 'Soccer', country: 'England', league: 'Premier League' },\n    'soccer_england_league_1': { sport: 'Soccer', country: 'England', league: 'League One' },\n    'soccer_france_ligue_one': { sport: 'Soccer', country: 'France', league: 'Ligue 1' },\n    'soccer_spain_la_liga': { sport: 'Soccer', country: 'Spain', league: 'La Liga' },\n    'soccer_italy_serie_a': { sport: 'Soccer', country: 'Italy', league: 'Serie A' },\n    'soccer_germany_bundesliga': { sport: 'Soccer', country: 'Germany', league: 'Bundesliga' },\n    'soccer_netherlands_eredivisie': { sport: 'Soccer', country: 'Netherlands', league: 'Eredivisie' },\n    'soccer_portugal_primeira_liga': { sport: 'Soccer', country: 'Portugal', league: 'Primeira Liga' },\n    'soccer_belgium_first_div': { sport: 'Soccer', country: 'Belgium', league: 'First Division A' },\n    'soccer_uefa_champions_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Champions League' },\n    // Variants provided by API/user\n    'soccer_uefa_champs_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Champions League' },\n    'soccer_uefa_champs_league_qualification': { sport: 'Soccer', country: 'Europe', league: 'UEFA Champions League Qualification' },\n    'soccer_uefa_champs_league_women': { sport: 'Soccer', country: 'Europe', league: \"UEFA Women's Champions League\" },\n    'soccer_uefa_europa_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Europa League' },\n    'soccer_europe_uefa_europa_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Europa League' },\n    'soccer_uefa_european_championship': { sport: 'Soccer', country: 'Europe', league: 'UEFA Euro 2024' },\n    'soccer_uefa_euro_qualification': { sport: 'Soccer', country: 'Europe', league: 'UEFA Euro Qualification' },\n    'soccer_uefa_nations_league': { sport: 'Soccer', country: 'Europe', league: 'UEFA Nations League' },\n    'soccer_concacaf_gold_cup': { sport: 'Soccer', country: 'CONCACAF', league: 'Gold Cup' },\n    'soccer_concacaf_leagues_cup': { sport: 'Soccer', country: 'CONCACAF', league: 'Leagues Cup' },\n    'soccer_conmebol_copa_america': { sport: 'Soccer', country: 'CONMEBOL', league: 'Copa América' },\n    'soccer_conmebol_copa_libertadores': { sport: 'Soccer', country: 'CONMEBOL', league: 'Copa Libertadores' },\n    'soccer_conmebol_copa_sudamericana': { sport: 'Soccer', country: 'CONMEBOL', league: 'Copa Sudamericana' },\n    'soccer_usa_mls': { sport: 'Soccer', country: 'USA', league: 'MLS' },\n    // Basketball\n    'basketball_nba': { sport: 'Basketball', country: 'USA', league: 'NBA' },\n    'basketball_euroleague': { sport: 'Basketball', country: 'Europe', league: 'EuroLeague' },\n    'basketball_spain_liga_acb': { sport: 'Basketball', country: 'Spain', league: 'Liga ACB' },\n    'basketball_france_lnb': { sport: 'Basketball', country: 'France', league: 'LNB Pro A' },\n    // American Football\n    'americanfootball_nfl': { sport: 'American Football', country: 'USA', league: 'NFL' },\n    // Baseball\n    'baseball_mlb': { sport: 'Baseball', country: 'USA', league: 'MLB' },\n    // Ice Hockey\n    'icehockey_nhl': { sport: 'Ice Hockey', country: 'USA', league: 'NHL' },\n    'icehockey_sweden_shl': { sport: 'Ice Hockey', country: 'Sweden', league: 'SHL' },\n    // Tennis\n    'tennis_atp_singles': { sport: 'Tennis', country: '', league: 'ATP' },\n    'tennis_wta_singles': { sport: 'Tennis', country: '', league: 'WTA' },\n    // ATP tournaments\n    'tennis_atp_aus_open_singles': { sport: 'Tennis', country: '', league: 'ATP Australian Open' },\n    'tennis_atp_canadian_open': { sport: 'Tennis', country: '', league: 'ATP Canadian Open' },\n    'tennis_atp_china_open': { sport: 'Tennis', country: '', league: 'ATP China Open' },\n    'tennis_atp_cincinnati_open': { sport: 'Tennis', country: '', league: 'ATP Cincinnati Open' },\n    'tennis_atp_dubai': { sport: 'Tennis', country: '', league: 'ATP Dubai Championships' },\n    'tennis_atp_french_open': { sport: 'Tennis', country: '', league: 'ATP French Open' },\n    'tennis_atp_indian_wells': { sport: 'Tennis', country: '', league: 'ATP Indian Wells' },\n    'tennis_atp_italian_open': { sport: 'Tennis', country: '', league: 'ATP Italian Open' },\n    'tennis_atp_madrid_open': { sport: 'Tennis', country: '', league: 'ATP Madrid Open' },\n    'tennis_atp_miami_open': { sport: 'Tennis', country: '', league: 'ATP Miami Open' },\n    'tennis_atp_monte_carlo_masters': { sport: 'Tennis', country: '', league: 'ATP Monte-Carlo Masters' },\n    'tennis_atp_paris_masters': { sport: 'Tennis', country: '', league: 'ATP Paris Masters' },\n    'tennis_atp_qatar_open': { sport: 'Tennis', country: '', league: 'ATP Qatar Open' },\n    'tennis_atp_shanghai_masters': { sport: 'Tennis', country: '', league: 'ATP Shanghai Masters' },\n    'tennis_atp_us_open': { sport: 'Tennis', country: '', league: 'ATP US Open' },\n    'tennis_atp_wimbledon': { sport: 'Tennis', country: '', league: 'ATP Wimbledon' },\n    // WTA tournaments\n    'tennis_wta_aus_open_singles': { sport: 'Tennis', country: '', league: 'WTA Australian Open' },\n    'tennis_wta_canadian_open': { sport: 'Tennis', country: '', league: 'WTA Canadian Open' },\n    'tennis_wta_china_open': { sport: 'Tennis', country: '', league: 'WTA China Open' },\n    'tennis_wta_cincinnati_open': { sport: 'Tennis', country: '', league: 'WTA Cincinnati Open' },\n    'tennis_wta_dubai': { sport: 'Tennis', country: '', league: 'WTA Dubai Championships' },\n    'tennis_wta_french_open': { sport: 'Tennis', country: '', league: 'WTA French Open' },\n    'tennis_wta_indian_wells': { sport: 'Tennis', country: '', league: 'WTA Indian Wells' },\n    'tennis_wta_italian_open': { sport: 'Tennis', country: '', league: 'WTA Italian Open' },\n    'tennis_wta_madrid_open': { sport: 'Tennis', country: '', league: 'WTA Madrid Open' },\n    'tennis_wta_miami_open': { sport: 'Tennis', country: '', league: 'WTA Miami Open' },\n    'tennis_wta_qatar_open': { sport: 'Tennis', country: '', league: 'WTA Qatar Open' },\n    'tennis_wta_us_open': { sport: 'Tennis', country: '', league: 'WTA US Open' },\n    'tennis_wta_wimbledon': { sport: 'Tennis', country: '', league: 'WTA Wimbledon' },\n    'tennis_wta_wuhan_open': { sport: 'Tennis', country: '', league: 'WTA Wuhan Open' },\n  };\n  // Map common sport tokens and names to normalized display names\n  const SPORT_DISPLAY_MAP = {\n    'soccer': 'Soccer',\n    'football': 'American Football',\n    'americanfootball': 'American Football',\n    'basketball': 'Basketball',\n    'baseball': 'Baseball',\n    'icehockey': 'Ice Hockey',\n    'hockey': 'Hockey',\n    'cricket': 'Cricket',\n    'boxing': 'Boxing',\n    'mma': 'MMA',\n    'volleyball': 'Volleyball',\n    'rugby': 'Rugby',\n    'rugbyleague': 'Rugby League',\n    'aussierules': 'Aussie Rules',\n    'handball': 'Handball',\n    'tabletennis': 'Table Tennis'\n  };\n\n  // Prefer canonical mapping when available\n  const normalizedKey = String(sportKeyOrName || '').toLowerCase();\n  if (CANONICAL_LEAGUE_MAP[normalizedKey]) {\n    const c = CANONICAL_LEAGUE_MAP[normalizedKey];\n    const parts = [c.sport, c.country, c.league].filter(Boolean);\n    return parts.join('.');\n  }\n\n  const { sport, countryFromKey, leagueFromKey } = parseSportKey(sportKeyOrName);\n\n  // Sport: prefer parsed sport from key, else raw name, else fallback title\n  const sportRaw = sport || sportKeyOrName || fallbackSportTitle || '';\n  const normalizedSportKey = String(sportRaw).toLowerCase().replace(/\\s+/g, '');\n  const mappedDisplay = SPORT_DISPLAY_MAP[normalizedSportKey];\n  const sportDisplay = mappedDisplay || titleCase(sportRaw);\n\n  // Country: explicit country wins; else derive from sport_key; else empty\n  const countryRaw = country || countryFromKey || '';\n  let countryDisplay = titleCase(countryRaw);\n\n  // League: explicit league wins; else derive from sport_key remainder; else fallback sport_title\n  const leagueRaw = leagueName || leagueFromKey || fallbackSportTitle || '';\n  let leagueDisplay = titleCase(leagueRaw);\n\n  // Avoid duplicating country if league already contains it (e.g., \"England Premier League\")\n  if (countryDisplay) {\n    const lcLeague = leagueDisplay.toLowerCase();\n    const lcCountry = countryDisplay.toLowerCase();\n    if (lcLeague.includes(lcCountry)) {\n      countryDisplay = '';\n    }\n  }\n\n  // Remove redundant segments like Sport.Country where Country == Sport, or Sport.League where League == Sport\n  if (sportDisplay && countryDisplay && sportDisplay.toLowerCase() === countryDisplay.toLowerCase()) {\n    countryDisplay = '';\n  }\n  if (sportDisplay && leagueDisplay && sportDisplay.toLowerCase() === leagueDisplay.toLowerCase()) {\n    leagueDisplay = '';\n  }\n\n  // Final de-duplication to handle any remaining case-insensitive duplicates\n  const rawParts = [sportDisplay, countryDisplay, leagueDisplay];\n  const parts = [];\n  for (const p of rawParts) {\n    const norm = String(p || '').trim();\n    if (!norm) continue;\n    if (!parts.some(x => x.toLowerCase() === norm.toLowerCase())) {\n      parts.push(norm);\n    }\n  }\n  return parts.join('.');\n}\n\nexport default computeFullLeagueTitle;","import React, { useState, useMemo, useCallback, memo } from 'react';\nimport VideoPlayerScheduled from './VideoPlayerScheduled';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport LockedOdds from './LockedOdds';\nimport { assessOddsRisk } from '../utils/riskManagement';\nimport { computeFullLeagueTitle } from '../utils/leagueTitle';\n\nconst MatchCard = memo(({ match, sport, league, showLeagueHeader = true }) => {\n    if (!match) return null;\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [isFavorited, setIsFavorited] = useState(false);\n\n    const [showVideoSection, setShowVideoSection] = useState(false);\n\n    // Memoized calculations for better performance\n    const isLiveMatch = useMemo(() => \n        match.status === 'live' || match.isLive, \n        [match.status, match.isLive]\n    );\n    \n    // Memoized video display logic\n    const canShowVideo = useMemo(() => {\n        if (!match.videoUrl) {\n            return false;\n        }\n        \n        const now = new Date();\n        const startTime = new Date(match.startTime);\n        \n        switch (match.videoDisplayControl) {\n            case 'scheduled': {\n                return now >= startTime;\n            }\n            case 'manual': {\n                return true; // Admin controls this\n            }\n            case 'live_only': {\n                return match.status === 'live';\n            }\n            default: {\n                return now >= startTime;\n            }\n        }\n    }, [match.videoUrl, match.startTime, match.videoDisplayControl, match.status]);\n    \n    // Get live match time display\n    const getLiveTimeDisplay = () => {\n        if (!isLiveMatch) return null;\n        \n        // If match has liveTime property, use it\n        if (match.liveTime) {\n            return (\n                <div className=\"live-time-display\">\n                    <span className=\"time-icon\"></span>\n                    <span>{match.liveTime}</span>\n                </div>\n            );\n        }\n        \n        // If match has startTime, calculate live time\n        if (match.startTime) {\n            const startTime = new Date(match.startTime);\n            const now = new Date();\n            const diffMs = now - startTime;\n            const diffMins = Math.floor(diffMs / 60000);\n            \n            if (diffMins > 0) {\n                return (\n                    <div className=\"live-time-display\">\n                        <span className=\"time-icon\"></span>\n                        <span>LIVE {diffMins}'</span>\n                    </div>\n                );\n            }\n        }\n        \n        return (\n            <div className=\"live-time-display\">\n                <span className=\"time-icon\"></span>\n                <span>LIVE</span>\n            </div>\n        );\n    };\n\n    // Get live score display\n    const getLiveScoreDisplay = () => {\n        if (!isLiveMatch) return null;\n        \n        if (match.score) {\n            return (\n                <div className=\"live-score\">\n                    {match.score}\n                </div>\n            );\n        }\n        \n        if (match.homeScore !== undefined && match.awayScore !== undefined) {\n            return (\n                <div className=\"live-score\">\n                    {match.homeScore}-{match.awayScore}\n                </div>\n            );\n        }\n        \n        return null;\n    };\n\n    const addToBetslip = useCallback((betType, odds, matchInfo) => {\n        // Prevent adding bets for matches that have already started\n        const hasStart = !!matchInfo?.startTime;\n        const startDate = hasStart ? new Date(matchInfo.startTime) : null;\n        if (hasStart && startDate <= new Date()) {\n            console.warn('Cannot add started match to betslip:', matchInfo?.homeTeam, 'vs', matchInfo?.awayTeam);\n            return;\n        }\n\n        const bet = {\n            matchId: matchInfo.id || matchInfo._id, // Use id instead of _id for better compatibility\n            match: `${matchInfo.homeTeam} vs ${matchInfo.awayTeam}`,\n            homeTeam: matchInfo.homeTeam,\n            awayTeam: matchInfo.awayTeam,\n            league: matchInfo.league || league,\n            startTime: matchInfo.startTime,\n            market: 'winner',\n            marketDisplay: 'Winner',\n            selection: betType,\n            type: betType,\n            odds: odds,\n            stake: 0,\n            sport: sport\n        };\n        dispatch({ type: 'activeBets/addBet', payload: bet });\n    }, [dispatch, league, sport]);\n\n    const getBestOdds = useCallback((oddsType) => {\n        if (!match.odds) return null;\n        \n        // Handle Map-based odds structure (new structure)\n        if (match.odds instanceof Map || (match.odds && typeof match.odds.get === 'function')) {\n            return match.odds.get ? match.odds.get(oddsType) : match.odds[oddsType];\n        }\n        \n        // Handle nested odds structure (from matchesSeed.js)\n        if (match.odds.default && match.odds.default.odds) {\n            const odds = match.odds.default.odds[oddsType];\n            return odds && typeof odds === 'number' && odds > 0 ? odds : null;\n        }\n        \n        // Handle flat odds structure (from transformed API data)\n        const odds = match.odds[oddsType];\n        return odds && typeof odds === 'number' && odds > 0 ? odds : null;\n    }, [match.odds]);\n\n    // Memoized basic odds types calculation\n    const basicOddsTypes = useMemo(() => {\n        if (!match.odds) return [];\n        \n        const basicTypes = ['1', 'X', '2'];\n        const availableBasicTypes = [];\n        \n        // Handle Map-based odds structure (new structure)\n        if (match.odds instanceof Map || (match.odds && typeof match.odds.get === 'function')) {\n            basicTypes.forEach(type => {\n                const odds = match.odds.get ? match.odds.get(type) : match.odds[type];\n                if (odds && typeof odds === 'number' && odds > 0) {\n                    availableBasicTypes.push(type);\n                }\n            });\n        }\n        // Handle nested odds structure (from matchesSeed.js)\n        else if (match.odds.default && match.odds.default.odds) {\n            basicTypes.forEach(type => {\n                const odds = match.odds.default.odds[type];\n                if (odds && typeof odds === 'number' && odds > 0) {\n                    availableBasicTypes.push(type);\n                }\n            });\n        } else {\n            // Handle flat odds structure (from transformed API data)\n            basicTypes.forEach(type => {\n                const odds = match.odds[type];\n                if (odds && typeof odds === 'number' && odds > 0) {\n                    availableBasicTypes.push(type);\n                }\n            });\n        }\n        \n        // Return maximum of 3 basic odds types\n        return availableBasicTypes.slice(0, 3);\n    }, [match.odds]);\n\n    // Get all available odds types for additional markets\n    const getAllAvailableOddsTypes = () => {\n        if (!match.odds) return [];\n        \n        // Handle Map-based odds structure (new structure)\n        if (match.odds instanceof Map || (match.odds && typeof match.odds.get === 'function')) {\n            const allTypes = [];\n            match.odds.forEach((value, key) => {\n                if (value && typeof value === 'number' && value > 0) {\n                    allTypes.push(key);\n                }\n            });\n            return allTypes;\n        }\n        // Handle nested odds structure (from matchesSeed.js)\n        else if (match.odds.default && match.odds.default.odds) {\n            const allTypes = Object.keys(match.odds.default.odds).filter(key => \n                match.odds.default.odds[key] && match.odds.default.odds[key] > 0\n            );\n            return allTypes;\n        } else {\n            // Handle flat odds structure (from transformed API data)\n            const allTypes = Object.keys(match.odds).filter(key => \n                match.odds[key] && match.odds[key] > 0\n            );\n            return allTypes;\n        }\n    };\n\n    // Check if we have any valid odds to display\n    const hasValidOdds = () => {\n        if (!match.odds) return false;\n        \n        // Handle Map-based odds structure\n        if (match.odds instanceof Map || (match.odds && typeof match.odds.get === 'function')) {\n            let hasValid = false;\n            match.odds.forEach((value) => {\n                if (value && typeof value === 'number' && value > 0) {\n                    hasValid = true;\n                }\n            });\n            return hasValid;\n        }\n        \n        return Object.values(match.odds).some(odds => odds && odds > 0);\n    };\n\n    // If no valid odds, don't render the match card\n    if (!hasValidOdds()) {\n        return null;\n    }\n\n    const toggleFavorite = (e) => {\n        e.stopPropagation();\n        setIsFavorited(!isFavorited);\n    };\n\n    const handleMatchClick = () => {\n        // Preserve Home data before navigating away\n        try {\n            const homeMatches = sessionStorage.getItem('home_matches_data');\n            const homePopular = sessionStorage.getItem('home_popular_data');\n            const homeFiltered = sessionStorage.getItem('home_filtered_data');\n            \n            if (homeMatches || homePopular || homeFiltered) {\n                console.log('[MATCHCARD] Home data already preserved in session storage');\n            }\n        } catch (e) {\n            console.log('[MATCHCARD] Session storage not available');\n        }\n        \n        const matchId = match._id || match.id;\n        if (matchId) {\n            navigate(`/match/${matchId}`);\n        } else {\n            console.error('Invalid match ID format');\n        }\n    };\n\n    // Removed handler for additional markets navigation as the button was removed\n\n    const handleTeamsClick = (e) => {\n        e.stopPropagation();\n        \n        // Preserve Home data before navigating away\n        try {\n            const homeMatches = sessionStorage.getItem('home_matches_data');\n            const homePopular = sessionStorage.getItem('home_popular_data');\n            const homeFiltered = sessionStorage.getItem('home_filtered_data');\n            \n            if (homeMatches || homePopular || homeFiltered) {\n                console.log('[MATCHCARD] Home data already preserved in session storage');\n            }\n        } catch (e) {\n            console.log('[MATCHCARD] Session storage not available');\n        }\n        \n        const matchId = match._id || match.id;\n        if (matchId) {\n            navigate(`/match/${matchId}/markets`);\n        } else {\n            console.error('Invalid match ID format');\n        }\n    };\n\n    // Compute league title using unified backend-like logic (Sport.Country.League)\n    const sportName = sport || match.sport || '';\n    const sportKeyOrName = match.sport_key || sportName;\n    const country = match.country || match.subcategory || '';\n    const leagueName = league || match.league || '';\n    const computedLeagueTitle = computeFullLeagueTitle({\n        sportKeyOrName,\n        country,\n        leagueName,\n        fallbackSportTitle: match.sport_title || match.sport || ''\n    });\n\n    const fullLeagueTitle = match.fullLeagueTitle || computedLeagueTitle || leagueName;\n\n    // Removed unused formatMatchTime helper\n\n    const formatMatchDateTime = (startTime) => {\n        const date = new Date(startTime);\n        const timeString = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n        const dateString = date.toLocaleDateString([], { day: '2-digit', month: '2-digit' });\n        return `${dateString} ${timeString}`;\n    };\n\n    // Get all odds types for additional markets count\n    const allOddsTypes = getAllAvailableOddsTypes();\n    const additionalMarketsTotal = Math.max(0, allOddsTypes.length - basicOddsTypes.length);\n    \n    // Debug logging for custom matches\n    console.log('[DEBUG] MatchCard odds analysis for match:', match._id, {\n        homeTeam: match.homeTeam,\n        awayTeam: match.awayTeam,\n        oddsType: typeof match.odds,\n        isMap: match.odds instanceof Map,\n        basicOddsTypes,\n        allOddsTypes,\n        additionalMarketsTotal,\n        basicCount: basicOddsTypes.length,\n        totalCount: allOddsTypes.length\n    });\n    \n    // If this is a custom match with Map odds, log the details\n    if (match.odds instanceof Map) {\n        console.log('[DEBUG] Custom match Map odds details:');\n        match.odds.forEach((value, key) => {\n            console.log(`  ${key}: ${value} (${typeof value})`);\n        });\n    }\n    \n    return (\n        <>\n            {showLeagueHeader && (\n                <div className=\"league-header\">\n                    <div \n                        className=\"league-title\" \n                        data-sport={sport}\n                        style={{ maxWidth: 'calc(100% - 200px)', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n                    >\n                        <span className=\"arrow\">▲</span>\n                        {fullLeagueTitle}\n                    </div>\n                    {canShowVideo && (\n                      <button\n                        className=\"odds-header\"\n                        title={showVideoSection ? 'Hide video' : 'Show live video'}\n                        onClick={(e) => { e.stopPropagation(); setShowVideoSection(v => !v); }}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        📺\n                      </button>\n                    )}\n                    {/* Show only basic odds headers */}\n                    {basicOddsTypes.map(oddsType => (\n                        <div key={oddsType} className=\"odds-header\">{oddsType}</div>\n                    ))}\n                    <div className=\"odds-header\"></div>\n                </div>\n            )}\n            <div className={`match-container ${isLiveMatch ? 'live-match' : ''}`} onClick={handleMatchClick}>\n                {/* Live status badge */}\n                {isLiveMatch && (\n                    <div className=\"live-status-badge\">LIVE</div>\n                )}\n                \n                <div className=\"match-row\">\n                    <div className=\"match-actions\">\n                        <button \n                            className={`favorite-btn ${isFavorited ? 'favorited' : ''}`}\n                            onClick={toggleFavorite}\n                            title={isFavorited ? 'Remove from favorites' : 'Add to favorites'}\n                        >\n                            {isFavorited ? '★' : '☆'}\n                        </button>\n                        {canShowVideo && (\n                          <button\n                            className=\"favorite-btn\"\n                            title={showVideoSection ? 'Hide video' : 'Show video'}\n                            onClick={(e) => { e.stopPropagation(); setShowVideoSection(v => !v); }}\n                          >\n                            📺\n                          </button>\n                        )}\n                    </div>\n                    <div className=\"match-teams\" onClick={handleTeamsClick}>\n                        <div className=\"match-date-time\">\n                            {isLiveMatch ? getLiveTimeDisplay() : <span>{formatMatchDateTime(match.startTime)}</span>}\n                        </div>\n                        <div className=\"team\">\n                            <img className=\"team-flag\" src={match.homeTeamFlag} alt=\"\" />\n                            {match.homeTeam}\n                        </div>\n                        <div className=\"team\">\n                            <img className=\"team-flag\" src={match.awayTeamFlag} alt=\"\" />\n                            {match.awayTeam}\n                        </div>\n                        {/* Show market type and bookmaker for non-live matches only */}\n                        {!isLiveMatch && (match.market || match.bookmaker) && (\n                          <div className=\"match-market-info\" style={{ fontSize: '0.9em', color: '#666', marginTop: 2 }}>\n                            {match.market && <span>Market: {match.market}</span>}\n                            {match.market && match.bookmaker && <span> | </span>}\n                            {match.bookmaker && <span>Bookmaker: {match.bookmaker}</span>}\n                          </div>\n                        )}\n                    </div>\n                    \n                    {/* Score and Odds on the same line */}\n                    <div className=\"score-odds-line\">\n                        {/* Live Score */}\n                        {isLiveMatch && (\n                            <div className=\"live-score-container\">\n                                {getLiveScoreDisplay()}\n                            </div>\n                        )}\n                        \n                        {/* Odds Headers */}\n                        <div className=\"odds-headers-container\">\n                            {basicOddsTypes.map(oddsType => (\n                                <div key={oddsType} className=\"odds-header\">\n                                    {oddsType}\n                                </div>\n                            ))}\n                        </div>\n                        \n                        {/* Odds Buttons */}\n                        <div className=\"odds-buttons-container\">\n                            {basicOddsTypes.map(oddsType => {\n                                const odds = getBestOdds(oddsType);\n                                const riskAssessment = assessOddsRisk(match, odds, oddsType);\n                                \n                                // If odds should be disabled, show locked odds component\n                                if (riskAssessment.shouldDisable) {\n                                    return (\n                                        <LockedOdds\n                                            key={oddsType}\n                                            riskAssessment={riskAssessment}\n                                            className=\"odds-button\"\n                                        />\n                                    );\n                                }\n                                \n                                // Otherwise show normal odds button with only odds value\n                                return (\n                                    <button \n                                        key={oddsType}\n                                        className={`odds-button ${isLiveMatch ? 'live-highlight' : ''}`}\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            addToBetslip(oddsType, odds, match);\n                                        }}\n                                    >\n                                        <div className=\"odds-value\">\n                                            {typeof odds === 'number' ? odds.toFixed(2) : '-'}\n                                        </div>\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </div>\n                    {/* Removed additional markets button and container */}\n                </div>\n                {canShowVideo && showVideoSection && (\n                  <div style={{ marginTop: 8, border: '1px solid #2d2d2d', borderRadius: 8, padding: 8 }} onClick={(e) => e.stopPropagation()}>\n                    {/* Video on upper side of the expanded section */}\n                    <VideoPlayerScheduled\n                      src={match.videoUrl}\n                      poster={match.videoPosterUrl || undefined}\n                      startTime={match.startTime}\n                      videoDisplayControl={match.videoDisplayControl}\n                    />\n                    {/* Additional match section controls - removed markets count and button */}\n                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', marginTop: 8 }}>\n                      <button\n                        className=\"favorite-btn\"\n                        title=\"Close\"\n                        onClick={(e) => { e.stopPropagation(); setShowVideoSection(false); }}\n                      >\n                        ✕\n                      </button>\n                    </div>\n                  </div>\n                )}\n            </div>\n        </>\n    );\n});\n\nexport default MatchCard;\n"],"names":["DISABLE_ODDS_LOCK","process","REACT_APP_DISABLE_ODDS_LOCK","RISK_THRESHOLDS","assessOddsRisk","match","odds","oddsType","shouldDisable","reason","riskLevel","riskFactors","isOddsTooLow","push","isObviousOutcome","isLive","status","undefined","homeScore","awayScore","Math","abs","startTime","Date","isLiveMatchObvious","includes","length","join","_ref","src","poster","controls","className","videoDisplayControl","videoRef","useRef","now","setNow","useState","startTs","useMemo","t","parse","Number","isFinite","shouldDisplayVideo","isReadyToPlay","useEffect","id","setInterval","clearInterval","current","async","play","e","tryPlay","remainingMs","max","remainingSec","floor","hh","String","padStart","mm","ss","_jsx","concat","style","width","maxWidth","margin","children","ref","playsInline","height","borderRadius","background","_jsxs","display","flexDirection","alignItems","justifyContent","aspectRatio","backgroundColor","color","position","alt","inset","objectFit","opacity","zIndex","textAlign","padding","fontSize","marginBottom","fontWeight","letterSpacing","marginTop","riskAssessment","title","titleCase","arguments","replace","split","filter","Boolean","map","w","charAt","toUpperCase","slice","computeFullLeagueTitle","sportKeyOrName","country","leagueName","fallbackSportTitle","CANONICAL_LEAGUE_MAP","sport","league","normalizedKey","toLowerCase","c","countryFromKey","leagueFromKey","key","trim","tokens","parseSportKey","sportRaw","sportDisplay","countryDisplay","leagueDisplay","lcLeague","lcCountry","rawParts","parts","p","norm","some","x","memo","showLeagueHeader","dispatch","useDispatch","navigate","useNavigate","isFavorited","setIsFavorited","showVideoSection","setShowVideoSection","isLiveMatch","canShowVideo","videoUrl","addToBetslip","useCallback","betType","matchInfo","hasStart","startDate","console","warn","homeTeam","awayTeam","bet","matchId","_id","market","marketDisplay","selection","type","stake","payload","getBestOdds","Map","get","default","basicOddsTypes","basicTypes","availableBasicTypes","forEach","hasValidOdds","hasValid","value","Object","values","sportName","sport_key","subcategory","computedLeagueTitle","sport_title","fullLeagueTitle","allOddsTypes","getAllAvailableOddsTypes","allTypes","keys","additionalMarketsTotal","log","isMap","basicCount","totalCount","_Fragment","overflow","textOverflow","whiteSpace","onClick","stopPropagation","v","cursor","handleMatchClick","homeMatches","sessionStorage","getItem","homePopular","homeFiltered","error","getLiveTimeDisplay","liveTime","diffMs","diffMins","date","timeString","toLocaleTimeString","hour","minute","dateString","toLocaleDateString","day","month","formatMatchDateTime","homeTeamFlag","awayTeamFlag","bookmaker","score","LockedOdds","toFixed","border","VideoPlayerScheduled","videoPosterUrl"],"sourceRoot":""}