{"version":3,"file":"static/js/622.8eedf3cc.chunk.js","mappings":"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","sources":["pages/LiveBetting.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MatchCard from '../components/MatchCard';\nimport apiService from '../services/api';\nimport io from 'socket.io-client';\nimport { useSelector } from 'react-redux';\n\nconst LiveBetting = () => {\n  const [liveMatches, setLiveMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const { user } = useSelector(state => state.auth);\n\n  // Fetch live matches from API\n  const fetchLiveMatches = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log('[LIVE BETTING] Fetching live matches from API...');\n      \n      const response = await apiService.getLiveMatches();\n      \n      if (response.data.success) {\n        const matches = response.data.matches || [];\n        console.log(`[LIVE BETTING] Received ${matches.length} live matches from API`);\n        \n        if (matches.length === 0) {\n          console.log('[LIVE BETTING] No live matches found');\n          setLiveMatches([]);\n        } else {\n          setLiveMatches(matches);\n          setLastUpdate(new Date().toISOString());\n        }\n      } else {\n        throw new Error(response.data.message || 'Failed to fetch live matches');\n      }\n      \n    } catch (err) {\n      console.error('[LIVE BETTING] Error fetching live matches:', err);\n      setError('Failed to load live matches. Please try again later.');\n      setLiveMatches([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Setup WebSocket connection and subscriptions\n  const setupWebSocket = () => {\n    const WS_URL = process.env.REACT_APP_WS_URL || null;\n    if (!WS_URL) {\n      console.warn('[LIVE BETTING] WS_URL not set; skipping Socket.IO');\n      return;\n    }\n\n    try {\n      const socket = io(WS_URL, { withCredentials: true });\n      socket.on('connect', () => {\n        console.log('[LIVE BETTING] Connected to Socket.IO');\n        socket.emit('subscribe:live');\n      });\n\n      socket.on('matchUpdate', (updatedMatch) => {\n        setLiveMatches(prev => {\n          const idx = prev.findIndex(m => (m._id || m.id) === (updatedMatch._id || updatedMatch.id));\n          if (idx === -1) return prev;\n          const next = [...prev];\n          next[idx] = { ...next[idx], ...updatedMatch };\n          return next;\n        });\n        setLastUpdate(new Date().toISOString());\n      });\n\n      socket.on('oddsUpdate', (payload) => {\n        const matchId = payload?.matchId || payload?._id || payload?.id;\n        const odds = payload?.delta || payload?.odds || payload;\n        setLiveMatches(prev => prev.map(m => {\n          const id = m._id || m.id;\n          if (id !== matchId) return m;\n          return { ...m, odds: { ...(m.odds || {}), ...(odds || {}) } };\n        }));\n      });\n\n      socket.on('newMatch', (newMatch) => {\n        setLiveMatches(prev => {\n          const id = newMatch._id || newMatch.id;\n          if (!id) return prev;\n          const exists = prev.some(m => (m._id || m.id) === id);\n          return exists ? prev : [newMatch, ...prev];\n        });\n      });\n\n      socket.on('matchDeleted', (matchId) => {\n        setLiveMatches(prev => prev.filter(m => (m._id || m.id) !== matchId));\n      });\n\n      socket.on('disconnect', () => {\n        console.log('[LIVE BETTING] Disconnected from Socket.IO');\n      });\n\n      // Cleanup\n      return () => socket.disconnect();\n    } catch (error) {\n      console.error('[LIVE BETTING] Error setting up Socket.IO:', error);\n    }\n  };\n\n  // Group matches by league\n  const groupMatchesByLeague = (matches) => {\n    const grouped = {};\n    matches.forEach(match => {\n      const leagueKey = match.league;\n      if (!grouped[leagueKey]) {\n        grouped[leagueKey] = [];\n      }\n      grouped[leagueKey].push(match);\n    });\n    return grouped;\n  };\n\n  // Get common odds types across all matches in a league\n  const getCommonOddsTypes = (matches) => {\n    if (matches.length === 0) return [];\n    \n    const allOddsTypes = new Set();\n    matches.forEach(match => {\n      if (match.odds) {\n        Object.keys(match.odds).forEach(key => {\n          if (match.odds[key] && match.odds[key] > 0) {\n            allOddsTypes.add(key);\n          }\n        });\n      }\n    });\n    \n    // Return most common odds types (max 3)\n    const oddsCount = {};\n    allOddsTypes.forEach(type => {\n      oddsCount[type] = matches.filter(match => \n        match.odds && match.odds[type] && match.odds[type] > 0\n      ).length;\n    });\n    \n    return Object.entries(oddsCount)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 3)\n      .map(([type]) => type);\n  };\n\n\n\n  useEffect(() => {\n    // Initial fetch\n    fetchLiveMatches();\n    \n    // Setup WebSocket\n    setupWebSocket();\n    \n    // Set up polling for live matches (every 30 seconds as fallback)\n    const intervalId = setInterval(() => {\n      console.log('[LIVE BETTING] Polling for updated live matches...');\n      fetchLiveMatches();\n    }, 30000);\n    \n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [user]);\n\n  if (loading) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">Live Betting</h1>\n          <p className=\"sport-subtitle\">Bet on live matches with real-time odds</p>\n        </div>\n        \n        <div className=\"matches-section\">\n          <div className=\"section-header\">\n            <h2 className=\"section-title\">LIVE MATCHES</h2>\n            <div className=\"live-indicator\">\n              <span className=\"live-dot\"></span>\n              <span>Loading...</span>\n            </div>\n          </div>\n          \n          <div className=\"loading-container\">\n            <div className=\"loading-spinner\"></div>\n            <p>Loading live matches...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const groupedMatches = groupMatchesByLeague(liveMatches);\n\n  return (\n    <div className=\"sport-page\">\n      <div className=\"sport-header\">\n        <h1 className=\"sport-title\">Live Betting</h1>\n        <p className=\"sport-subtitle\">Bet on live matches with real-time odds</p>\n      </div>\n\n      <div className=\"matches-section\">\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">LIVE MATCHES</h2>\n          <div className=\"live-indicator\">\n            <span className=\"live-dot\"></span>\n            <span>{liveMatches.length} Live Now</span>\n            {lastUpdate && (\n              <span className=\"last-update\">\n                Last updated: {new Date(lastUpdate).toLocaleTimeString()}\n              </span>\n            )}\n          </div>\n        </div>\n\n        {error && (\n          <div className=\"error-message\" style={{ \n            background: 'rgba(255, 68, 68, 0.1)', \n            border: '1px solid rgba(255, 68, 68, 0.3)', \n            borderRadius: '8px', \n            padding: '12px', \n            margin: '16px 0',\n            color: '#ff6666'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {liveMatches.length > 0 ? (\n          <div className=\"live-matches-container\">\n            {Object.entries(groupedMatches).map(([league, matches]) => {\n              const commonOddsTypes = getCommonOddsTypes(matches);\n              return (\n                <div key={league} className=\"league-group\">\n                  {/* League Header with Odds Headers */}\n                  <div className=\"league-header live-league-header\">\n                    <div className=\"league-title\">\n                      <span className=\"arrow\">▲</span>\n                      {(() => {\n                        const first = matches && matches[0] ? matches[0] : {};\n                        const sport = first.sport || first.sport_title;\n                        const country = first.subcategory || first.country;\n                        const norm = (s) => (s || '').toString().trim().replace(/[.·]+$/,'');\n                        const parts = [norm(sport), norm(country), norm(league)].filter(Boolean);\n                        // If league already contains country, skip country to avoid duplication\n                        const finalParts = parts.filter((p, idx) => {\n                          if (idx === 1 && parts[2] && parts[2].toLowerCase().includes(p.toLowerCase())) return false;\n                          return true;\n                        });\n                        const title = Array.from(new Set(finalParts.map(p => p.toLowerCase())))\n                          .map(lower => finalParts.find(p => p.toLowerCase() === lower))\n                          .join(' · ');\n                        return title;\n                      })()}\n                    </div>\n                    {/* Odds Headers - Aligned with respective odds */}\n                    {commonOddsTypes.map(oddsType => (\n                      <div key={oddsType} className=\"odds-header live-odds-header\">\n                        {oddsType}\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {/* Matches in this league */}\n                  <div className=\"league-matches\">\n                    {matches.map((match) => (\n                      <MatchCard\n                        key={match.id}\n                        match={match}\n                        sport={match.sport}\n                        league={match.league}\n                        subcategory={match.subcategory}\n                        showLeagueHeader={false} // Don't show individual league headers\n                        showOddsHeaders={false} // Don't show individual odds headers\n                      />\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"no-live-matches\">\n            <div className=\"no-live-icon\">🔴</div>\n            <h3>No Live Matches</h3>\n            <p>There are currently no live matches. Check back later for live betting opportunities.</p>\n            <div className=\"live-refresh-info\">\n              <p>Live matches are automatically refreshed every 30 seconds.</p>\n              <button \n                className=\"refresh-btn\"\n                onClick={fetchLiveMatches}\n                style={{\n                  background: '#ff4444',\n                  color: 'white',\n                  border: 'none',\n                  padding: '8px 16px',\n                  borderRadius: '6px',\n                  cursor: 'pointer',\n                  marginTop: '12px'\n                }}\n              >\n                Refresh Now\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LiveBetting;"],"names":["LiveBetting","liveMatches","setLiveMatches","useState","loading","setLoading","error","setError","lastUpdate","setLastUpdate","user","useSelector","state","auth","fetchLiveMatches","async","console","log","response","apiService","getLiveMatches","data","success","Error","message","matches","concat","length","Date","toISOString","err","useEffect","setupWebSocket","WS_URL","process","REACT_APP_WS_URL","socket","io","withCredentials","on","emit","updatedMatch","prev","idx","findIndex","m","_id","id","next","_objectSpread","payload","matchId","odds","delta","map","newMatch","some","filter","disconnect","warn","intervalId","setInterval","clearInterval","_jsxs","className","children","_jsx","groupedMatches","grouped","forEach","match","leagueKey","league","push","groupMatchesByLeague","toLocaleTimeString","style","background","border","borderRadius","padding","margin","color","Object","entries","_ref4","commonOddsTypes","allOddsTypes","Set","keys","key","add","oddsCount","type","sort","_ref","_ref2","a","b","slice","_ref3","getCommonOddsTypes","first","sport","sport_title","country","subcategory","norm","s","toString","trim","replace","parts","Boolean","finalParts","p","toLowerCase","includes","Array","from","lower","find","join","oddsType","MatchCard","showLeagueHeader","showOddsHeaders","onClick","cursor","marginTop"],"sourceRoot":""}