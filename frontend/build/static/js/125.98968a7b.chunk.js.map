{"version":3,"file":"static/js/125.98968a7b.chunk.js","mappings":"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","sources":["components/HeroSlider.js","components/PopularMatches.js","components/SportsStrip.js","services/oddsWebSocket.js","pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../services/api';\n\nconst HeroSlider = () => {\n  const [slides, setSlides] = useState([]);\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [error, setError] = useState(null);\n\n  // Preload cached slides for instant render\n  useEffect(() => {\n    try {\n      const raw = localStorage.getItem('cache:/admin/hero');\n      if (raw) {\n        const entry = JSON.parse(raw);\n        const cachedSlides = entry?.data || [];\n        if (Array.isArray(cachedSlides) && cachedSlides.length > 0) {\n          setSlides(cachedSlides);\n        }\n      }\n    } catch (_) {\n      // ignore cache errors\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchSlides = async () => {\n      try {\n        const response = await apiService.getHeroSlides();\n        setSlides(response.data);\n      } catch (err) {\n        setError('Failed to load hero slides');\n      }\n    };\n    fetchSlides();\n  }, []);\n\n  useEffect(() => {\n    if (slides.length === 0) return;\n    const timer = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % slides.length);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, [slides.length]);\n\n  const goToSlide = (index) => {\n    setCurrentSlide(index);\n  };\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % slides.length);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);\n  };\n\n  if (error) {\n    return <div className=\"hero-slider\"><div className=\"slider-container\"><p>{error}</p></div></div>;\n  }\n  if (slides.length === 0) {\n    return <div className=\"hero-slider\"><div className=\"slider-container\"><p>No hero slides available.</p></div></div>;\n  }\n\n  return (\n    <div className=\"hero-slider\">\n      <div className=\"slider-container\">\n        <div \n          className=\"slides-wrapper\"\n          style={{ transform: `translateX(-${currentSlide * 100}%)` }}\n        >\n          {slides.map((slide, index) => (\n            <div key={slide._id || slide.id || index} className=\"slide\">\n              <div className=\"slide-background\">\n                <img src={slide.image} alt={slide.caption1} />\n                <div className=\"slide-overlay\"></div>\n              </div>\n              <div className=\"slide-content\">\n                <h2 className=\"slide-title\">{slide.caption1}</h2>\n                <p className=\"slide-subtitle\">{slide.caption2}</p>\n                <a href={slide.buttonUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <button className=\"slide-cta\">{slide.buttonText}</button>\n                </a>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <button className=\"slider-btn prev-btn\" onClick={prevSlide}>\n          ‹\n        </button>\n        <button className=\"slider-btn next-btn\" onClick={nextSlide}>\n          ›\n        </button>\n\n        <div className=\"slider-dots\">\n          {slides.map((_, index) => (\n            <button\n              key={index}\n              className={`dot ${index === currentSlide ? 'active' : ''}`}\n              onClick={() => goToSlide(index)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HeroSlider;","import React, { useRef, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport LockedOdds from './LockedOdds';\r\nimport { assessOddsRisk } from '../utils/riskManagement';\r\nimport { computeFullLeagueTitle } from '../utils/leagueTitle';\r\n\r\nconst PopularMatches = ({ matches }) => {\r\n  const dispatch = useDispatch();\r\n  const scrollRef = useRef(null);\r\n  const [displayedMatches, setDisplayedMatches] = useState([]);\r\n\r\n  // Smooth transition when matches update\r\n  useEffect(() => {\r\n    if (matches && matches.length > 0) {\r\n      setDisplayedMatches(matches);\r\n    } else {\r\n      setDisplayedMatches([]);\r\n    }\r\n  }, [matches]);\r\n\r\n  const addToBetslip = (match, betType, odds) => {\r\n    // Prevent adding bets for matches that have already started\r\n    const hasStart = !!match?.startTime;\r\n    const startDate = hasStart ? new Date(match.startTime) : null;\r\n    if (hasStart && startDate <= new Date()) {\r\n      console.warn('Cannot add started match to betslip:', match?.homeTeam, 'vs', match?.awayTeam);\r\n      return;\r\n    }\r\n\r\n    const bet = {\r\n      matchId: match.id || match._id,\r\n      match: `${match.homeTeam} vs ${match.awayTeam}`,\r\n      homeTeam: match.homeTeam,\r\n      awayTeam: match.awayTeam,\r\n      league: match.league,\r\n      startTime: match.startTime,\r\n      type: betType,\r\n      odds: odds,\r\n      stake: 0,\r\n      sport: match.sport\r\n    };\r\n    dispatch({ type: 'activeBets/addBet', payload: bet });\r\n  };\r\n\r\n  const scrollLeft = () => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollBy({ left: -220, behavior: 'smooth' });\r\n    }\r\n  };\r\n\r\n  const scrollRight = () => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollBy({ left: 220, behavior: 'smooth' });\r\n    }\r\n  };\r\n\r\n  // Do not render skeletons; rely on cache for instant display\r\n\r\n  // Show empty state if no matches\r\n  if (!displayedMatches || displayedMatches.length === 0) {\r\n    return (\r\n      <div className=\"popular-matches-section\">\r\n        <div className=\"popular-matches-box\">\r\n          <div className=\"popular-matches-header\">\r\n            <h2 className=\"popular-matches-title\">Popular Matches</h2>\r\n          </div>\r\n          <div className=\"popular-matches-empty\">\r\n            <p>No popular matches available at the moment.</p>\r\n            <p>Check back later for trending matches!</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"popular-matches-section\">\r\n      <div className=\"popular-matches-box\">\r\n        <div className=\"popular-matches-header\">\r\n          <h2 className=\"popular-matches-title\">Popular Matches</h2>\r\n        </div>\r\n        <button className=\"slider-btn prev-btn popular-slider-btn\" onClick={scrollLeft} title=\"Scroll left\">&#8249;</button>\r\n        <button className=\"slider-btn next-btn popular-slider-btn\" onClick={scrollRight} title=\"Scroll right\">&#8250;</button>\r\n        <div className=\"popular-matches-scroll\" ref={scrollRef}>\r\n          {displayedMatches.map((match) => {\r\n            const sportName = match.sport || match.sport_title || '';\r\n            const sportKeyOrName = match.sport_key || sportName;\r\n            const country = match.country || match.subcategory || '';\r\n            const league = match.league || match.competition || match.tournament || '';\r\n            const fullLeagueTitle = match.fullLeagueTitle || computeFullLeagueTitle({\r\n              sportKeyOrName,\r\n              country,\r\n              leagueName: league,\r\n              fallbackSportTitle: match.sport_title || match.sport || ''\r\n            });\r\n            return (\r\n            <div key={match.id || match._id} className=\"popular-match-card\">\r\n              <div className=\"match-league\">{fullLeagueTitle}</div>\r\n              {/* Date + Time display placed directly under league title */}\r\n              <div className=\"match-time\">\r\n                {(() => {\r\n                  const dt = match.startTime ? new Date(match.startTime) : null;\r\n                  const dateStr = dt ? dt.toLocaleDateString() : '';\r\n                  const timeStr = dt ? dt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : (match.time || '');\r\n                  return (\r\n                    <span>{dateStr} {timeStr}</span>\r\n                  );\r\n                })()}\r\n              </div>\r\n              <div className=\"match-teams-container\">\r\n                <span className=\"team-name\">{match.homeTeam}</span>\r\n                <span className=\"vs\">vs</span>\r\n                <span className=\"team-name\">{match.awayTeam}</span>\r\n              </div>\r\n              <div className=\"match-odds\">\r\n                {['1', 'X', '2'].map((betType) => {\r\n                  const odds = match.odds[betType];\r\n                  \r\n                  if (odds === undefined || odds <= 0) {\r\n                    return null;\r\n                  }\r\n                  \r\n                  const riskAssessment = assessOddsRisk(match, odds, betType);\r\n                  \r\n                  // If odds should be disabled, show locked odds component\r\n                  if (riskAssessment.shouldDisable) {\r\n                    return (\r\n                      <LockedOdds\r\n                        key={betType}\r\n                        riskAssessment={riskAssessment}\r\n                        className=\"odds-button\"\r\n                      />\r\n                    );\r\n                  }\r\n                  \r\n                  // Otherwise show normal odds button\r\n                  return (\r\n                    <button\r\n                        key={betType}\r\n                        className=\"odds-button popular-odds-button\"\r\n                        onClick={() => addToBetslip(match, betType, odds)}\r\n                    >\r\n                        <div className=\"odds-header\">{betType}</div>\r\n                        <div className=\"odds-value\">\r\n                            {odds?.toFixed ? odds.toFixed(2) : odds}\r\n                        </div>\r\n                    </button>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>);\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopularMatches;","import React from 'react';\n\nconst sports = [\n  { key: 'Soccer', name: 'Soccer', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"42\" height=\"42\" aria-hidden=\"true\">\n      <circle cx=\"24\" cy=\"24\" r=\"22\" fill=\"#ffffff\" stroke=\"#222\" strokeWidth=\"2\" />\n      <polygon points=\"24,12 18,18 20,26 28,26 30,18\" fill=\"#3b3b3b\" />\n      <polygon points=\"12,24 18,18 14,12 8,14 6,20\" fill=\"#3b3b3b\" />\n      <polygon points=\"36,24 30,18 34,12 40,14 42,20\" fill=\"#3b3b3b\" />\n      <polygon points=\"20,36 18,28 10,28 12,34 16,36\" fill=\"#3b3b3b\" />\n      <polygon points=\"28,36 30,28 38,28 36,34 32,36\" fill=\"#3b3b3b\" />\n    </svg>\n  )},\n  { key: 'Hockey', name: 'Hockey', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <rect x=\"8\" y=\"30\" width=\"32\" height=\"6\" rx=\"3\" fill=\"#607d8b\" />\n      <rect x=\"26\" y=\"12\" width=\"4\" height=\"18\" fill=\"#8d6e63\" />\n      <rect x=\"16\" y=\"20\" width=\"4\" height=\"10\" fill=\"#8d6e63\" />\n    </svg>\n  )},\n  { key: 'Tennis', name: 'Tennis', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <circle cx=\"24\" cy=\"24\" r=\"18\" fill=\"#8bc34a\" />\n      <path d=\"M10 20c8 0 12 8 28 8\" stroke=\"#fff\" strokeWidth=\"3\" fill=\"none\" />\n      <path d=\"M14 28c8 0 12-8 24-8\" stroke=\"#fff\" strokeWidth=\"3\" fill=\"none\" />\n    </svg>\n  )},\n  { key: 'Basketball', name: 'Basketball', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <circle cx=\"24\" cy=\"24\" r=\"18\" fill=\"#f57c00\" />\n      <path d=\"M24 6v36\" stroke=\"#5d4037\" strokeWidth=\"3\" />\n      <path d=\"M6 24h36\" stroke=\"#5d4037\" strokeWidth=\"3\" />\n      <path d=\"M12 12c8 8 8 16 0 24\" stroke=\"#5d4037\" strokeWidth=\"3\" fill=\"none\" />\n      <path d=\"M36 12c-8 8-8 16 0 24\" stroke=\"#5d4037\" strokeWidth=\"3\" fill=\"none\" />\n    </svg>\n  )},\n  { key: 'Baseball', name: 'Baseball', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <circle cx=\"24\" cy=\"24\" r=\"18\" fill=\"#ffffff\" stroke=\"#bdbdbd\" strokeWidth=\"2\" />\n      <path d=\"M12 16c4 4 4 12 0 16\" stroke=\"#d32f2f\" strokeWidth=\"2\" fill=\"none\" />\n      <path d=\"M36 16c-4 4-4 12 0 16\" stroke=\"#d32f2f\" strokeWidth=\"2\" fill=\"none\" />\n    </svg>\n  )},\n  { key: 'American Football', name: 'Football (US)', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <ellipse cx=\"24\" cy=\"24\" rx=\"18\" ry=\"12\" fill=\"#6d4c41\" />\n      <path d=\"M14 24h20\" stroke=\"#fff\" strokeWidth=\"3\" />\n      <path d=\"M18 20v8M22 20v8M26 20v8M30 20v8\" stroke=\"#fff\" strokeWidth=\"2\" />\n    </svg>\n  )},\n  { key: 'Cricket', name: 'Cricket', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <circle cx=\"16\" cy=\"24\" r=\"8\" fill=\"#c62828\" />\n      <rect x=\"26\" y=\"12\" width=\"4\" height=\"20\" fill=\"#a1887f\" />\n      <rect x=\"32\" y=\"12\" width=\"4\" height=\"20\" fill=\"#a1887f\" />\n    </svg>\n  )},\n  { key: 'Rugby', name: 'Rugby', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <ellipse cx=\"24\" cy=\"24\" rx=\"18\" ry=\"12\" fill=\"#8e24aa\" />\n      <path d=\"M10 20c10 6 18 6 28 0\" stroke=\"#fff\" strokeWidth=\"2\" fill=\"none\" />\n    </svg>\n  )},\n  { key: 'MMA', name: 'MMA', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <rect x=\"12\" y=\"12\" width=\"24\" height=\"24\" rx=\"6\" fill=\"#3949ab\" />\n      <path d=\"M18 18h12v12H18z\" fill=\"#283593\" />\n    </svg>\n  )},\n  { key: 'Boxing', name: 'Boxing', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <circle cx=\"18\" cy=\"28\" r=\"8\" fill=\"#e53935\" />\n      <circle cx=\"30\" cy=\"20\" r=\"8\" fill=\"#e53935\" />\n    </svg>\n  )},\n  { key: 'Volleyball', name: 'Volleyball', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <circle cx=\"24\" cy=\"24\" r=\"18\" fill=\"#fff59d\" stroke=\"#fbc02d\" strokeWidth=\"2\" />\n      <path d=\"M12 12c12 0 18 6 24 12\" stroke=\"#fbc02d\" strokeWidth=\"2\" fill=\"none\" />\n      <path d=\"M10 26c10 0 16-6 26-6\" stroke=\"#fbc02d\" strokeWidth=\"2\" fill=\"none\" />\n    </svg>\n  )},\n  { key: 'Table tennis', name: 'Table Tennis', icon: (\n    <svg viewBox=\"0 0 48 48\" width=\"32\" height=\"32\" aria-hidden=\"true\">\n      <circle cx=\"18\" cy=\"26\" r=\"10\" fill=\"#7e57c2\" />\n      <rect x=\"26\" y=\"18\" width=\"10\" height=\"4\" fill=\"#6d4c41\" />\n      <circle cx=\"34\" cy=\"20\" r=\"3\" fill=\"#ff7043\" />\n    </svg>\n  )}\n];\n\nconst SportsStrip = ({ onSelectSport, activeSport }) => {\n  const handleActivate = (key) => {\n    if (typeof onSelectSport === 'function') onSelectSport(key);\n  };\n  return (\n    <div className=\"sports-strip\" aria-label=\"Browse sports\">\n      {sports.map((s) => (\n        <div\n          key={s.key}\n          className={`sport-card ${activeSport === s.key ? 'active' : ''}`}\n          role=\"button\"\n          tabIndex={0}\n          onClick={() => handleActivate(s.key)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' || e.key === ' ') handleActivate(s.key);\n          }}\n          aria-pressed={activeSport === s.key}\n        >\n          <div className=\"sport-icon\">{s.icon}</div>\n          <div className=\"sport-label\">{s.name}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SportsStrip;","/**\n * Odds WebSocket Service\n * Handles real-time odds updates without affecting cached match data\n */\n\nclass OddsWebSocketService {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.isConnected = false;\n    this.subscribers = new Map();\n    this.heartbeatInterval = null;\n    this.heartbeatTimeout = null;\n  }\n\n  /**\n   * Connect to WebSocket server\n   */\n  connect() {\n    try {\n      // Use environment variable for WebSocket URL, fallback to localhost\n      const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:10000/ws/odds';\n      \n      console.log('[ODDS WS] Connecting to:', wsUrl);\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = this.handleOpen.bind(this);\n      this.ws.onmessage = this.handleMessage.bind(this);\n      this.ws.onclose = this.handleClose.bind(this);\n      this.ws.onerror = this.handleError.bind(this);\n\n    } catch (error) {\n      console.error('[ODDS WS] Connection error:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  /**\n   * Handle WebSocket connection open\n   */\n  handleOpen() {\n    console.log('[ODDS WS] Connected successfully');\n    this.isConnected = true;\n    this.reconnectAttempts = 0;\n    this.reconnectDelay = 1000;\n    \n    // Start heartbeat\n    this.startHeartbeat();\n    \n    // Notify subscribers of connection\n    this.notifySubscribers('connection', { status: 'connected' });\n  }\n\n  /**\n   * Handle incoming WebSocket messages\n   */\n  handleMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      \n      // Handle different message types\n      switch (data.type) {\n        case 'odds_update':\n          this.handleOddsUpdate(data);\n          break;\n        case 'match_status':\n          this.handleMatchStatus(data);\n          break;\n        case 'heartbeat':\n          this.handleHeartbeat();\n          break;\n        default:\n          console.log('[ODDS WS] Unknown message type:', data.type);\n      }\n    } catch (error) {\n      console.error('[ODDS WS] Error parsing message:', error);\n    }\n  }\n\n  /**\n   * Handle odds updates\n   */\n  handleOddsUpdate(data) {\n    const { matchId, odds, timestamp } = data;\n    \n    console.log(`[ODDS WS] Odds update for match ${matchId}:`, odds);\n    \n    // Notify all subscribers about odds update\n    this.notifySubscribers('odds_update', {\n      matchId,\n      odds,\n      timestamp\n    });\n  }\n\n  /**\n   * Handle match status updates\n   */\n  handleMatchStatus(data) {\n    const { matchId, status, score } = data;\n    \n    console.log(`[ODDS WS] Status update for match ${matchId}:`, { status, score });\n    \n    // Notify subscribers about status update\n    this.notifySubscribers('match_status', {\n      matchId,\n      status,\n      score\n    });\n  }\n\n  /**\n   * Handle heartbeat response\n   */\n  handleHeartbeat() {\n    if (this.heartbeatTimeout) {\n      clearTimeout(this.heartbeatTimeout);\n      this.heartbeatTimeout = null;\n    }\n  }\n\n  /**\n   * Handle WebSocket connection close\n   */\n  handleClose(event) {\n    console.log('[ODDS WS] Connection closed:', event.code, event.reason);\n    this.isConnected = false;\n    \n    // Stop heartbeat\n    this.stopHeartbeat();\n    \n    // Notify subscribers of disconnection\n    this.notifySubscribers('connection', { status: 'disconnected' });\n    \n    // Schedule reconnection if not a clean close\n    if (event.code !== 1000) {\n      this.scheduleReconnect();\n    }\n  }\n\n  /**\n   * Handle WebSocket errors\n   */\n  handleError(error) {\n    console.error('[ODDS WS] WebSocket error:', error);\n    this.notifySubscribers('error', { error });\n  }\n\n  /**\n   * Schedule reconnection with exponential backoff\n   */\n  scheduleReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('[ODDS WS] Max reconnection attempts reached');\n      this.notifySubscribers('connection', { status: 'failed' });\n      return;\n    }\n\n    this.reconnectAttempts++;\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n    \n    console.log(`[ODDS WS] Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})`);\n    \n    setTimeout(() => {\n      this.connect();\n    }, delay);\n  }\n\n  /**\n   * Start heartbeat mechanism\n   */\n  startHeartbeat() {\n    this.heartbeatInterval = setInterval(() => {\n      if (this.isConnected && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({ type: 'heartbeat' }));\n        \n        // Set timeout for heartbeat response\n        this.heartbeatTimeout = setTimeout(() => {\n          console.warn('[ODDS WS] Heartbeat timeout, closing connection');\n          this.ws.close();\n        }, 5000);\n      }\n    }, 30000); // Send heartbeat every 30 seconds\n  }\n\n  /**\n   * Stop heartbeat mechanism\n   */\n  stopHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n    \n    if (this.heartbeatTimeout) {\n      clearTimeout(this.heartbeatTimeout);\n      this.heartbeatTimeout = null;\n    }\n  }\n\n  /**\n   * Subscribe to WebSocket events\n   */\n  subscribe(eventType, callback) {\n    if (!this.subscribers.has(eventType)) {\n      this.subscribers.set(eventType, new Set());\n    }\n    \n    this.subscribers.get(eventType).add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      const callbacks = this.subscribers.get(eventType);\n      if (callbacks) {\n        callbacks.delete(callback);\n      }\n    };\n  }\n\n  /**\n   * Notify all subscribers of an event\n   */\n  notifySubscribers(eventType, data) {\n    const callbacks = this.subscribers.get(eventType);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`[ODDS WS] Error in subscriber callback for ${eventType}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Disconnect WebSocket\n   */\n  disconnect() {\n    if (this.ws) {\n      this.stopHeartbeat();\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = null;\n    }\n    this.isConnected = false;\n  }\n\n  /**\n   * Get connection status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      reconnectAttempts: this.reconnectAttempts,\n      subscriberCount: Array.from(this.subscribers.values())\n        .reduce((total, callbacks) => total + callbacks.size, 0)\n    };\n  }\n\n  /**\n   * Send message to server (if needed for future features)\n   */\n  send(message) {\n    if (this.isConnected && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('[ODDS WS] Cannot send message, not connected');\n    }\n  }\n}\n\n// Create singleton instance\nconst oddsWebSocket = new OddsWebSocketService();\n\nexport default oddsWebSocket;","import React, { useState, useEffect } from 'react';\nimport HeroSlider from '../components/HeroSlider';\nimport MatchCard from '../components/MatchCard';\nimport PopularMatches from '../components/PopularMatches';\nimport apiService from '../services/api';\nimport SportsStrip from '../components/SportsStrip';\nimport enhancedCache from '../services/enhancedCache';\nimport oddsWebSocket from '../services/oddsWebSocket';\n\nconst Home = () => {\n  const [selectedTab, setSelectedTab] = useState('Featured');\n  const [matches, setMatches] = useState([]);\n  const [filteredMatches, setFilteredMatches] = useState([]);\n  const [popularMatches, setPopularMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSidebarFilter, setSelectedSidebarFilter] = useState('');\n  const [selectedSubcategory, setSelectedSubcategory] = useState('');\n  const handleSelectSport = (sportKey) => {\n    // Toggle off if clicking the same sport; otherwise set sport and clear subcategory\n    setSelectedSidebarFilter(prev => (prev === sportKey ? '' : sportKey));\n    setSelectedSubcategory('');\n  };\n\n  const tabs = ['Featured', 'Competitions', 'Outrights', 'Offers', 'Free Games'];\n\n  // Global search functionality\n  useEffect(() => {\n    const handleGlobalSearch = (event) => {\n      const { searchTerm: globalSearchTerm } = event.detail;\n      setSearchTerm(globalSearchTerm);\n    };\n\n    const handleGlobalDateFilter = (event) => {\n      const { selectedDate: globalSelectedDate } = event.detail;\n      setSelectedDate(globalSelectedDate);\n    };\n\n    // Listen for global search and date filter events\n    window.addEventListener('globalSearch', handleGlobalSearch);\n    window.addEventListener('globalDateFilter', handleGlobalDateFilter);\n\n    // Check for existing search term and date in localStorage\n    const existingSearchTerm = localStorage.getItem('globalSearchTerm');\n    const existingSelectedDate = localStorage.getItem('globalSelectedDate');\n    \n    if (existingSearchTerm) {\n      setSearchTerm(existingSearchTerm);\n    }\n    if (existingSelectedDate) {\n      setSelectedDate(existingSelectedDate);\n    }\n\n    return () => {\n      window.removeEventListener('globalSearch', handleGlobalSearch);\n      window.removeEventListener('globalDateFilter', handleGlobalDateFilter);\n    };\n  }, []);\n\n  useEffect(() => {\n    const handleSidebarFilter = (event) => {\n      const filterValue = event.detail.filter;\n      console.log(`[SIDEBAR FILTER] Applying filter: ${filterValue}`);\n      setSelectedSidebarFilter(filterValue);\n    };\n    window.addEventListener('sidebarFilter', handleSidebarFilter);\n    return () => window.removeEventListener('sidebarFilter', handleSidebarFilter);\n  }, []);\n\n  // Add subcategory filter event listener for navigation from MatchMarkets\n  useEffect(() => {\n    const handleSubcategoryFilter = (event) => {\n      const { sport, subcategory } = event.detail;\n      console.log(`[FALLBACK] Filtering by subcategory: ${subcategory} in sport: ${sport}`);\n      setSelectedSubcategory(subcategory);\n      \n      // Also set the sport filter to ensure proper filtering\n      setSelectedSidebarFilter(sport);\n    };\n    window.addEventListener('subcategoryFilter', handleSubcategoryFilter);\n    return () => window.removeEventListener('subcategoryFilter', handleSubcategoryFilter);\n  }, []);\n\n\n\n  // Mapping from sidebar names to possible values in the data\n  const sidebarToDataMap = {\n    'Soccer': ['Soccer'],\n    'American Football': ['Football', 'american football', 'americanfootball', 'nfl', 'college football', 'ncaaf', 'cfl'],\n    'Hockey': ['Hockey', 'NHL', 'KHL', 'AHL', 'SHL', 'Liiga', 'DEL', 'NLA'],\n    'NHL': ['NHL'],\n    'KHL': ['KHL'],\n    'AHL': ['AHL'],\n    'SHL': ['SHL'],\n    'Liiga': ['Liiga'],\n    'DEL': ['DEL'],\n    'NLA': ['NLA'],\n    'Tennis': ['Tennis', 'ATP', 'Wimbledon', 'US Open', 'French Open'],\n    'ATP': ['ATP'],\n    'Wimbledon': ['Wimbledon'],\n    'US Open': ['US Open'],\n    'French Open': ['French Open'],\n    'Baseball': ['Baseball', 'MLB'],\n    'MLB': ['MLB'],\n    // Add more mappings as needed for other sports/leagues\n  };\n\n  // Strict sport token map for exact matching (first token of sport_key)\n  const strictSportTokenMap = {\n    'Soccer': 'soccer',\n    'American Football': 'americanfootball',\n    'Basketball': 'basketball',\n    'Baseball': 'baseball',\n    'Tennis': 'tennis',\n    'Ice Hockey': 'icehockey',\n    'Hockey': 'hockey',\n    'Cricket': 'cricket',\n    'Boxing': 'boxing',\n    'MMA': 'mma',\n    'Volleyball': 'volleyball',\n    'Rugby': 'rugby',\n    'Rugby League': 'rugbyleague',\n    'Aussie Rules': 'aussierules',\n    'Handball': 'handball',\n    'Table tennis': 'tabletennis'\n  };\n\n  // Optional: keywords that clearly indicate other sports (to guard mislabels)\n  const nonSportKeywordsBySport = {\n    'Soccer': [/\\bboxing\\b/i, /\\bboxi\\b/i, /\\bmma\\b/i, /\\brugby\\b/i],\n    'American Football': [/\\bsoccer\\b/i, /\\brugby\\b/i],\n    'Basketball': [/\\bice hockey\\b/i, /\\bhockey\\b/i],\n    'Ice Hockey': [/\\bbasketball\\b/i],\n    'Boxing': [/\\bsoccer\\b/i, /\\bmma\\b/i],\n    'MMA': [/\\bsoccer\\b/i, /\\bboxing\\b/i]\n  };\n \n  // Enhanced subcategory mapping for better fallback filtering\n  const subcategoryMappings = {\n    'EPL': ['Premier League', 'English Premier League', 'EPL', 'England Premier League'],\n    'Epl': ['Premier League', 'English Premier League', 'EPL', 'England Premier League'],\n    'Serie A': ['Serie A', 'Italian Serie A', 'Italy Serie A'],\n    'Bundesliga': ['Bundesliga', 'German Bundesliga', 'Germany Bundesliga'],\n    'La Liga': ['La Liga', 'Spanish La Liga', 'Spain La Liga'],\n    'Ligue 1': ['Ligue 1', 'French Ligue 1', 'France Ligue One'],\n    'Champions League': ['UEFA Champions League', 'Champions League', 'UCL'],\n    'Europa League': ['UEFA Europa League', 'Europa League', 'UEL'],\n    'MLS': ['Major League Soccer', 'MLS'],\n    // American Football\n    'NFL': ['National Football League', 'NFL'],\n    'NCAAF': ['NCAA Football', 'College Football', 'NCAAF'],\n    'CFL': ['Canadian Football League', 'CFL'],\n    // Basketball\n    'NBA': ['National Basketball Association', 'NBA'],\n    'EuroLeague': ['EuroLeague', 'Euro League', 'Euroliga'],\n    // Baseball\n    'MLB': ['Major League Baseball', 'MLB'],\n    // Ice Hockey\n    'NHL': ['National Hockey League', 'NHL'],\n    'KHL': ['Kontinental Hockey League', 'KHL'],\n    'AHL': ['American Hockey League', 'AHL'],\n    'SHL': ['Swedish Hockey League', 'SHL'],\n    'Liiga': ['Finnish Liiga', 'Liiga'],\n    'DEL': ['Deutsche Eishockey Liga', 'DEL'],\n    'NLA': ['National League A', 'NLA'],\n    // Tennis\n    'ATP': ['Association of Tennis Professionals', 'ATP'],\n    'WTA': ['Women’s Tennis Association', 'WTA'],\n    'Wimbledon': ['Wimbledon'],\n    'US Open': ['US Open', 'U.S. Open'],\n    'French Open': ['French Open', 'Roland Garros']\n  };\n\n  // Filter matches based on search term, date, sidebar filter, and subcategory\n  useEffect(() => {\n    let filtered = matches;\n\n    // Sidebar filter\n    if (selectedSidebarFilter) {\n      const strictToken = strictSportTokenMap[selectedSidebarFilter];\n      if (strictToken) {\n        // Strict filter: exact sport token match, plus optional mislabel guards\n        const guards = nonSportKeywordsBySport[selectedSidebarFilter] || [];\n        filtered = filtered.filter(match => {\n          const sportToken = String(match.sport || '').toLowerCase().split('_')[0];\n          const leagueLower = String(match.league || '').toLowerCase();\n          const subLower = String(match.subcategory || '').toLowerCase();\n          const violatesGuard = guards.some(re => re.test(leagueLower) || re.test(subLower));\n          return sportToken === strictToken && !violatesGuard;\n        });\n      } else {\n        // Fallback to inclusive mapping for non-strict items (sub-leagues etc.)\n        const mappedValues = sidebarToDataMap[selectedSidebarFilter] || [selectedSidebarFilter];\n        filtered = filtered.filter(match =>\n          mappedValues.some(val =>\n            (match.sport && match.sport.toLowerCase().includes(val.toLowerCase())) ||\n            (match.league && match.league.toLowerCase().includes(val.toLowerCase())) ||\n            (match.subcategory && match.subcategory.toLowerCase().includes(val.toLowerCase()))\n          )\n        );\n      }\n    }\n\n    // Subcategory filter - strict matching when a subcategory is selected\n    if (selectedSubcategory) {\n      const strictTokenForSport = strictSportTokenMap[selectedSidebarFilter];\n      const normalize = (s) => String(s || '').toLowerCase().trim().replace(/[_.-]+/g, ' ');\n      const variations = (subcategoryMappings[selectedSubcategory] || [selectedSubcategory]).map(normalize);\n\n      filtered = filtered.filter(match => {\n        // Require strict sport token match if available\n        const sportToken = String(match.sport || '').toLowerCase().split('_')[0];\n        if (strictTokenForSport && sportToken !== strictTokenForSport) return false;\n\n        const leagueNorm = normalize(match.league);\n        const subcatNorm = normalize(match.subcategory);\n        const sportTitleNorm = normalize(match.sport_title);\n\n        // Strict equality against canonical variations\n        return variations.some(v => v && (leagueNorm === v || subcatNorm === v || sportTitleNorm === v));\n      });\n    }\n\n    // Filter by search term\n    if (searchTerm.trim()) {\n      const searchLower = searchTerm.toLowerCase();\n      filtered = filtered.filter(match => {\n        return (\n          match.homeTeam?.toLowerCase().includes(searchLower) ||\n          match.awayTeam?.toLowerCase().includes(searchLower) ||\n          match.league?.toLowerCase().includes(searchLower) ||\n          match.sport?.toLowerCase().includes(searchLower) ||\n          match.subcategory?.toLowerCase().includes(searchLower)\n        );\n      });\n    }\n    \n    // Filter by date\n    if (selectedDate) {\n      const selectedDateObj = new Date(selectedDate);\n      selectedDateObj.setHours(0, 0, 0, 0);\n      const nextDay = new Date(selectedDateObj);\n      nextDay.setDate(nextDay.getDate() + 1);\n      filtered = filtered.filter(match => {\n        const matchDate = new Date(match.startTime);\n        return matchDate >= selectedDateObj && matchDate < nextDay;\n      });\n    }\n\n    // Hide past matches (only upcoming)\n    const now = new Date();\n    filtered = filtered.filter(match => new Date(match.startTime) >= now);\n\n    setFilteredMatches(filtered);\n    \n    // Save filtered matches to session storage\n    try {\n      sessionStorage.setItem('home_filtered_data', JSON.stringify(filtered));\n      console.log('[HOME] Saved filtered matches data to session storage');\n    } catch (e) {\n      console.log('[HOME] Failed to save filtered matches to session storage:', e);\n    }\n  }, [matches, searchTerm, selectedDate, selectedSidebarFilter, selectedSubcategory]);\n\n \n  const createMatchKey = (match) => {\n    if (!match) return null;\n    \n    // For API data format\n    if (match.home_team && match.away_team) {\n      return `${match.home_team}_${match.away_team}_${match.commence_time}_${match.sport_key}`;\n    }\n    \n    // For frontend data format\n    if (match.homeTeam && match.awayTeam) {\n      return `${match.homeTeam}_${match.awayTeam}_${match.startTime}_${match.sport}`;\n    }\n    \n    return null;\n  };\n\n  // Helper function to deduplicate matches\n  const deduplicateMatches = (matches) => {\n    const seen = new Set();\n    const uniqueMatches = [];\n    \n    matches.forEach(match => {\n      const key = createMatchKey(match);\n      if (key && !seen.has(key)) {\n        seen.add(key);\n        uniqueMatches.push(match);\n      }\n    });\n    \n    console.log(`[DEBUG] Deduplication: ${matches.length} matches -> ${uniqueMatches.length} unique matches`);\n    return uniqueMatches;\n  };\n\n  // Transform odds data to match frontend format\n  const transformOddsToMatches = (oddsData) => {\n    const transformedMatches = oddsData.map(match => {\n      if (!match) return null;\n      \n      // Format sport key with fullstops between categories only\n      const formatSportKey = (key) => {\n        if (!key) return '';\n        // Split by underscore to get main parts (sport, league, subcategory)\n        const parts = key.split('_');\n        // Capitalize each word in each part but keep words together\n        const formattedParts = parts.map(part => \n          part.split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ')\n        );\n        // Join main parts with fullstops\n        return formattedParts.join('.');\n      };\n      \n      // Handle backend database format\n      return {\n        id: match._id || match.id,\n        league: match.leagueId ? formatSportKey(match.leagueId) : '',\n        subcategory: match.sport ? formatSportKey(match.sport) : '',\n        startTime: new Date(match.startTime),\n        homeTeam: match.homeTeam,\n        awayTeam: match.awayTeam,\n        homeTeamFlag: '🏳️',\n        awayTeamFlag: '🏳️',\n        odds: match.odds instanceof Map ? Object.fromEntries(match.odds) : match.odds || {},\n        additionalMarkets: (match.markets || []).length,\n        sport: match.sport ? match.sport.split('_')[0] : '',\n        allMarkets: match.markets || []\n      };\n    }).filter(match => match !== null);\n    \n    // Deduplicate the transformed matches\n    return deduplicateMatches(transformedMatches);\n  };\n\n  // Fetch matches from API\n  const fetchMatches = async (forceRefresh = false) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      // Try to get cached data first\n      if (!forceRefresh) {\n        const cachedMatches = enhancedCache.getCachedData('/matches');\n        if (cachedMatches) {\n          console.log('[HOME] Using cached matches data');\n          const transformedMatches = transformOddsToMatches(cachedMatches.matches || []);\n          setMatches(transformedMatches);\n          \n          // Use the same data for popular matches (ensure no duplicates)\n          const now = new Date();\n          const popularMatchesData = transformedMatches\n            .filter(match => {\n              // Count valid odds (greater than 0)\n              const validOddsCount = Object.values(match.odds || {}).filter(odd => odd > 0).length;\n              return validOddsCount >= 2;\n            })\n            // Only upcoming\n            .filter(match => new Date(match.startTime) >= now)\n            .slice(0, 6)\n            .map(match => ({\n              id: match.id || match._id,\n              league: match.league || '',\n              subcategory: match.subcategory || '',\n              startTime: match.startTime,\n              time: new Date(match.startTime).toLocaleTimeString('en-US', { \n                hour: '2-digit', \n                minute: '2-digit' \n              }),\n              homeTeam: match.homeTeam,\n              awayTeam: match.awayTeam,\n              odds: match.odds || {},\n              sport: match.sport || '',\n              country: match.country || '',\n              fullLeagueTitle: match.fullLeagueTitle || ''\n            }));\n          \n          const uniquePopularMatches = deduplicateMatches(popularMatchesData);\n          setPopularMatches(uniquePopularMatches);\n          \n          // Save popular matches to session storage\n          try {\n            sessionStorage.setItem('home_popular_data', JSON.stringify(uniquePopularMatches));\n            console.log('[HOME] Saved popular matches data to session storage');\n          } catch (e) {\n            console.log('[HOME] Failed to save popular matches to session storage:', e);\n          }\n          \n          setLoading(false);\n          return;\n        }\n      }\n      \n      // Fetch fresh data if no cache or force refresh\n      console.log('[HOME] Fetching fresh matches data...');\n      setLoading(true);\n      \n      const response = await apiService.getMatches();\n      console.log('[DEBUG] API response received:', response);\n      \n      const oddsData = response.data.matches || [];\n      console.log('[DEBUG] Raw odds data:', oddsData);\n      console.log('[DEBUG] Number of matches in response:', oddsData.length);\n      \n      // Transform odds data to match frontend format\n      const transformedMatches = transformOddsToMatches(oddsData);\n      // Debug log: print number of matches and a sample\n      console.log(`[DEBUG] Frontend received ${transformedMatches.length} matches`);\n      if (transformedMatches.length > 0) {\n        console.log('[DEBUG] First match sample:', transformedMatches[0]);\n      }\n      setMatches(transformedMatches);\n      \n      // Save to session storage for instant navigation\n      try {\n        sessionStorage.setItem('home_matches_data', JSON.stringify(transformedMatches));\n        console.log('[HOME] Saved matches data to session storage');\n      } catch (e) {\n        console.log('[HOME] Failed to save matches to session storage:', e);\n      }\n      \n      // Use the same data for popular matches (ensure no duplicates)\n      const now = new Date();\n      const popularMatchesData = transformedMatches\n        .filter(match => {\n          // Count valid odds (greater than 0)\n          const validOddsCount = Object.values(match.odds || {}).filter(odd => odd > 0).length;\n          return validOddsCount >= 2;\n        })\n        // Only upcoming\n        .filter(match => new Date(match.startTime) >= now)\n        .slice(0, 6)\n        .map(match => ({\n          id: match.id || match._id,\n          league: match.league || '',  // Ensure league is passed through\n          subcategory: match.subcategory || '',  // Ensure subcategory is passed through\n          startTime: match.startTime,\n          time: new Date(match.startTime).toLocaleTimeString('en-US', { \n            hour: '2-digit', \n            minute: '2-digit' \n          }),\n          homeTeam: match.homeTeam,\n          awayTeam: match.awayTeam,\n          odds: match.odds || {},\n          sport: match.sport || '',\n          country: match.country || '',\n          fullLeagueTitle: match.fullLeagueTitle || ''\n        }));\n      \n      // Deduplicate popular matches as well\n      const uniquePopularMatches = deduplicateMatches(popularMatchesData);\n      setPopularMatches(uniquePopularMatches);\n      \n    } catch (err) {\n      console.error('Error fetching matches:', err);\n      setError('Failed to load matches. Please check your connection and try again.');\n      \n      // Instead of falling back to sample data, try alternative API endpoints\n      console.log('[DEBUG] Primary API failed, attempting alternative data sources...');\n      \n      try {\n        // Try fetching from a different endpoint or sport-specific endpoints\n        const alternativeResponse = await apiService.getAllMatches();\n        if (alternativeResponse.data && alternativeResponse.data.length > 0) {\n          console.log('[DEBUG] Successfully fetched from alternative endpoint');\n          const transformedMatches = transformOddsToMatches(alternativeResponse.data);\n          setMatches(transformedMatches);\n          setPopularMatches(transformedMatches.slice(0, 6));\n          setError(null); // Clear error if alternative fetch succeeds\n          return;\n        }\n      } catch (alternativeErr) {\n        console.log('[DEBUG] Alternative endpoints also failed:', alternativeErr);\n      }\n      \n      // Only use minimal sample data as last resort, with clear indication\n      console.log('[DEBUG] All data sources failed, showing connection error');\n      setMatches([]);\n      setPopularMatches([]);\n      setError('Unable to connect to server. The server may be temporarily unavailable. Please try refreshing the page in a few moments.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize WebSocket and handle odds updates\n  useEffect(() => {\n    const handleOddsUpdate = (data) => {\n      console.log('[HOME] Received odds update:', data);\n      \n      // Update matches with new odds\n      setMatches(prevMatches => \n        prevMatches.map(match => {\n          if (match.id === data.matchId || match._id === data.matchId) {\n            return {\n              ...match,\n              odds: { ...match.odds, ...data.odds }\n            };\n          }\n          return match;\n        })\n      );\n      \n      // Update popular matches with new odds\n      setPopularMatches(prevPopular => \n        prevPopular.map(match => {\n          if (match.id === data.matchId || match._id === data.matchId) {\n            return {\n              ...match,\n              odds: { ...match.odds, ...data.odds }\n            };\n          }\n          return match;\n        })\n      );\n    };\n\n    const handleMatchStatusUpdate = (data) => {\n      console.log('[HOME] Received match status update:', data);\n      \n      // Update match status in both matches and popular matches\n      setMatches(prevMatches => \n        prevMatches.map(match => {\n          if (match.id === data.matchId || match._id === data.matchId) {\n            return {\n              ...match,\n              status: data.status,\n              score: data.score || match.score\n            };\n          }\n          return match;\n        })\n      );\n      \n      setPopularMatches(prevPopular => \n        prevPopular.map(match => {\n          if (match.id === data.matchId || match._id === data.matchId) {\n            return {\n              ...match,\n              status: data.status,\n              score: data.score || match.score\n            };\n          }\n          return match;\n        })\n      );\n    };\n\n    // Subscribe to WebSocket events and store unsubscribe functions\n    const unsubscribeOddsUpdate = oddsWebSocket.subscribe('odds_update', handleOddsUpdate);\n    const unsubscribeMatchStatus = oddsWebSocket.subscribe('match_status', handleMatchStatusUpdate);\n\n    // Connect WebSocket\n    oddsWebSocket.connect();\n\n    // Cleanup on unmount\n    return () => {\n      unsubscribeOddsUpdate();\n      unsubscribeMatchStatus();\n      oddsWebSocket.disconnect();\n    };\n  }, []);\n  \n  // Preload cached data on component mount for instant display\n  useEffect(() => {\n    // First, try to restore from session storage for instant navigation\n    try {\n      const sessionMatches = sessionStorage.getItem('home_matches_data');\n      const sessionPopular = sessionStorage.getItem('home_popular_data');\n      const sessionFiltered = sessionStorage.getItem('home_filtered_data');\n      \n      if (sessionMatches && sessionPopular) {\n        console.log('[HOME] Restoring data from session storage for instant display');\n        const parsedMatches = JSON.parse(sessionMatches);\n        const parsedPopular = JSON.parse(sessionPopular);\n        const parsedFiltered = sessionFiltered ? JSON.parse(sessionFiltered) : [];\n        \n        setMatches(parsedMatches);\n        setPopularMatches(parsedPopular);\n        setFilteredMatches(parsedFiltered);\n        setLoading(false); // Show content immediately\n      }\n    } catch (e) {\n      console.log('[HOME] No session storage data available');\n    }\n\n    // Then, try localStorage cache as fallback\n    try {\n      const matchesCacheRaw = localStorage.getItem('cache:/matches');\n      if (matchesCacheRaw) {\n        const matchesCache = JSON.parse(matchesCacheRaw);\n        const cachedOddsData = matchesCache?.data?.matches || [];\n        const transformed = transformOddsToMatches(cachedOddsData);\n        if (transformed && transformed.length > 0) {\n          setMatches(transformed);\n        }\n      }\n      const popularCacheRaw = localStorage.getItem('cache:/matches/popular/trending');\n      if (popularCacheRaw) {\n        const popularCache = JSON.parse(popularCacheRaw);\n        const popularData = popularCache?.data?.matches || [];\n        const now = new Date();\n        const transformedPopular = popularData\n          // Only upcoming\n          .filter(match => new Date(match.startTime) >= now)\n          .map(match => ({\n          id: match.id || match._id,\n          league: match.league || '',\n          subcategory: match.subcategory || '',\n          startTime: match.startTime,\n          time: new Date(match.startTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),\n          homeTeam: match.homeTeam,\n          awayTeam: match.awayTeam,\n          odds: match.odds || {},\n          sport: match.sport || '',\n          country: match.country || '',\n          fullLeagueTitle: match.fullLeagueTitle || ''\n        }));\n        const uniquePopular = deduplicateMatches(transformedPopular);\n        if (uniquePopular && uniquePopular.length > 0) {\n          setPopularMatches(uniquePopular);\n        }\n      }\n    } catch (e) {\n      // Ignore cache errors\n    }\n    fetchMatches();\n  }, []);\n  \n  // Enhanced version that includes polling for regular updates\n  useEffect(() => {\n    // Initial fetch\n    fetchMatches();\n    \n    // Set up polling interval (every 2 minutes = 120000ms)\n    const intervalId = setInterval(() => {\n      console.log('[DEBUG] Polling for updated matches data...');\n      fetchMatches();\n    }, 120000);\n    \n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array means this runs once on mount\n\n  // Add retry logic for failed connections\n  useEffect(() => {\n    if (error && error.includes('Unable to connect to server')) {\n      console.log('[DEBUG] Connection error detected, scheduling retry...');\n      const retryTimeout = setTimeout(() => {\n        console.log('[DEBUG] Retrying connection...');\n        fetchMatches();\n      }, 10000); // Retry after 10 seconds\n      \n      return () => clearTimeout(retryTimeout);\n    }\n  }, [error]);\n  \n  // Add a separate polling effect for popular matches\n  useEffect(() => {\n    // Set up more frequent polling for popular matches (every 1 minute)\n    const popularMatchesInterval = setInterval(() => {\n      fetchPopularMatches();\n    }, 60000);\n    \n    return () => clearInterval(popularMatchesInterval);\n  }, []);\n\n  // Navigation state management for preserving data\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden') {\n        // Page is being hidden (user navigating away), ensure data is saved\n        try {\n          if (matches.length > 0) {\n            sessionStorage.setItem('home_matches_data', JSON.stringify(matches));\n          }\n          if (popularMatches.length > 0) {\n            sessionStorage.setItem('home_popular_data', JSON.stringify(popularMatches));\n          }\n          if (filteredMatches.length > 0) {\n            sessionStorage.setItem('home_filtered_data', JSON.stringify(filteredMatches));\n          }\n          console.log('[HOME] Data preserved for navigation');\n        } catch (e) {\n          console.log('[HOME] Failed to preserve data:', e);\n        }\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [matches, popularMatches, filteredMatches]);\n  \n  // Add this new function to fetch only popular matches\n  const fetchPopularMatches = async () => {\n    try {\n      console.log('[DEBUG] Fetching popular matches...');\n      \n      const response = await apiService.getPopularMatches();\n      const popularData = response.data.matches || [];\n      const now = new Date();\n      \n      // Transform and deduplicate popular matches\n      const transformedPopular = popularData\n        // Only upcoming\n        .filter(match => new Date(match.startTime) >= now)\n        .map(match => ({\n        id: match.id || match._id,\n        league: match.league || '',\n        subcategory: match.subcategory || '',\n        startTime: match.startTime,\n        time: new Date(match.startTime).toLocaleTimeString('en-US', { \n          hour: '2-digit', \n          minute: '2-digit' \n        }),\n        homeTeam: match.homeTeam,\n        awayTeam: match.awayTeam,\n        odds: match.odds || {},\n        sport: match.sport || '',\n        country: match.country || '',\n        fullLeagueTitle: match.fullLeagueTitle || ''\n      }));\n      \n      const uniquePopularMatches = deduplicateMatches(transformedPopular);\n      setPopularMatches(uniquePopularMatches);\n      \n    } catch (err) {\n      console.error('Error fetching popular matches:', err);\n      // Don't set error state here to avoid disrupting the main UI\n    }\n  };\n\n  // Group matches by subcategory with canonicalization and deduplication\n  const groupMatchesBySubcategory = () => {\n    const groupedMatches = {};\n    const subcategoryUniqueMatches = {};\n\n    const normalize = (s) => String(s || '').toLowerCase().trim().replace(/[_.-]+/g, ' ');\n\n    const computeCanonicalSubcategory = (m) => {\n      const leagueNorm = normalize(m.league);\n      const subNorm = normalize(m.subcategory);\n      for (const [canonical, variations] of Object.entries(subcategoryMappings)) {\n        for (const v of variations) {\n          const vNorm = normalize(v);\n          if (vNorm && (leagueNorm === vNorm || subNorm === vNorm)) {\n            return canonical;\n          }\n        }\n      }\n      if (m.league && m.league.includes('.')) {\n        return m.league.split('.').pop().trim();\n      }\n      if (m.league) return m.league;\n      if (m.subcategory) return m.subcategory;\n      return 'Other';\n    };\n\n    filteredMatches.forEach(match => {\n      const subcategoryKey = computeCanonicalSubcategory(match);\n      if (!groupedMatches[subcategoryKey]) {\n        groupedMatches[subcategoryKey] = [];\n        subcategoryUniqueMatches[subcategoryKey] = new Set();\n      }\n      const matchKey = `${match.homeTeam}_${match.awayTeam}_${match.startTime}`;\n      if (!subcategoryUniqueMatches[subcategoryKey].has(matchKey)) {\n        subcategoryUniqueMatches[subcategoryKey].add(matchKey);\n        groupedMatches[subcategoryKey].push(match);\n      }\n    });\n\n    Object.entries(groupedMatches).forEach(([subcategory, matches]) => {\n      console.log(`[DEBUG] Subcategory \"${subcategory}\": ${matches.length} unique matches`);\n    });\n\n    return groupedMatches;\n  };\n\n  const groupedMatches = groupMatchesBySubcategory();\n  \n  // Debug: Log the grouped matches to see what subcategories are created\n  console.log('Grouped matches:', Object.keys(groupedMatches));\n  Object.entries(groupedMatches).forEach(([subcategory, matches]) => {\n    console.log(`Subcategory \"${subcategory}\": ${matches.length} matches`);\n  });\n\n  // Do not gate initial render behind loading; show page immediately without loading text\n\n  if (error) {\n    return (\n      <div className=\"home-page\">\n        <HeroSlider />\n        <div className=\"main-content\">\n          <div className=\"error-container\">\n            <p className=\"error-message\">{error}</p>\n            <button onClick={fetchMatches} className=\"retry-btn\">Retry</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"home-page\">\n      <HeroSlider />\n      \n      {/* Popular Matches section - keep unchanged */}\n      <div className=\"main-content\">\n        {/* Sports strip between hero and popular matches */}\n        <SportsStrip onSelectSport={handleSelectSport} activeSport={selectedSidebarFilter} />\n        {(() => {\n          // Derive sport token if strict mapping exists\n          let pm = popularMatches;\n          const strictToken = strictSportTokenMap[selectedSidebarFilter];\n          if (selectedSidebarFilter) {\n            if (strictToken) {\n              pm = pm.filter(m => String(m.sport || '').toLowerCase().split('_')[0] === strictToken);\n            } else {\n              const mappedValues = sidebarToDataMap[selectedSidebarFilter] || [selectedSidebarFilter];\n              pm = pm.filter(m =>\n                mappedValues.some(val =>\n                  (m.sport && m.sport.toLowerCase().includes(val.toLowerCase())) ||\n                  (m.league && m.league.toLowerCase().includes(val.toLowerCase())) ||\n                  (m.subcategory && m.subcategory.toLowerCase().includes(val.toLowerCase()))\n                )\n              );\n            }\n          }\n          return <PopularMatches matches={pm} loading={loading} />;\n        })()}\n        \n        {/* Enhanced Matches Section */}\n        <div className=\"matches-section\">\n          <div className=\"section-header\">\n            <h2>Today's Matches</h2>\n            {selectedSubcategory && (\n              <div className=\"active-filter\">\n                <span>Filtered by: {selectedSubcategory}</span>\n                <button \n                  className=\"clear-filter-btn\"\n                  onClick={() => setSelectedSubcategory('')}\n                >\n                  ✕\n                </button>\n              </div>\n            )}\n            <div className=\"tab-navigation\">\n              {tabs.map(tab => (\n                <button\n                  key={tab}\n                  className={`tab-btn ${selectedTab === tab ? 'active' : ''}`}\n                  onClick={() => setSelectedTab(tab)}\n                >\n                  {tab}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"matches-container\">\n            {Object.entries(groupedMatches).length > 0 ? (\n              Object.entries(groupedMatches).map(([subcategory, subcategoryMatches]) => (\n                <div key={subcategory} className=\"competition-group\">\n                  <div className=\"matches-list\">\n                    {subcategoryMatches.map((match, index) => (\n                      <MatchCard\n                        key={match.id}\n                        match={match}\n                        sport={match.sport}\n                        league={match.league}\n                        subcategory={match.subcategory}\n                        showLeagueHeader={index === 0}\n                      />\n                    ))}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"no-matches\">\n                <h3>No Matches Found</h3>\n                <p>No matches match your current filters. Try adjusting your search criteria.</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;"],"names":["HeroSlider","slides","setSlides","useState","currentSlide","setCurrentSlide","error","setError","useEffect","raw","localStorage","getItem","entry","JSON","parse","cachedSlides","data","Array","isArray","length","_","async","response","apiService","getHeroSlides","err","fetchSlides","timer","setInterval","prev","clearInterval","_jsx","className","children","_jsxs","style","transform","concat","map","slide","index","src","image","alt","caption1","caption2","href","buttonUrl","target","rel","buttonText","_id","id","onClick","prevSlide","nextSlide","goToSlide","_ref","matches","dispatch","useDispatch","scrollRef","useRef","displayedMatches","setDisplayedMatches","scrollLeft","current","scrollBy","left","behavior","title","scrollRight","ref","match","sportName","sport","sport_title","sportKeyOrName","sport_key","country","subcategory","league","competition","tournament","fullLeagueTitle","computeFullLeagueTitle","leagueName","fallbackSportTitle","dt","startTime","Date","dateStr","toLocaleDateString","timeStr","toLocaleTimeString","hour","minute","time","homeTeam","awayTeam","betType","odds","undefined","riskAssessment","assessOddsRisk","shouldDisable","LockedOdds","addToBetslip","hasStart","startDate","console","warn","bet","matchId","type","stake","payload","toFixed","sports","key","name","icon","viewBox","width","height","cx","cy","r","fill","stroke","strokeWidth","points","x","y","rx","d","ry","onSelectSport","activeSport","handleActivate","s","role","tabIndex","onKeyDown","e","constructor","this","ws","reconnectAttempts","maxReconnectAttempts","reconnectDelay","isConnected","subscribers","Map","heartbeatInterval","heartbeatTimeout","connect","wsUrl","process","REACT_APP_WS_URL","log","WebSocket","onopen","handleOpen","bind","onmessage","handleMessage","onclose","handleClose","onerror","handleError","scheduleReconnect","startHeartbeat","notifySubscribers","status","event","handleOddsUpdate","handleMatchStatus","handleHeartbeat","timestamp","score","clearTimeout","code","reason","stopHeartbeat","delay","Math","pow","setTimeout","readyState","OPEN","send","stringify","close","subscribe","eventType","callback","has","set","Set","get","add","callbacks","delete","forEach","disconnect","getStatus","subscriberCount","from","values","reduce","total","size","message","Home","selectedTab","setSelectedTab","setMatches","filteredMatches","setFilteredMatches","popularMatches","setPopularMatches","loading","setLoading","searchTerm","setSearchTerm","selectedDate","setSelectedDate","selectedSidebarFilter","setSelectedSidebarFilter","selectedSubcategory","setSelectedSubcategory","handleGlobalSearch","globalSearchTerm","detail","handleGlobalDateFilter","globalSelectedDate","window","addEventListener","existingSearchTerm","existingSelectedDate","removeEventListener","handleSidebarFilter","filterValue","filter","handleSubcategoryFilter","sidebarToDataMap","strictSportTokenMap","nonSportKeywordsBySport","subcategoryMappings","filtered","strictToken","guards","sportToken","String","toLowerCase","split","leagueLower","subLower","violatesGuard","some","re","test","mappedValues","val","includes","strictTokenForSport","normalize","trim","replace","variations","leagueNorm","subcatNorm","sportTitleNorm","v","searchLower","_match$homeTeam","_match$awayTeam","_match$league","_match$sport","_match$subcategory","selectedDateObj","setHours","nextDay","setDate","getDate","matchDate","now","sessionStorage","setItem","deduplicateMatches","seen","uniqueMatches","home_team","away_team","commence_time","createMatchKey","push","transformOddsToMatches","oddsData","transformedMatches","formatSportKey","part","word","charAt","toUpperCase","slice","join","leagueId","homeTeamFlag","awayTeamFlag","Object","fromEntries","additionalMarkets","markets","allMarkets","fetchMatches","forceRefresh","arguments","cachedMatches","enhancedCache","getCachedData","popularMatchesData","odd","uniquePopularMatches","getMatches","alternativeResponse","getAllMatches","alternativeErr","unsubscribeOddsUpdate","oddsWebSocket","prevMatches","_objectSpread","prevPopular","unsubscribeMatchStatus","sessionMatches","sessionPopular","sessionFiltered","parsedMatches","parsedPopular","parsedFiltered","matchesCacheRaw","_matchesCache$data","matchesCache","cachedOddsData","transformed","popularCacheRaw","_popularCache$data","popularCache","popularData","transformedPopular","uniquePopular","intervalId","retryTimeout","popularMatchesInterval","fetchPopularMatches","handleVisibilityChange","document","visibilityState","getPopularMatches","groupedMatches","groupMatchesBySubcategory","subcategoryUniqueMatches","subcategoryKey","m","subNorm","canonical","entries","vNorm","pop","computeCanonicalSubcategory","matchKey","keys","_ref2","SportsStrip","sportKey","pm","PopularMatches","tab","_ref3","subcategoryMatches","MatchCard","showLeagueHeader"],"sourceRoot":""}