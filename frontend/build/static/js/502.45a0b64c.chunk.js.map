{"version":3,"file":"static/js/502.45a0b64c.chunk.js","mappings":"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","sources":["pages/OddsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport api from '../services/api';\n\nimport { Container, Typography, CircularProgress, Alert, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Pagination, TextField } from '@mui/material';\n\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n/**\n * @typedef {Object} Outcome\n * @property {string} name\n * @property {number} price\n * @property {number} [point]\n *\n * @typedef {Object} Market\n * @property {string} key\n * @property {string} last_update\n * @property {Outcome[]} outcomes\n *\n * @typedef {Object} Bookmaker\n * @property {string} key\n * @property {string} title\n * @property {string} last_update\n * @property {Market[]} markets\n *\n * @typedef {Object} OddsItem\n * @property {string} gameId\n * @property {string} sport_key\n * @property {string} sport_title\n * @property {string} commence_time\n * @property {string} home_team\n * @property {string} away_team\n * @property {Bookmaker[]} bookmakers\n * @property {string} lastFetched\n */\n\nconst OddsPage = () => {\n  const [odds, setOdds] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDate, setSelectedDate] = useState(null);\n\n\n  useEffect(() => {\n    const fetchOdds = async () => {\n      setLoading(true);\n      try {\n        const params = {\n          page,\n          limit: 10,\n          searchTerm,\n          date: selectedDate ? selectedDate.format('YYYY-MM-DD') : '',\n        };\n        const response = await api.get('/odds', { params });\n        setOdds(response.data.data);\n        setTotalPages(response.data.totalPages);\n      } catch (err) {\n        console.error('Error fetching odds:', err);\n        setError('Failed to fetch odds. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchOdds();\n  }, [page, searchTerm, selectedDate]);\n\n  const handlePageChange = (event, value) => {\n    setPage(value);\n  };\n\n  if (loading) {\n    return (\n      <Container sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}>\n        <CircularProgress />\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container sx={{ mt: 4 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\">\n        All Upcoming Odds\n      </Typography>\n      <Box sx={{ display: 'flex', gap: 2, mb: 3, justifyContent: 'center' }}>\n        <TextField\n          label=\"Search by Team Name\"\n          variant=\"outlined\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          sx={{ width: '300px' }}\n        />\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DatePicker\n            label=\"Filter by Date\"\n            value={selectedDate}\n            onChange={(newValue) => setSelectedDate(newValue)}\n            renderInput={(params) => <TextField {...params} sx={{ width: '200px' }} />}\n          />\n        </LocalizationProvider>\n      </Box>\n      {odds.length === 0 ? (\n        <Typography variant=\"h6\" align=\"center\" sx={{ mt: 4 }}>\n          No odds available at the moment. Please check back later.\n        </Typography>\n      ) : (\n        <TableContainer component={Paper} elevation={3}>\n          <Table sx={{ minWidth: 650 }} aria-label=\"odds table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Sport</TableCell>\n                <TableCell>Matchup</TableCell>\n                <TableCell>Commence Time</TableCell>\n                <TableCell>Bookmaker</TableCell>\n                <TableCell align=\"right\">Home Team Odds</TableCell>\n                <TableCell align=\"right\">Away Team Odds</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {odds.map((game) => (\n                game.bookmakers.map((bookmaker) => {\n                  // Check if bookmaker has valid markets\n                  const h2hMarket = bookmaker.markets?.find(market => market.key === 'h2h');\n                  if (!h2hMarket || !h2hMarket.outcomes || h2hMarket.outcomes.length < 2) {\n                    return null; // Skip bookmakers with invalid markets\n                  }\n\n                  const homeOdds = h2hMarket.outcomes.find(o => o.name === game.home_team)?.price;\n                  const awayOdds = h2hMarket.outcomes.find(o => o.name === game.away_team)?.price;\n\n                  // Only show row if we have valid odds\n                  if (!homeOdds || !awayOdds) {\n                    return null;\n                  }\n\n                  return (\n                    <TableRow\n                      key={`${game.gameId}-${bookmaker.key}`}\n                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                      <TableCell component=\"th\" scope=\"row\">\n                        {game.sport_title}\n                      </TableCell>\n                      <TableCell>{game.home_team} vs {game.away_team}</TableCell>\n                      <TableCell>{new Date(game.commence_time).toLocaleString()}</TableCell>\n                      <TableCell>{bookmaker.title}</TableCell>\n                      <TableCell align=\"right\">\n                        {homeOdds}\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {awayOdds}\n                      </TableCell>\n                    </TableRow>\n                  );\n                }).filter(row => row !== null) // Remove null rows\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n      {totalPages > 1 && (\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n          <Pagination count={totalPages} page={page} onChange={handlePageChange} color=\"primary\" />\n        </Box>\n      )}\n    </Container>\n  );\n};\n\nexport default OddsPage;"],"names":["OddsPage","odds","setOdds","useState","loading","setLoading","error","setError","page","setPage","totalPages","setTotalPages","searchTerm","setSearchTerm","selectedDate","setSelectedDate","useEffect","async","params","limit","date","format","response","api","get","data","err","console","fetchOdds","_jsx","Container","sx","display","justifyContent","alignItems","minHeight","children","CircularProgress","mt","Alert","severity","_jsxs","mb","Typography","variant","component","gutterBottom","align","Box","gap","TextField","label","value","onChange","e","target","width","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","newValue","renderInput","_objectSpread","length","TableContainer","Paper","elevation","Table","minWidth","TableHead","TableRow","TableCell","TableBody","map","game","bookmakers","bookmaker","_bookmaker$markets","_h2hMarket$outcomes$f","_h2hMarket$outcomes$f2","h2hMarket","markets","find","market","key","outcomes","homeOdds","o","name","home_team","price","awayOdds","away_team","border","scope","sport_title","Date","commence_time","toLocaleString","title","concat","gameId","filter","row","Pagination","count","handlePageChange","event","color"],"sourceRoot":""}