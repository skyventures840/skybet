{"version":3,"file":"static/js/177.571065ee.chunk.js","mappings":"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","sources":["pages/MatchMarkets.js","utils/marketTitles.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport apiService from '../services/api';\nimport getMarketTitle, { normalizeMarketKey } from '../utils/marketTitles';\n\nconst MatchMarkets = () => {\n    const { matchId } = useParams();\n    const navigate = useNavigate();\n    const location = useLocation();\n    const dispatch = useDispatch();\n    const [match, setMatch] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedMarket, setSelectedMarket] = useState('all');\n    // Track expanded/collapsed state per market key\n    const [expandedByKey, setExpandedByKey] = useState({});\n\n    // Title helper from shared util\n    const titleForKey = (normKey) => getMarketTitle(normKey);\n\n    useEffect(() => {\n        console.log('MatchMarkets useEffect triggered with matchId:', matchId);\n        \n        // Check if user came from additional markets button\n        // Read query params if needed for future logic\n        // const urlParams = new URLSearchParams(location.search);\n        // const fromAdditionalMarkets = urlParams.get('from') === 'additional';\n        \n        // Fetch match data from API\n        const fetchMatch = async () => {\n            try {\n                setLoading(true);\n                setError(null);\n                \n                // Use the markets endpoint for comprehensive data\n                const response = await apiService.getMatchMarkets(matchId);\n                \n                const matchData = response.data;\n                console.log('Received match data:', matchData);\n                \n                // Process bookmakers data to create markets structure\n                let processedMatchData = { ...matchData };\n                \n                // Prefer backend-normalized markets if present\n                if (matchData.markets && Array.isArray(matchData.markets) && matchData.markets.length > 0) {\n                    console.log('Using backend-normalized markets data:', matchData.markets);\n                    // Deduplicate and merge aliases into consistent groups\n                    processedMatchData.markets = mergeAndNormalizeMarkets(matchData.markets, matchData);\n                } else if (matchData.bookmakers && matchData.bookmakers.length > 0) {\n                    console.log('Processing bookmakers data:', matchData.bookmakers);\n                    console.log('Number of bookmakers:', matchData.bookmakers.length);\n                    \n                    const aggregated = new Map(); // key -> { key, title, outcomes: [] }\n                    \n                    matchData.bookmakers.forEach((bookmaker, bookmakerIndex) => {\n                        console.log(`Processing bookmaker ${bookmakerIndex}:`, bookmaker.key, bookmaker.title);\n                        console.log(`Bookmaker ${bookmakerIndex} has ${bookmaker.markets.length} markets:`, bookmaker.markets.map(m => m.key));\n                        \n                        bookmaker.markets.forEach((market, marketIndex) => {\n                            console.log(`Processing market ${marketIndex} from bookmaker ${bookmakerIndex}:`, market.key);\n                            \n                            const normKey = normalizeMarketKey(market.key);\n                            const marketTitle = titleForKey(normKey);\n                            const existing = aggregated.get(normKey);\n                            const incomingOutcomes = (market.outcomes || []).map(outcome => ({\n                                name: outcome.name,\n                                price: outcome.price,\n                                point: outcome.point || null\n                            }));\n                            if (!existing) {\n                                aggregated.set(normKey, {\n                                    key: normKey,\n                                    title: marketTitle,\n                                    outcomes: incomingOutcomes\n                                });\n                            } else {\n                                // Merge outcomes, dedupe by name+point\n                                const bySig = new Map();\n                                [...existing.outcomes, ...incomingOutcomes].forEach(o => {\n                                    const sig = `${(o.name||'').toLowerCase()}|${o.point ?? ''}`;\n                                    if (!bySig.has(sig)) bySig.set(sig, o);\n                                    else {\n                                        // Prefer outcome with valid price\n                                        const prev = bySig.get(sig);\n                                        if ((!prev.price || prev.price <= 0) && o.price && o.price > 0) {\n                                            bySig.set(sig, o);\n                                        }\n                                    }\n                                });\n                                existing.outcomes = Array.from(bySig.values());\n                            }\n                        });\n                    });\n                    const markets = Array.from(aggregated.values());\n                    console.log('Final processed markets (after deduplication):', markets.map(m => ({ key: m.key, title: m.title })));\n                    processedMatchData.markets = normalizeOutcomeLabels(markets, matchData);\n                    console.log('Processed markets:', markets);\n                } else {\n                    console.log('No markets or bookmakers data found');\n                    processedMatchData.markets = [];\n                }\n                \n                setMatch(processedMatchData);\n                setLoading(false);\n            } catch (error) {\n                console.error('Error fetching match data:', error);\n                setError(error.message || 'Failed to load match data');\n                setLoading(false);\n            }\n        };\n\n        if (matchId) {\n            fetchMatch();\n        } else {\n            setError('No match ID provided');\n            setLoading(false);\n        }\n    }, [matchId, location.search]);\n\n    // Merge and normalize markets when backend provides markets array\n    const mergeAndNormalizeMarkets = (markets, matchData) => {\n        const aggregated = new Map();\n        markets.forEach(m => {\n            const normKey = normalizeMarketKey(m.key || m.title);\n            const title = titleForKey(normKey);\n            const incomingOutcomes = (m.outcomes || []).map(o => ({\n                name: o.name,\n                price: o.price,\n                point: o.point || null\n            }));\n            const existing = aggregated.get(normKey);\n            if (!existing) {\n                aggregated.set(normKey, { key: normKey, title, outcomes: incomingOutcomes });\n            } else {\n                const bySig = new Map();\n                [...existing.outcomes, ...incomingOutcomes].forEach(o => {\n                    const sig = `${(o.name||'').toLowerCase()}|${o.point ?? ''}`;\n                    if (!bySig.has(sig)) bySig.set(sig, o);\n                    else {\n                        const prev = bySig.get(sig);\n                        if ((!prev.price || prev.price <= 0) && o.price && o.price > 0) bySig.set(sig, o);\n                    }\n                });\n                existing.outcomes = Array.from(bySig.values());\n            }\n        });\n        return normalizeOutcomeLabels(Array.from(aggregated.values()), matchData);\n    };\n\n    // Standardize outcome labels inside grouped markets\n    const normalizeOutcomeLabels = (markets, matchData) => {\n        const homeName = matchData.homeTeam || matchData.home_team || 'Home';\n        const awayName = matchData.awayTeam || matchData.away_team || 'Away';\n        return markets.map(m => {\n            if (m.key === 'winner') {\n                // Map common labels to Home/Away/Draw\n                m.outcomes = m.outcomes.map(o => {\n                    let name = (o.name || '').toLowerCase();\n                    if (['home','home win','homewin','1'].includes(name)) return { ...o, name: homeName };\n                    if (['away','away win','awaywin','2'].includes(name)) return { ...o, name: awayName };\n                    if (['draw','x','tie'].includes(name)) return { ...o, name: 'Draw' };\n                    return o;\n                });\n                // Deduplicate by name\n                const byName = new Map();\n                m.outcomes.forEach(o => {\n                    const key = (o.name || '').toLowerCase();\n                    if (!byName.has(key)) byName.set(key, o);\n                    else if ((!byName.get(key).price || byName.get(key).price <= 0) && o.price && o.price > 0) byName.set(key, o);\n                });\n                m.outcomes = Array.from(byName.values());\n            }\n            if (m.key === 'totals' || (m.key || '').includes('totals')) {\n                // Normalize Over/Under labels across all totals variants (incl. alternates, team totals)\n                m.outcomes = m.outcomes.map(o => {\n                    let name = (o.name || '').toLowerCase();\n                    // Replace generic team tokens with actual names for team totals\n                    name = name.replace(/\\bhome\\b/g, homeName.toLowerCase()).replace(/\\baway\\b/g, awayName.toLowerCase());\n                    // Detect Over/Under anywhere in the name\n                    const isOver = /(\\bover\\b|\\bov\\b|\\bo\\b)/.test(name);\n                    const isUnder = /(\\bunder\\b|\\bun\\b|\\bu\\b)/.test(name);\n                    if (isOver) {\n                        // Preserve any prefix (e.g., team name), capitalize Over, append point\n                        const replaced = name.replace(/\\bover\\b|\\bov\\b|\\bo\\b/i, 'Over');\n                        const display = o.point != null && !/\\([^)]*\\)/.test(replaced) ? `${replaced} (${o.point})` : replaced;\n                        return { ...o, name: display.replace(/^\\w/, c => c.toUpperCase()), point: null };\n                    }\n                    if (isUnder) {\n                        const replaced = name.replace(/\\bunder\\b|\\bun\\b|\\bu\\b/i, 'Under');\n                        const display = o.point != null && !/\\([^)]*\\)/.test(replaced) ? `${replaced} (${o.point})` : replaced;\n                        return { ...o, name: display.replace(/^\\w/, c => c.toUpperCase()), point: null };\n                    }\n                    return o;\n                });\n                // Deduplicate by Over/Under plus team context (so Home/Away totals don't merge)\n                const bySig = new Map();\n                m.outcomes.forEach(o => {\n                    const n = (o.name || '').toLowerCase();\n                    const teamCtx = n.startsWith(homeName.toLowerCase()) ? 'home' : (n.startsWith(awayName.toLowerCase()) ? 'away' : '');\n                    const base = n.includes('over') ? `${teamCtx}over` : (n.includes('under') ? `${teamCtx}under` : n);\n                    if (!bySig.has(base)) bySig.set(base, o);\n                    else if ((!bySig.get(base).price || bySig.get(base).price <= 0) && o.price && o.price > 0) bySig.set(base, o);\n                });\n                // Keep only Over/Under outcomes; drop any generic 'Total' lines or others\n                m.outcomes = Array.from(bySig.values()).filter(o => {\n                    const n = (o.name || '').toLowerCase();\n                    return n.includes('over') || n.includes('under');\n                });\n                // Ensure title for base totals market is 'Totals'\n                if (m.key === 'totals') {\n                    m.title = 'Totals';\n                }\n            }\n            if (m.key === 'spreads') {\n                // Unify Handicap: one market with Home and Away outcomes, show point in brackets\n                const normalized = [];\n                m.outcomes.forEach(o => {\n                    const raw = (o.name || '').toLowerCase();\n                    const isHome = raw.includes('home') || raw === (homeName || '').toLowerCase();\n                    const isAway = raw.includes('away') || raw === (awayName || '').toLowerCase();\n                    const signPoint = o.point != null ? (o.point >= 0 ? `+${o.point}` : `${o.point}`) : null;\n                    if (isHome) {\n                        normalized.push({ ...o, name: signPoint ? `${homeName} (${signPoint})` : `${homeName}`, point: null });\n                    } else if (isAway) {\n                        normalized.push({ ...o, name: signPoint ? `${awayName} (${signPoint})` : `${awayName}`, point: null });\n                    } else {\n                        // Fallback: keep name but move point into brackets\n                        const label = signPoint ? `${o.name} (${signPoint})` : (o.name || '');\n                        normalized.push({ ...o, name: label, point: null });\n                    }\n                });\n                // Deduplicate to one Home and one Away entry, prefer priced outcomes\n                const bySide = new Map();\n                normalized.forEach(o => {\n                    const lower = (o.name || '').toLowerCase();\n                    const key = lower.includes((homeName || '').toLowerCase()) ? 'home' : (lower.includes((awayName || '').toLowerCase()) ? 'away' : lower);\n                    if (!bySide.has(key)) bySide.set(key, o);\n                    else if ((!bySide.get(key).price || bySide.get(key).price <= 0) && o.price && o.price > 0) bySide.set(key, o);\n                });\n                m.outcomes = Array.from(bySide.values());\n                // Ensure title is correct\n                m.title = 'Handicap';\n            }\n            return m;\n        });\n    };\n\n    // Initialize expanded state when match data is loaded\n    useEffect(() => {\n        if (match && match.markets && Array.isArray(match.markets)) {\n            // Only initialize once to preserve user toggles\n            if (Object.keys(expandedByKey).length === 0) {\n                const initial = {};\n                match.markets.forEach(m => {\n                    // Default expand all markets\n                    initial[m.key] = true;\n                });\n                setExpandedByKey(initial);\n            }\n        }\n    }, [match]);\n\n    const toggleMarket = (key) => {\n        setExpandedByKey(prev => ({ ...prev, [key]: !prev[key] }));\n    };\n\n    // Transform API data to match the expected format for MatchMarkets\n    // transformMatchData not used; keeping logic in fetch\n\n    // Function to add bet to betslip\n    const addToBetslip = (marketKey, outcome) => {\n        if (!match) {\n            console.error('No match data available for betslip');\n            return;\n        }\n        \n        // Create bet object with all necessary information\n        const bet = {\n            matchId: match._id || match.id,\n            match: `${match.homeTeam || match.home_team} vs ${match.awayTeam || match.away_team}`,\n            homeTeam: match.homeTeam || match.home_team,\n            awayTeam: match.awayTeam || match.away_team,\n            league: match.league || match.sport_title,\n            startTime: match.startTime || match.commence_time,\n            market: marketKey,\n            marketDisplay: getMarketTitle(marketKey),\n            selection: outcome.name,\n            odds: outcome.price,\n            stake: 0,\n            potentialWin: 0\n        };\n        \n        // Add to Redux store betslip\n        dispatch({ type: 'activeBets/addBet', payload: bet });\n        \n        // Show success feedback\n        console.log(`Successfully added to betslip: ${outcome.name} @ ${outcome.price.toFixed(2)}`);\n    };\n\n    const formatMatchTime = (startTime) => {\n        const date = new Date(startTime);\n        return date.toLocaleString('en-US', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    };\n\n    const getFilteredMarkets = () => {\n        // Add null checks to prevent undefined filter errors\n        if (!match || !match.markets || !Array.isArray(match.markets)) {\n            return [];\n        }\n\n        if (selectedMarket === 'all') {\n            // Filter out markets with no outcomes or outcomes with invalid odds\n            return match.markets.filter(market => \n                market.outcomes && \n                market.outcomes.length > 0 && \n                market.outcomes.some(outcome => outcome.price && outcome.price > 0)\n            );\n        }\n        \n        return match.markets.filter(market => \n            market.key === selectedMarket &&\n            market.outcomes && \n            market.outcomes.length > 0 && \n            market.outcomes.some(outcome => outcome.price && outcome.price > 0)\n        );\n    };\n\n    if (loading) {\n        return (\n            <div className=\"loading-container\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading match markets from database...</p>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"error-container\">\n                <div className=\"error-message\">\n                    <h3>Error Loading Match Markets</h3>\n                    <p>{error}</p>\n                    <button \n                        className=\"retry-btn\"\n                        onClick={() => {\n                            setError(null);\n                            setLoading(true);\n                            // Retry fetching real data by re-running the fetch logic\n                            const retryFetch = async () => {\n                                try {\n                                    setLoading(true);\n                                    setError(null);\n                                    \n                                    const response = await apiService.getMatchMarkets(matchId);\n                                    const matchData = response.data;\n                                    \n                                    // Process bookmakers data to create markets structure\n                                    let processedMatchData = { ...matchData };\n                                    \n                                    if (matchData.markets && Array.isArray(matchData.markets) && matchData.markets.length > 0) {\n                                        processedMatchData.markets = matchData.markets;\n                                    } else if (matchData.bookmakers && matchData.bookmakers.length > 0) {\n                                        const markets = [];\n                                        const processedMarketKeys = new Set(); // Track processed market keys to avoid duplicates\n                                        \n                                        console.log('Retry: Processing bookmakers data:', matchData.bookmakers);\n                                        console.log('Retry: Number of bookmakers:', matchData.bookmakers.length);\n                                        \n                                        matchData.bookmakers.forEach((bookmaker, bookmakerIndex) => {\n                                            console.log(`Retry: Processing bookmaker ${bookmakerIndex}:`, bookmaker.key, bookmaker.title);\n                                            console.log(`Retry: Bookmaker ${bookmakerIndex} has ${bookmaker.markets.length} markets:`, bookmaker.markets.map(m => m.key));\n                                            \n                                            bookmaker.markets.forEach((market, marketIndex) => {\n                                                console.log(`Retry: Processing market ${marketIndex} from bookmaker ${bookmakerIndex}:`, market.key);\n                                                \n                                                const normKey = normalizeMarketKey(market.key);\n                                                // Skip if we've already processed this market type\n                                                if (processedMarketKeys.has(normKey)) {\n                                                    console.log(`Retry: Skipping duplicate market: ${market.key} (already processed)`);\n                                                    return;\n                                                }\n                                                \n                                                processedMarketKeys.add(normKey);\n                                                console.log(`Retry: Adding new market: ${normKey}`);\n                                                \n                                                // Title based on normalized key\n                                                const marketTitle = titleForKey(normKey);\n                                                \n                                                markets.push({\n                                                    key: normKey,\n                                                    title: marketTitle,\n                                                    // description removed as per requirements\n                                                    outcomes: market.outcomes.map(outcome => ({\n                                                        name: outcome.name,\n                                                        price: outcome.price,\n                                                        point: outcome.point || null\n                                                    }))\n                                                });\n                                            });\n                                        });\n                                        \n                                        console.log('Retry: Final processed markets (after deduplication):', markets.map(m => ({ key: m.key, title: m.title })));\n                                        // Normalize outcome labels to consolidate markets like winner (1x2), totals, spreads\n                                        processedMatchData.markets = normalizeOutcomeLabels(markets, matchData);\n                                    } else {\n                                        processedMatchData.markets = [];\n                                    }\n                                    \n                                    setMatch(processedMatchData);\n                                    setLoading(false);\n                                } catch (error) {\n                                    console.error('Retry failed:', error);\n                                    setError(error.message || 'Failed to load match data');\n                                    setLoading(false);\n                                }\n                            };\n                            retryFetch();\n                        }}\n                    >\n                        Retry Loading Real Data\n                    </button>\n                    <button \n                        className=\"retry-btn\"\n                        onClick={() => navigate(-1)}\n                        style={{ marginLeft: '10px', backgroundColor: '#6c757d' }}\n                    >\n                        Go Back\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    if (!match) {\n        return (\n            <div className=\"error\">\n                Match not found.\n                <br />\n                <button \n                    onClick={() => navigate(-1)}\n                    style={{ \n                        marginTop: '20px', \n                        padding: '10px 20px', \n                        backgroundColor: '#2196F3', \n                        color: 'white', \n                        border: 'none', \n                        borderRadius: '5px', \n                        cursor: 'pointer' \n                    }}\n                >\n                    Go Back\n                </button>\n            </div>\n        );\n    }\n\n    const filteredMarkets = getFilteredMarkets();\n\n    return (\n        <div className=\"match-markets-page\">\n            <div className=\"match-markets-header\">\n                <button \n                    onClick={() => navigate(-1)}\n                    className=\"back-button\"\n                >\n                    ← Back\n                </button>\n                <h1>Match Markets</h1>\n            </div>\n\n            <div className=\"match-info-card\">\n                <div className=\"match-teams\">\n                    <h2>{match.homeTeam || match.home_team} vs {match.awayTeam || match.away_team}</h2>\n                    <p className=\"match-league\">\n                      {(() => {\n                        const sport = match.sport || match.sport_title;\n                        const country = match.subcategory || match.country;\n                        const league = match.league || match.competition || match.tournament;\n                        const norm = (s) => (s || '').toString().trim().replace(/[.·]+$/,'');\n                        const parts = [norm(sport), norm(country), norm(league)].filter(Boolean);\n                        // If league already contains country, skip country to avoid duplication\n                        const finalParts = parts.filter((p, idx) => {\n                          if (idx === 1 && parts[2] && parts[2].toLowerCase().includes(p.toLowerCase())) return false;\n                          return true;\n                        });\n                        const title = Array.from(new Set(finalParts.map(p => p.toLowerCase())))\n                          .map(lower => finalParts.find(p => p.toLowerCase() === lower))\n                          .join(' · ');\n                        return title;\n                      })()}\n                    </p>\n                    <p className=\"match-time\">{formatMatchTime(match.startTime || match.commence_time)}</p>\n                </div>\n                \n                <div className=\"market-filter\">\n                    <label htmlFor=\"market-select\">Filter Markets:</label>\n                    <select \n                        id=\"market-select\"\n                        value={selectedMarket}\n                        onChange={(e) => setSelectedMarket(e.target.value)}\n                    >\n                        <option value=\"all\">All Markets</option>\n                        {match && match.markets && Array.isArray(match.markets) && match.markets.map(market => (\n                            <option key={market.key} value={market.key}>\n                                {market.title}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n\n            <div className=\"markets-container\">\n                {Array.isArray(filteredMarkets) && filteredMarkets.map(market => {\n                    // Only render markets that have valid outcomes\n                    const validOutcomes = market.outcomes && Array.isArray(market.outcomes) \n                        ? market.outcomes.filter(outcome => \n                            outcome.price && outcome.price > 0\n                        )\n                        : [];\n                    \n                    if (validOutcomes.length === 0) {\n                        return null; // Hide empty markets\n                    }\n                    \n                    return (\n                        <div key={market.key} className={`market-card ${expandedByKey[market.key] ? 'expanded' : 'collapsed'}`}>\n                            <button\n                                className=\"market-header\"\n                                onClick={() => toggleMarket(market.key)}\n                                aria-expanded={!!expandedByKey[market.key]}\n                                aria-controls={`outcomes-${market.key}`}\n                                style={{\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    justifyContent: 'space-between',\n                                    width: '100%',\n                                    border: 'none',\n                                    padding: '8px 0',\n                                    cursor: 'pointer'\n                                }}\n                            >\n                                <h3 style={{ margin: 0 }}>{market.title}</h3>\n                                <span\n                                    className=\"market-chevron\"\n                                    style={{\n                                        display: 'inline-block',\n                                        transition: 'transform 0.2s ease',\n                                        transform: expandedByKey[market.key] ? 'rotate(90deg)' : 'rotate(0deg)'\n                                    }}\n                                >\n                                    ▸\n                                </span>\n                            </button>\n                            \n                            <div\n                                id={`outcomes-${market.key}`}\n                                className=\"market-outcomes\"\n                                style={{ display: expandedByKey[market.key] ? 'grid' : 'none' }}\n                            >\n                                {validOutcomes.map((outcome, index) => (\n                                    <button\n                                        key={index}\n                                        className=\"outcome-button\"\n                                        onClick={() => addToBetslip(market.key, outcome, outcome.price)}\n                                    >\n                                        <div className=\"outcome-name\">\n                                            {outcome.name}\n                                            {outcome.point && <span className=\"outcome-point\">({outcome.point})</span>}\n                                        </div>\n                                        <div className=\"outcome-odds\">\n                                            {outcome.price.toFixed(2)}\n                                        </div>\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n\n            {filteredMarkets.length === 0 && (\n                <div className=\"no-markets\">\n                    <p>No markets available for the selected filter.</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default MatchMarkets;\n","// Shared mapping for market keys to user-friendly titles\n// Covers common markets and period/half variants, including alternates\n\n// Normalize raw keys to canonical forms for lookup and dedupe\nexport const normalizeMarketKey = (keyRaw) => {\n  const key = (keyRaw || '').toLowerCase().trim();\n  if (!key) return '';\n  // Remove trailing exchange/lay suffixes\n  const base = key.replace(/_(lay|exchange)$/i, '');\n  // Map direct aliases to core keys\n  if (['h2h','moneyline','ml','h2h_lay','winner','match_winner','1x2'].includes(base)) return 'winner';\n  // Collapse single-side 1x2 variants into one Winner market\n  if (['home_win','away_win','draw','draw_result','homewin','awaywin'].includes(base)) return 'winner';\n  // Map basic totals aliases to unified totals\n  if (['total','total_goals','total_points','over','under'].includes(base)) return 'totals';\n  // Map handicap/spread aliases to unified spreads\n  if (['handicap','asian_handicap','point_spread','spread','line_spread','homehandicap','awayhandicap','handicapline','handicap_line'].includes(base)) return 'spreads';\n  if (base === 'outrights_lay') return 'outrights';\n  // Synonyms for goal/try scorer keys\n  if (base === 'player_first_goal_scorer') return 'player_goal_scorer_first';\n  if (base === 'player_last_goal_scorer') return 'player_goal_scorer_last';\n  return base;\n};\n\n// Primary titles mapping from provided specification\nconst MARKET_TITLE_MAP = {\n  // Core\n  winner: 'Winner',\n  spreads: 'Handicap',\n  totals: 'Totals',\n  outrights: 'Outrights',\n  outrights_lay: 'Outrights',\n\n  // Halves/Periods/Quarters (Moneyline)\n  h2h_h1: 'Moneyline 1st Half',\n  h2h_h2: 'Moneyline 2nd Half',\n  h2h_p1: 'Moneyline 1st Period',\n  h2h_p2: 'Moneyline 2nd Period',\n  h2h_p3: 'Moneyline 3rd Period',\n  h2h_3_way_q1: '1st Quarter 3 Way Result',\n  h2h_3_way_q2: '2nd Quarter 3 Way Result',\n  h2h_3_way_q3: '3rd Quarter 3 Way Result',\n  h2h_3_way_q4: '4th Quarter 3 Way Result',\n  h2h_3_way_h1: '1st Half 3 Way Result',\n  h2h_3_way_h2: '2nd Half 3 Way Result',\n  h2h_3_way_p1: '1st Period 3 Way Result',\n  h2h_3_way_p2: '2nd Period 3 Way Result',\n  h2h_3_way_p3: '3rd Period 3 Way Result',\n\n  // Baseball innings - Moneyline\n  h2h_1st_1_innings: 'Moneyline 1st Inning',\n  h2h_1st_3_innings: 'Moneyline 1st 3 Innings',\n  h2h_1st_5_innings: 'Moneyline 1st 5 Innings',\n  h2h_1st_7_innings: 'Moneyline 1st 7 Innings',\n  h2h_3_way_1st_1_innings: '3-way Moneyline 1st Inning',\n  h2h_3_way_1st_3_innings: '3-way Moneyline 1st 3 Innings',\n  h2h_3_way_1st_5_innings: '3-way Moneyline 1st 5 Innings',\n  h2h_3_way_1st_7_innings: '3-way Moneyline 1st 7 Innings',\n\n  // Spreads variants\n  spreads_q1: 'Spreads 1st Quarter',\n  spreads_q2: 'Spreads 2nd Quarter',\n  spreads_q3: 'Spreads 3rd Quarter',\n  spreads_q4: 'Spreads 4th Quarter',\n  spreads_h1: 'Spreads 1st Half',\n  spreads_h2: 'Spreads 2nd Half',\n  spreads_p1: 'Spreads 1st Period',\n  spreads_p2: 'Spreads 2nd Period',\n  spreads_p3: 'Spreads 3rd Period',\n  spreads_1st_1_innings: 'Spreads 1st Inning',\n  spreads_1st_3_innings: 'Spreads 1st 3 Innings',\n  spreads_1st_5_innings: 'Spreads 1st 5 Innings',\n  spreads_1st_7_innings: 'Spreads 1st 7 Innings',\n\n  alternate_spreads_1st_1_innings: 'Alternate Spreads 1st Inning',\n  alternate_spreads_1st_3_innings: 'Alternate Spreads 1st 3 Innings',\n  alternate_spreads_1st_5_innings: 'Alternate Spreads 1st 5 Innings',\n  alternate_spreads_1st_7_innings: 'Alternate Spreads 1st 7 Innings',\n  alternate_spreads_q1: 'Alternate Spreads 1st Quarter',\n  alternate_spreads_q2: 'Alternate Spreads 2nd Quarter',\n  alternate_spreads_q3: 'Alternate Spreads 3rd Quarter',\n  alternate_spreads_q4: 'Alternate Spreads 4th Quarter',\n  alternate_spreads_h1: 'Alternate Spreads 1st Half',\n  alternate_spreads_h2: 'Alternate Spreads 2nd Half',\n  alternate_spreads_p1: 'Alternate Spreads 1st Period',\n  alternate_spreads_p2: 'Alternate Spreads 2nd Period',\n  alternate_spreads_p3: 'Alternate Spreads 3rd Period',\n\n  // Totals variants\n  totals_q1: 'Over/Under 1st Quarter',\n  totals_q2: 'Over/Under 2nd Quarter',\n  totals_q3: 'Over/Under 3rd Quarter',\n  totals_q4: 'Over/Under 4th Quarter',\n  totals_h1: 'Over/Under 1st Half',\n  totals_h2: 'Over/Under 2nd Half',\n  totals_p1: 'Over/Under 1st Period',\n  totals_p2: 'Over/Under 2nd Period',\n  totals_p3: 'Over/Under 3rd Period',\n  totals_1st_1_innings: 'Over/Under 1st Inning',\n  totals_1st_3_innings: 'Over/Under 1st 3 Innings',\n  totals_1st_5_innings: 'Over/Under 1st 5 Innings',\n  totals_1st_7_innings: 'Over/Under 1st 7 Innings',\n\n  alternate_totals_1st_1_innings: 'Alternate Over/Under 1st Inning',\n  alternate_totals_1st_3_innings: 'Alternate Over/Under 1st 3 Innings',\n  alternate_totals_1st_5_innings: 'Alternate Over/Under 1st 5 Innings',\n  alternate_totals_1st_7_innings: 'Alternate Over/Under 1st 7 Innings',\n  alternate_totals_q1: 'Alternate Totals 1st Quarter',\n  alternate_totals_q2: 'Alternate Totals 2nd Quarter',\n  alternate_totals_q3: 'Alternate Totals 3rd Quarter',\n  alternate_totals_q4: 'Alternate Totals 4th Quarter',\n  alternate_totals_h1: 'Alternate Totals 1st Half',\n  alternate_totals_h2: 'Alternate Totals 2nd Half',\n  alternate_totals_p1: 'Alternate Totals 1st Period',\n  alternate_totals_p2: 'Alternate Totals 2nd Period',\n  alternate_totals_p3: 'Alternate Totals 3rd Period',\n\n  // Team totals\n  team_totals_h1: 'Team Totals 1st Half',\n  team_totals_h2: 'Team Totals 2nd Half',\n  team_totals_q1: 'Team Totals 1st Quarter',\n  team_totals_q2: 'Team Totals 2nd Quarter',\n  team_totals_q3: 'Team Totals 3rd Quarter',\n  team_totals_q4: 'Team Totals 4th Quarter',\n  team_totals_p1: 'Team Totals 1st Period',\n  team_totals_p2: 'Team Totals 2nd Period',\n  team_totals_p3: 'Team Totals 3rd Period',\n\n  alternate_team_totals_h1: 'Alternate Team Totals 1st Half',\n  alternate_team_totals_h2: 'Alternate Team Totals 2nd Half',\n  alternate_team_totals_q1: 'Alternate Team Totals 1st Quarter',\n  alternate_team_totals_q2: 'Alternate Team Totals 2nd Quarter',\n  alternate_team_totals_q3: 'Alternate Team Totals 3rd Quarter',\n  alternate_team_totals_q4: 'Alternate Team Totals 4th Quarter',\n  alternate_team_totals_p1: 'Alternate Team Totals 1st Period',\n  alternate_team_totals_p2: 'Alternate Team Totals 2nd Period',\n  alternate_team_totals_p3: 'Alternate Team Totals 3rd Period',\n\n  // Player props (NFL style and general)\n  player_assists: 'Player Assists (Over/Under)',\n  player_defensive_interceptions: 'Defensive Interceptions (Over/Under)',\n  player_field_goals: 'Field Goals (Over/Under)',\n  player_kicking_points: 'Kicking Points (Over/Under)',\n  player_pass_attempts: 'Pass Attempts (Over/Under)',\n  player_pass_completions: 'Pass Completions (Over/Under)',\n  player_pass_interceptions: 'Pass Intercepts (Over/Under)',\n  player_pass_longest_completion: 'Longest Pass Completion (Over/Under)',\n  player_pass_rush_yds: 'Pass + Rush Yards (Over/Under)',\n  player_pass_rush_reception_tds: 'Pass + Rush + Reception Touchdowns (Over/Under)',\n  player_pass_rush_reception_yds: 'Pass + Rush + Reception Yards (Over/Under)',\n  player_pass_tds: 'Pass Touchdowns (Over/Under)',\n  player_pass_yds: 'Pass Yards (Over/Under)',\n  player_pass_yds_q1: '1st Quarter Pass Yards (Over/Under)',\n  player_pats: 'Points After Touchdown (Over/Under)',\n  player_receptions: 'Receptions (Over/Under)',\n  player_reception_longest: 'Longest Reception (Over/Under)',\n  player_reception_tds: 'Reception Touchdowns (Over/Under)',\n  player_reception_yds: 'Reception Yards (Over/Under)',\n  player_rush_attempts: 'Rush Attempts (Over/Under)',\n  player_rush_longest: 'Longest Rush (Over/Under)',\n  player_rush_reception_tds: 'Rush + Reception Touchdowns (Over/Under)',\n  player_rush_reception_yds: 'Rush + Reception Yards (Over/Under)',\n  player_rush_tds: 'Rush Touchdowns (Over/Under)',\n  player_rush_yds: 'Rush Yards (Over/Under)',\n  player_sacks: 'Sacks (Over/Under)',\n  player_solo_tackles: 'Solo Tackles (Over/Under)',\n  player_tackles_assists: 'Tackles + Assists (Over/Under)',\n  player_tds_over: 'Touchdowns (Over only)',\n  player_1st_td: '1st Touchdown Scorer (Yes/No)',\n  player_anytime_td: 'Anytime Touchdown Scorer (Yes/No)',\n  player_last_td: 'Last Touchdown Scorer (Yes/No)',\n};\n\n// Additional alternates and extended props per request\nObject.assign(MARKET_TITLE_MAP, {\n  // NFL alternates\n  player_field_goals_alternate: 'Alternate Field Goals (Over/Under)',\n  player_kicking_points_alternate: 'Alternate Kicking Points (Over/Under)',\n  player_pass_attempts_alternate: 'Alternate Pass Attempts (Over/Under)',\n  player_pass_completions_alternate: 'Alternate Pass Completions (Over/Under)',\n  player_pass_interceptions_alternate: 'Alternate Pass Interceptions (Over/Under)',\n  player_pass_longest_completion_alternate: 'Alternate Longest Pass Completion (Over/Under)',\n  player_pass_rush_yds_alternate: 'Alternate Pass + Rush Yards (Over/Under)',\n  player_pass_rush_reception_tds_alternate: 'Alternate Pass + Rush + Reception Touchdowns (Over/Under)',\n  player_pass_rush_reception_yds_alternate: 'Alternate Pass + Rush + Reception Yards (Over/Under)',\n  player_pass_tds_alternate: 'Alternate Pass Touchdowns (Over/Under)',\n  player_pass_yds_alternate: 'Alternate Pass Yards (Over/Under)',\n  player_pats_alternate: 'Alternate Points After Touchdown (Over/Under)',\n  player_receptions_alternate: 'Alternate Receptions (Over/Under)',\n  player_reception_longest_alternate: 'Alternate Longest Reception (Over/Under)',\n  player_reception_tds_alternate: 'Alternate Reception Touchdowns (Over/Under)',\n  player_reception_yds_alternate: 'Alternate Reception Yards (Over/Under)',\n  player_rush_attempts_alternate: 'Alternate Rush Attempts (Over/Under)',\n  player_rush_longest_alternate: 'Alternate Longest Rush (Over/Under)',\n  player_rush_reception_tds_alternate: 'Alternate Rush + Reception Touchdowns (Over/Under)',\n  player_rush_reception_yds_alternate: 'Alternate Rush + Reception Yards (Over/Under)',\n  player_rush_tds_alternate: 'Alternate Rush Touchdowns (Over/Under)',\n  player_rush_yds_alternate: 'Alternate Rush Yards (Over/Under)',\n  player_sacks_alternate: 'Alternate Sacks (Over/Under)',\n  player_solo_tackles_alternate: 'Alternate Solo Tackles (Over/Under)',\n  player_tackles_assists_alternate: 'Alternate Tackles + Assists (Over/Under)',\n\n  // Basketball core\n  player_points: 'Points (Over/Under)',\n  player_points_q1: '1st Quarter Points (Over/Under)',\n  player_rebounds: 'Rebounds (Over/Under)',\n  player_rebounds_q1: '1st Quarter Rebounds (Over/Under)',\n  player_assists_q1: '1st Quarter Assists (Over/Under)',\n  player_threes: 'Threes (Over/Under)',\n  player_blocks: 'Blocks (Over/Under)',\n  player_steals: 'Steals (Over/Under)',\n  player_blocks_steals: 'Blocks + Steals (Over/Under)',\n  player_turnovers: 'Turnovers (Over/Under)',\n  player_points_rebounds_assists: 'Points + Rebounds + Assists (Over/Under)',\n  player_points_rebounds: 'Points + Rebounds (Over/Under)',\n  player_points_assists: 'Points + Assists (Over/Under)',\n  player_rebounds_assists: 'Rebounds + Assists (Over/Under)',\n  player_field_goals: 'Field Goals (Over/Under)',\n  player_frees_made: 'Frees made (Over/Under)',\n  player_frees_attempts: 'Frees attempted (Over/Under)',\n  player_first_basket: 'First Basket Scorer (Yes/No)',\n  player_first_team_basket: 'First Basket Scorer on Team (Yes/No)',\n  player_double_double: 'Double Double (Yes/No)',\n  player_triple_double: 'Triple Double (Yes/No)',\n  player_method_of_first_basket: 'Method of First Basket (Various)',\n  // Basketball alternates\n  player_points_alternate: 'Alternate Points (Over/Under)',\n  player_rebounds_alternate: 'Alternate Rebounds (Over/Under)',\n  player_assists_alternate: 'Alternate Assists (Over/Under)',\n  player_blocks_alternate: 'Alternate Blocks (Over/Under)',\n  player_steals_alternate: 'Alternate Steals (Over/Under)',\n  player_turnovers_alternate: 'Alternate Turnovers (Over/Under)',\n  player_threes_alternate: 'Alternate Threes (Over/Under)',\n  player_points_assists_alternate: 'Alternate Points + Assists (Over/Under)',\n  player_points_rebounds_alternate: 'Alternate Points + Rebounds (Over/Under)',\n  player_rebounds_assists_alternate: 'Alternate Rebounds + Assists (Over/Under)',\n  player_points_rebounds_assists_alternate: 'Alternate Points + Rebounds + Assists (Over/Under)',\n\n  // Baseball batter props\n  batter_home_runs: 'Batter home runs (Over/Under)',\n  batter_first_home_run: 'Batter first home run (Yes/No)',\n  batter_hits: 'Batter hits (Over/Under)',\n  batter_total_bases: 'Batter total bases (Over/Under)',\n  batter_rbis: 'Batter RBIs (Over/Under)',\n  batter_runs_scored: 'Batter runs scored (Over/Under)',\n  batter_hits_runs_rbis: 'Batter hits + runs + RBIs (Over/Under)',\n  batter_singles: 'Batter singles (Over/Under)',\n  batter_doubles: 'Batter doubles (Over/Under)',\n  batter_triples: 'Batter triples (Over/Under)',\n  batter_walks: 'Batter walks (Over/Under)',\n  batter_strikeouts: 'Batter strikeouts (Over/Under)',\n  batter_stolen_bases: 'Batter stolen bases (Over/Under)',\n  // Baseball pitcher props\n  pitcher_strikeouts: 'Pitcher strikeouts (Over/Under)',\n  pitcher_record_a_win: 'Pitcher to record a win (Yes/No)',\n  pitcher_hits_allowed: 'Pitcher hits allowed (Over/Under)',\n  pitcher_walks: 'Pitcher walks (Over/Under)',\n  pitcher_earned_runs: 'Pitcher earned runs (Over/Under)',\n  pitcher_outs: 'Pitcher outs (Over/Under)',\n  // Baseball alternates\n  batter_total_bases_alternate: 'Alternate batter total bases (Over/Under)',\n  batter_home_runs_alternate: 'Alternate batter home runs (Over/Under)',\n  batter_hits_alternate: 'Alternate batter hits (Over/Under)',\n  batter_rbis_alternate: 'Alternate batter RBIs (Over/Under)',\n  batter_walks_alternate: 'Alternate batter walks (Over/Under)',\n  batter_strikeouts_alternate: 'Alternate batter strikeouts (Over/Under)',\n  batter_runs_scored_alternate: 'Alternate batter runs scored (Over/Under)',\n  batter_singles_alternate: 'Alternate batter singles (Over/Under)',\n  batter_doubles_alternate: 'Alternate batter doubles (Over/Under)',\n  batter_triples_alternate: 'Alternate batter triples (Over/Under)',\n  pitcher_hits_allowed_alternate: 'Alternate pitcher hits allowed (Over/Under)',\n  pitcher_walks_alternate: 'Alternate pitcher walks allowed (Over/Under)',\n  pitcher_strikeouts_alternate: 'Alternate pitcher strikeouts (Over/Under)',\n\n  // Hockey props\n  player_power_play_points: 'Power play points (Over/Under)',\n  player_blocked_shots: 'Blocked shots (Over/Under)',\n  player_shots_on_goal: 'Shots on goal (Over/Under)',\n  player_goals: 'Goals (Over/Under)',\n  player_total_saves: 'Total saves (Over/Under)',\n\n  // Hockey goal scorers\n  player_goal_scorer_first: 'First Goal Scorer (Yes/No)',\n  player_goal_scorer_last: 'Last Goal Scorer (Yes/No)',\n  player_goal_scorer_anytime: 'Anytime Goal Scorer (Yes/No)',\n\n  // Hockey alternates\n  player_power_play_points_alternate: 'Alternate Power Play Points (Over/Under)',\n  player_goals_alternate: 'Alternate Goals (Over/Under)',\n  player_shots_on_goal_alternate: 'Alternate Shots on Goal (Over/Under)',\n  player_blocked_shots_alternate: 'Alternate Blocked Shots (Over/Under)',\n  player_total_saves_alternate: 'Alternate Total Saves (Over/Under)',\n\n  // AFL props\n  player_disposals: 'Disposals (Over/Under)',\n  player_disposals_over: 'Disposals (Over only)',\n  player_goals_scored_over: 'Goals scored (Over only)',\n  player_marks_over: 'Marks (Over only)',\n  player_marks_most: 'Most Marks (Yes/No)',\n  player_tackles_over: 'Tackles (Over only)',\n  player_tackles_most: 'Tackles (Yes/No)',\n  player_afl_fantasy_points: 'AFL Fantasy Points (Over/Under)',\n  player_afl_fantasy_points_over: 'AFL Fantasy Points (Over only)',\n  player_afl_fantasy_points_most: 'Most AFL Fantasy Points (Yes/No)',\n\n  // Rugby league/union try scorers\n  player_try_scorer_first: 'First Try Scorer (Yes/No)',\n  player_try_scorer_last: 'Last Try Scorer (Yes/No)',\n  player_try_scorer_anytime: 'Anytime Try Scorer (Yes/No)',\n  player_try_scorer_over: 'Tries Scored (Over only)',\n\n  // Soccer player events\n  player_to_receive_card: 'Player to receive a card (Yes/No)',\n  player_to_receive_red_card: 'Player to receive a red card (Yes/No)',\n  player_shots_on_target: 'Player Shots on Target (Over/Under)',\n  player_shots: 'Player Shots (Over/Under)',\n\n  // Team corners/cards markets\n  alternate_spreads_corners: 'Handicap Corners',\n  alternate_totals_corners: 'Total Corners (Over/Under)',\n  alternate_spreads_cards: 'Handicap Cards / Bookings',\n  alternate_totals_cards: 'Total Cards / Bookings (Over/Under)',\n\n  // Soccer match market\n  double_chance: 'Double Chance'\n});\n\nconst humanize = (key) => (key || '').replace(/_/g, ' ').replace(/\\b\\w/g, (l) => l.toUpperCase());\n\nexport const getMarketTitle = (keyRaw) => {\n  const norm = normalizeMarketKey(keyRaw);\n  if (!norm) return '';\n  return MARKET_TITLE_MAP[norm] || humanize(norm);\n};\n\nexport default getMarketTitle;"],"names":["MatchMarkets","matchId","useParams","navigate","useNavigate","location","useLocation","dispatch","useDispatch","match","setMatch","useState","loading","setLoading","error","setError","selectedMarket","setSelectedMarket","expandedByKey","setExpandedByKey","titleForKey","normKey","getMarketTitle","useEffect","console","log","async","matchData","apiService","getMatchMarkets","data","processedMatchData","_objectSpread","markets","Array","isArray","length","mergeAndNormalizeMarkets","bookmakers","aggregated","Map","forEach","bookmaker","bookmakerIndex","concat","key","title","map","m","market","marketIndex","normalizeMarketKey","marketTitle","existing","get","incomingOutcomes","outcomes","outcome","name","price","point","bySig","o","_o$point","sig","toLowerCase","has","prev","set","from","values","normalizeOutcomeLabels","message","fetchMatch","search","_o$point2","homeName","homeTeam","home_team","awayName","awayTeam","away_team","includes","byName","replace","isOver","test","isUnder","replaced","display","c","toUpperCase","n","teamCtx","startsWith","base","filter","normalized","raw","isHome","isAway","signPoint","push","label","bySide","lower","Object","keys","initial","_jsxs","className","children","_jsx","onClick","processedMarketKeys","Set","add","retryFetch","style","marginLeft","backgroundColor","marginTop","padding","color","border","borderRadius","cursor","filteredMarkets","some","sport","sport_title","country","subcategory","league","competition","tournament","norm","s","toString","trim","parts","Boolean","finalParts","p","idx","find","join","startTime","commence_time","Date","toLocaleString","weekday","year","month","day","hour","minute","htmlFor","id","value","onChange","e","target","validOutcomes","toggleMarket","alignItems","justifyContent","width","margin","transition","transform","index","addToBetslip","marketKey","bet","_id","marketDisplay","selection","odds","stake","potentialWin","type","payload","toFixed","keyRaw","MARKET_TITLE_MAP","winner","spreads","totals","outrights","outrights_lay","h2h_h1","h2h_h2","h2h_p1","h2h_p2","h2h_p3","h2h_3_way_q1","h2h_3_way_q2","h2h_3_way_q3","h2h_3_way_q4","h2h_3_way_h1","h2h_3_way_h2","h2h_3_way_p1","h2h_3_way_p2","h2h_3_way_p3","h2h_1st_1_innings","h2h_1st_3_innings","h2h_1st_5_innings","h2h_1st_7_innings","h2h_3_way_1st_1_innings","h2h_3_way_1st_3_innings","h2h_3_way_1st_5_innings","h2h_3_way_1st_7_innings","spreads_q1","spreads_q2","spreads_q3","spreads_q4","spreads_h1","spreads_h2","spreads_p1","spreads_p2","spreads_p3","spreads_1st_1_innings","spreads_1st_3_innings","spreads_1st_5_innings","spreads_1st_7_innings","alternate_spreads_1st_1_innings","alternate_spreads_1st_3_innings","alternate_spreads_1st_5_innings","alternate_spreads_1st_7_innings","alternate_spreads_q1","alternate_spreads_q2","alternate_spreads_q3","alternate_spreads_q4","alternate_spreads_h1","alternate_spreads_h2","alternate_spreads_p1","alternate_spreads_p2","alternate_spreads_p3","totals_q1","totals_q2","totals_q3","totals_q4","totals_h1","totals_h2","totals_p1","totals_p2","totals_p3","totals_1st_1_innings","totals_1st_3_innings","totals_1st_5_innings","totals_1st_7_innings","alternate_totals_1st_1_innings","alternate_totals_1st_3_innings","alternate_totals_1st_5_innings","alternate_totals_1st_7_innings","alternate_totals_q1","alternate_totals_q2","alternate_totals_q3","alternate_totals_q4","alternate_totals_h1","alternate_totals_h2","alternate_totals_p1","alternate_totals_p2","alternate_totals_p3","team_totals_h1","team_totals_h2","team_totals_q1","team_totals_q2","team_totals_q3","team_totals_q4","team_totals_p1","team_totals_p2","team_totals_p3","alternate_team_totals_h1","alternate_team_totals_h2","alternate_team_totals_q1","alternate_team_totals_q2","alternate_team_totals_q3","alternate_team_totals_q4","alternate_team_totals_p1","alternate_team_totals_p2","alternate_team_totals_p3","player_assists","player_defensive_interceptions","player_field_goals","player_kicking_points","player_pass_attempts","player_pass_completions","player_pass_interceptions","player_pass_longest_completion","player_pass_rush_yds","player_pass_rush_reception_tds","player_pass_rush_reception_yds","player_pass_tds","player_pass_yds","player_pass_yds_q1","player_pats","player_receptions","player_reception_longest","player_reception_tds","player_reception_yds","player_rush_attempts","player_rush_longest","player_rush_reception_tds","player_rush_reception_yds","player_rush_tds","player_rush_yds","player_sacks","player_solo_tackles","player_tackles_assists","player_tds_over","player_1st_td","player_anytime_td","player_last_td","assign","player_field_goals_alternate","player_kicking_points_alternate","player_pass_attempts_alternate","player_pass_completions_alternate","player_pass_interceptions_alternate","player_pass_longest_completion_alternate","player_pass_rush_yds_alternate","player_pass_rush_reception_tds_alternate","player_pass_rush_reception_yds_alternate","player_pass_tds_alternate","player_pass_yds_alternate","player_pats_alternate","player_receptions_alternate","player_reception_longest_alternate","player_reception_tds_alternate","player_reception_yds_alternate","player_rush_attempts_alternate","player_rush_longest_alternate","player_rush_reception_tds_alternate","player_rush_reception_yds_alternate","player_rush_tds_alternate","player_rush_yds_alternate","player_sacks_alternate","player_solo_tackles_alternate","player_tackles_assists_alternate","player_points","player_points_q1","player_rebounds","player_rebounds_q1","player_assists_q1","player_threes","player_blocks","player_steals","player_blocks_steals","player_turnovers","player_points_rebounds_assists","player_points_rebounds","player_points_assists","player_rebounds_assists","player_frees_made","player_frees_attempts","player_first_basket","player_first_team_basket","player_double_double","player_triple_double","player_method_of_first_basket","player_points_alternate","player_rebounds_alternate","player_assists_alternate","player_blocks_alternate","player_steals_alternate","player_turnovers_alternate","player_threes_alternate","player_points_assists_alternate","player_points_rebounds_alternate","player_rebounds_assists_alternate","player_points_rebounds_assists_alternate","batter_home_runs","batter_first_home_run","batter_hits","batter_total_bases","batter_rbis","batter_runs_scored","batter_hits_runs_rbis","batter_singles","batter_doubles","batter_triples","batter_walks","batter_strikeouts","batter_stolen_bases","pitcher_strikeouts","pitcher_record_a_win","pitcher_hits_allowed","pitcher_walks","pitcher_earned_runs","pitcher_outs","batter_total_bases_alternate","batter_home_runs_alternate","batter_hits_alternate","batter_rbis_alternate","batter_walks_alternate","batter_strikeouts_alternate","batter_runs_scored_alternate","batter_singles_alternate","batter_doubles_alternate","batter_triples_alternate","pitcher_hits_allowed_alternate","pitcher_walks_alternate","pitcher_strikeouts_alternate","player_power_play_points","player_blocked_shots","player_shots_on_goal","player_goals","player_total_saves","player_goal_scorer_first","player_goal_scorer_last","player_goal_scorer_anytime","player_power_play_points_alternate","player_goals_alternate","player_shots_on_goal_alternate","player_blocked_shots_alternate","player_total_saves_alternate","player_disposals","player_disposals_over","player_goals_scored_over","player_marks_over","player_marks_most","player_tackles_over","player_tackles_most","player_afl_fantasy_points","player_afl_fantasy_points_over","player_afl_fantasy_points_most","player_try_scorer_first","player_try_scorer_last","player_try_scorer_anytime","player_try_scorer_over","player_to_receive_card","player_to_receive_red_card","player_shots_on_target","player_shots","alternate_spreads_corners","alternate_totals_corners","alternate_spreads_cards","alternate_totals_cards","double_chance","l"],"sourceRoot":""}