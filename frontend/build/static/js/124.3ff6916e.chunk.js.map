{"version":3,"file":"static/js/124.3ff6916e.chunk.js","mappings":"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","sources":["utils/cryptoUri.js","components/NowPaymentsDeposit.js","pages/Account.js"],"sourcesContent":["// Web3-friendly QR payment URI builder\n// Supports EIP-681 for ETH/ERC-20 and common schemes for major chains.\nimport { ethers } from 'ethers';\nimport QRCode from 'qrcode';\n\n// Convert decimal amount to integer units given token decimals\nfunction toUnit(amount, decimals) {\n  const [whole = '0', frac = ''] = String(amount ?? '0').split('.');\n  const fracPadded = (frac + '0'.repeat(decimals)).slice(0, decimals);\n  const normalized = `${whole}${fracPadded}`.replace(/^0+/, '') || '0';\n  return normalized;\n}\n\n// Attempt to checksum EVM addresses where applicable\nfunction checksumIfEvm(address) {\n  try {\n    return ethers.utils.getAddress(address);\n  } catch {\n    return address; // Non-EVM or invalid, return as-is\n  }\n}\n\n// Build standardized crypto payment URIs\nexport function buildPaymentUri({ currency, address, amount, memoTag }) {\n  const cur = String(currency || '').toUpperCase();\n  const addr = checksumIfEvm(String(address || ''));\n\n  if (!cur || !addr) return '';\n\n  // EVM chains and ERC-20 via EIP-681\n  if (cur === 'ETH') {\n    const wei = toUnit(amount, 18);\n    return `ethereum:${addr}@1?value=${wei}`;\n  }\n  if (cur === 'USDT') {\n    const USDT_CONTRACT = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n    const units = toUnit(amount, 6);\n    return `ethereum:${USDT_CONTRACT}@1/transfer?address=${addr}&uint256=${units}`;\n  }\n  if (cur === 'USDC') {\n    const USDC_CONTRACT = '0xA0b86991c6218b36c1d19D4a2e9eB0cE3606eB48';\n    const units = toUnit(amount, 6);\n    return `ethereum:${USDC_CONTRACT}@1/transfer?address=${addr}&uint256=${units}`;\n  }\n  if (cur === 'DAI') {\n    const DAI_CONTRACT = '0x6B175474E89094C44Da98b954EedeAC495271d0F';\n    const units = toUnit(amount, 18);\n    return `ethereum:${DAI_CONTRACT}@1/transfer?address=${addr}&uint256=${units}`;\n  }\n  if (cur === 'LINK') {\n    const LINK_CONTRACT = '0x514910771AF9Ca656af840dff83E8264EcF986CA';\n    const units = toUnit(amount, 18);\n    return `ethereum:${LINK_CONTRACT}@1/transfer?address=${addr}&uint256=${units}`;\n  }\n  if (cur === 'MATIC') {\n    const wei = toUnit(amount, 18);\n    return `ethereum:${addr}@137?value=${wei}`; // Polygon\n  }\n  if (cur === 'BNB') {\n    const wei = toUnit(amount, 18);\n    return `ethereum:${addr}@56?value=${wei}`; // BSC\n  }\n  if (cur === 'AVAX') {\n    const wei = toUnit(amount, 18);\n    return `ethereum:${addr}@43114?value=${wei}`; // Avalanche C-Chain\n  }\n\n  // Bitcoin-family & other non-EVM chains\n  if (cur === 'BTC') {\n    return `bitcoin:${address}?amount=${amount}`; // BIP-21\n  }\n  if (cur === 'LTC') {\n    return `litecoin:${address}?amount=${amount}`;\n  }\n  if (cur === 'DASH') {\n    return `dash:${address}?amount=${amount}`;\n  }\n  if (cur === 'ZEC') {\n    return `zcash:${address}?amount=${amount}`;\n  }\n  if (cur === 'DOGE') {\n    return `dogecoin:${address}?amount=${amount}`;\n  }\n  if (cur === 'TRX') {\n    return `tron:${address}?amount=${amount}`;\n  }\n  if (cur === 'ADA') {\n    return `cardano:${address}?amount=${amount}`;\n  }\n  if (cur === 'SOL') {\n    return `solana:${address}?amount=${amount}`;\n  }\n  if (cur === 'DOT') {\n    return `polkadot:${address}?amount=${amount}`;\n  }\n  if (cur === 'XMR') {\n    return `monero:${address}?amount=${amount}`;\n  }\n  if (cur === 'XLM') {\n    // Stellar SEP-7 style\n    return `web+stellar:pay?destination=${address}&amount=${amount}`;\n  }\n  if (cur === 'XRP') {\n    const base = `ripple:${address}?amount=${amount}`;\n    return memoTag ? `${base}&dt=${memoTag}` : base; // destination tag\n  }\n\n  // Fallback to scheme by currency\n  return `${cur.toLowerCase()}:${address}?amount=${amount}`;\n}\n\n// QR Code generation functions (consolidated from cryptoQr.js)\nexport function generateCryptoQR(payAddress, payCurrency, amount = null, extraId = null) {\n  return buildPaymentUri({\n    currency: payCurrency,\n    address: payAddress,\n    amount: amount,\n    memoTag: extraId\n  });\n}\n\nexport async function generateCryptoQrDataUrl(uriOrParams, options = { errorCorrectionLevel: 'H' }) {\n  const uri = typeof uriOrParams === 'string'\n    ? uriOrParams\n    : generateCryptoQR(\n        uriOrParams.payAddress,\n        uriOrParams.payCurrency,\n        uriOrParams.amount,\n        uriOrParams.extraId\n      );\n  \n  try {\n    return await QRCode.toDataURL(uri, options);\n  } catch (error) {\n    console.error('QR Code generation failed:', error);\n    throw error;\n  }\n}\n\nexport default buildPaymentUri;","import React, { useState } from 'react';\r\n\r\nimport apiService from '../services/api';\r\nimport QRCode from 'qrcode.react';\r\nimport buildPaymentUri, { generateCryptoQR } from '../utils/cryptoUri';\r\nimport './Deposit.css';\r\n\r\nconst NowPaymentsDeposit = () => {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  \r\n  const [amount, setAmount] = useState('');\r\n  const [selectedCurrency, setSelectedCurrency] = useState('BTC');\r\n  const [description, setDescription] = useState('');\r\n  const [payment, setPayment] = useState(null);\r\n  const [paymentStatus, setPaymentStatus] = useState('');\r\n  \r\n  const popularCurrencies = [\r\n    { code: 'BTC', name: 'Bitcoin', icon: '₿' },\r\n    { code: 'ETH', name: 'Ethereum', icon: 'Ξ' },\r\n    { code: 'USDT', name: 'Tether (ERC20)', icon: '₮' },\r\n    { code: 'USDTTRC20', name: 'Tether (TRC20)', icon: '₮' },\r\n    { code: 'USDC', name: 'USD Coin', icon: '＄' },\r\n    { code: 'LTC', name: 'Litecoin', icon: 'Ł' },\r\n    { code: 'XRP', name: 'Ripple', icon: '✕' },\r\n    { code: 'DOGE', name: 'Dogecoin', icon: 'Ð' },\r\n    { code: 'TRX', name: 'Tron', icon: 'TRX' },\r\n    { code: 'ADA', name: 'Cardano', icon: 'ADA' },\r\n    { code: 'SOL', name: 'Solana', icon: '◎' },\r\n    { code: 'MATIC', name: 'Polygon', icon: 'M' },\r\n    { code: 'BNB', name: 'BNB (BSC)', icon: 'BNB' },\r\n    { code: 'DOT', name: 'Polkadot', icon: 'DOT' },\r\n    { code: 'DAI', name: 'Dai', icon: '◈' },\r\n    { code: 'LINK', name: 'Chainlink', icon: '🔗' },\r\n    { code: 'AVAX', name: 'Avalanche', icon: 'AVAX' },\r\n    { code: 'XMR', name: 'Monero', icon: 'XMR' },\r\n    { code: 'XLM', name: 'Stellar', icon: '★' },\r\n    { code: 'DASH', name: 'Dash', icon: 'D' },\r\n    { code: 'ZEC', name: 'Zcash', icon: 'Z' },\r\n  ];\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!amount || parseFloat(amount) < 50) {\r\n      setError('Minimum deposit amount is $50');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    // Retry logic with exponential backoff\r\n    const maxRetries = 3;\r\n    let retryCount = 0;\r\n    \r\n    const attemptPayment = async () => {\r\n      try {\r\n        // Use the direct payment creation endpoint\r\n        const response = await apiService.createPayment({\r\n          amount: parseFloat(amount),\r\n          currency: selectedCurrency,\r\n          description: description || `Crypto deposit via ${selectedCurrency}`\r\n        });\r\n        \r\n        return response;\r\n      } catch (error) {\r\n        // Check if it's a 429 error and we should retry\r\n        if (error.response?.status === 429 && retryCount < maxRetries) {\r\n          retryCount++;\r\n          const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff: 2s, 4s, 8s\r\n          console.log(`Rate limited, retrying in ${delay}ms (attempt ${retryCount}/${maxRetries})`);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n          return attemptPayment();\r\n        }\r\n        throw error;\r\n      }\r\n    };\r\n\r\n    try {\r\n      const response = await attemptPayment();\r\n\r\n      console.log('Payment response:', response);\r\n      \r\n      if (response.data && response.data.success && response.data.payment) {\r\n        setPayment(response.data.payment);\r\n        setPaymentStatus(response.data.payment.paymentStatus);\r\n        setSuccess(true);\r\n        \r\n        // Show special message for mock payments or manual processing\r\n        if (response.data.payment.isMockPayment) {\r\n          setError('Demo mode: This is a simulated payment for testing purposes. In production, you would send the exact amount to the provided address.');\r\n        } else if (response.data.payment.isManualProcessing) {\r\n          setError('Payment service temporarily unavailable. Your request has been recorded and will be processed manually. Please contact support for assistance.');\r\n        }\r\n      } else {\r\n        const errorMessage = response.data?.details || response.data?.error || 'Failed to create payment';\r\n        setError(`${errorMessage}${response.data?.suggestion ? ` ${response.data.suggestion}` : ''}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Payment creation error:', error);\r\n      \r\n      // Check if it's a rate limiting error\r\n      if (error.response?.status === 429) {\r\n        setError('Payment service is temporarily busy. Please wait a moment and try again. The system will automatically retry for you.');\r\n      } else if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error') || !error.response) {\r\n        setError('Unable to connect to payment service. Please check that the server is running and try again.');\r\n      } else {\r\n        const errorMessage = error.response?.data?.details || error.response?.data?.error || error.message || 'Failed to create payment';\r\n        setError(`${errorMessage}${error.response?.data?.suggestion ? ` ${error.response.data.suggestion}` : ''}`);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'waiting': return '#ffc107';\r\n      case 'confirming': return '#17a2b8';\r\n      case 'confirmed': return '#28a745';\r\n      case 'finished': return '#28a745';\r\n      case 'failed': case 'expired': return '#dc3545';\r\n      default: return '#6c757d';\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status) => {\r\n    switch (status) {\r\n      case 'waiting': return 'Waiting for payment';\r\n      case 'confirming': return 'Payment confirming';\r\n      case 'confirmed': return 'Payment confirmed';\r\n      case 'finished': return 'Payment completed';\r\n      case 'failed': return 'Payment failed';\r\n      case 'expired': return 'Payment expired';\r\n      default: return 'Unknown status';\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = (text, buttonElement) => {\r\n    navigator.clipboard.writeText(text).then(() => {\r\n      // Add visual feedback\r\n      if (buttonElement) {\r\n        buttonElement.classList.add('copied');\r\n        buttonElement.textContent = '✓ Copied!';\r\n        setTimeout(() => {\r\n          buttonElement.classList.remove('copied');\r\n          buttonElement.textContent = 'Copy';\r\n        }, 2000);\r\n      }\r\n    }).catch(err => {\r\n      console.error('Failed to copy: ', err);\r\n    });\r\n  };\r\n\r\n  // Generate a Web3-standard payment URI for QR (EIP-681 / BIP-21 etc.)\r\n\r\n  if (success && payment) {\r\n    return (\r\n      <div className=\"deposit-section\">\r\n        <div className=\"payment-success\">\r\n          <h2>Payment Request Created</h2>\r\n          \r\n          <div className=\"payment-details\">\r\n            <div className=\"status-indicator\">\r\n              <div className=\"status-dot\" style={{ backgroundColor: getStatusColor(paymentStatus) }}></div>\r\n              <span>{getStatusText(paymentStatus)}</span>\r\n            </div>\r\n\r\n            <div className=\"payment-info\">\r\n              <h3>Payment Details</h3>\r\n              <div className=\"info-grid\">\r\n                <div className=\"info-item\">\r\n                  <label>Amount:</label>\r\n                  <span>${payment.priceAmount} USD</span>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                  <label>Crypto Amount:</label>\r\n                  <span>{payment.payAmount} {payment.payCurrency}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"wallet-section\">\r\n              <h3>Send Payment to:</h3>\r\n              <div className=\"wallet-address-container\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={payment.payAddress}\r\n                  readOnly\r\n                  className=\"wallet-address-input\"\r\n                />\r\n                <button onClick={(e) => copyToClipboard(payment.payAddress, e.target)} className=\"copy-btn\">\r\n                  Copy\r\n                </button>\r\n              </div>\r\n              \r\n              {payment.payinExtraId && (\r\n                <div className=\"extra-id-container\">\r\n                  <label>Memo/Tag (Required):</label>\r\n                  <div className=\"wallet-address-container\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={payment.payinExtraId}\r\n                      readOnly\r\n                      className=\"wallet-address-input\"\r\n                    />\r\n                    <button onClick={(e) => copyToClipboard(payment.payinExtraId, e.target)} className=\"copy-btn\">\r\n                      Copy\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"qr-code-container\">\r\n                <QRCode\r\n                  value={(['BTC','ETH','XRP','XLM','USDT'].includes(String(payment.payCurrency || '').toUpperCase()))\r\n                    ? generateCryptoQR(payment.payAddress, payment.payCurrency, payment.payAmount, payment.payinExtraId)\r\n                    : buildPaymentUri({\r\n                        currency: payment.payCurrency,\r\n                        address: payment.payAddress,\r\n                        amount: payment.payAmount,\r\n                        memoTag: payment.payinExtraId,\r\n                      })\r\n                  }\r\n                  size={220}\r\n                  level=\"H\"\r\n                  includeMargin={true}\r\n                  renderAs=\"svg\"\r\n                />\r\n                <div className=\"qr-code-info\">\r\n                  <p>Scan QR Code to Pay</p>\r\n                  <p>Send exactly {payment.payAmount} {payment.payCurrency}</p>\r\n                  <div className=\"qr-code-scan-instruction\">\r\n                    Point your crypto wallet camera at this QR code\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"payment-actions\">\r\n              <button \r\n                onClick={() => {\r\n                  setPayment(null);\r\n                  setSuccess(false);\r\n                  setAmount('');\r\n                  setDescription('');\r\n                }}\r\n                className=\"new-payment-btn\"\r\n              >\r\n                Create New Payment\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"deposit-section\">\r\n      <h2>Cryptocurrency Deposit</h2>\r\n      \r\n      <form onSubmit={handleSubmit} className=\"crypto-deposit-form\">\r\n        <div className=\"form-group\">\r\n          <label>Select Cryptocurrency</label>\r\n          <select \r\n            value={selectedCurrency} \r\n            onChange={(e) => setSelectedCurrency(e.target.value)}\r\n            className=\"crypto-select\"\r\n          >\r\n            {popularCurrencies.map(crypto => (\r\n              <option key={crypto.code} value={crypto.code}>\r\n                {crypto.icon} {crypto.name} ({crypto.code})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Deposit Amount (USD)</label>\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            placeholder=\"Enter amount in USD\"\r\n            min=\"10\"\r\n            step=\"0.01\"\r\n            required\r\n            disabled={loading}\r\n          />\r\n          <small>Minimum deposit: $50 USD</small>\r\n        </div>\r\n\r\n       \r\n\r\n        {error && (\r\n          <div className=\"error-message\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        <button \r\n          type=\"submit\" \r\n          className=\"deposit-btn\"\r\n          disabled={loading || !amount || parseFloat(amount) < 10}\r\n        >\r\n          {loading ? 'Creating Payment...' : 'Create Payment'}\r\n        </button>\r\n      </form>\r\n\r\n      <div className=\"deposit-info\">\r\n        <h3>How it works:</h3>\r\n        <ul>\r\n          <li>Enter the amount you want to deposit in USD</li>\r\n          <li>Select your preferred cryptocurrency</li>\r\n          <li>payment address will be generated</li>\r\n          <li>Send the exact crypto amount to the provided address</li>\r\n          <li>Your account will be credited once the payment is confirmed</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NowPaymentsDeposit;","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport apiService from '../services/api';\nimport { setUser } from '../store/slices/authSlice';\n\nimport NowPaymentsDeposit from '../components/NowPaymentsDeposit';\nimport '../components/Deposit.css';\n\nconst Account = () => {\n  const { user } = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n\n  const [activeTab, setActiveTab] = useState('profile');\n  const [profileData, setProfileData] = useState({\n    username: '',\n    email: '',\n    firstName: '',\n    lastName: '',\n    phoneNumber: '',\n    address: '',\n    balance: 0,\n    lifetimeWinnings: 0,\n    createdAt: ''\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n\n\n\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [selectedCrypto, setSelectedCrypto] = useState('bitcoin');\n  const [walletAddress, setWalletAddress] = useState('');\n\n  useEffect(() => {\n    // Hydrate Redux user from localStorage if missing\n    const localUser = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n    if (!user && localUser && localUser.token && localUser.user) {\n      dispatch(setUser(localUser.user));\n    }\n\n    const fetchProfile = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        console.log('Fetching user profile...');\n        const response = await apiService.getUserProfile();\n        console.log('Profile API response:', response);\n    \n        // Handle different response structures\n        let userData;\n        if (response.data) {\n          userData = response.data.user || response.data;\n        } else {\n          userData = response;\n        }\n        \n        console.log('Processed user data:', userData);\n        \n        if (userData) {\n          setProfileData({\n            username: userData.username || '',\n            email: userData.email || '',\n            firstName: userData.firstName || '',\n            lastName: userData.lastName || '',\n            phoneNumber: userData.phoneNumber || '',\n            address: userData.address || '',\n            balance: userData.balance || 0,\n            lifetimeWinnings: userData.lifetimeWinnings || 0,\n            createdAt: userData.createdAt || ''\n          });\n          dispatch(setUser(userData));\n        } else {\n          throw new Error('No user data received from server');\n        }\n      } catch (err) {\n        console.error('Failed to fetch profile:', err);\n        setError(`Failed to load profile data: ${err.response?.data?.error || err.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Only fetch profile if we have a token and haven't loaded profile data yet\n    const token = localUser?.token;\n    if (token && !profileData.username) {\n      fetchProfile();\n    }\n  }, []); // Remove user and dispatch from dependencies to prevent multiple calls\n\n\n\n  const cryptoOptions = [\n    { value: 'bitcoin', label: 'Bitcoin (BTC)', icon: '₿' },\n    { value: 'ethereum', label: 'Ethereum (ETH)', icon: 'Ξ' },\n    { value: 'litecoin', label: 'Litecoin (LTC)', icon: 'Ł' },\n    { value: 'usdt', label: 'Tether (USDT)', icon: '₮' },\n    { value: 'bnb', label: 'Binance Coin (BNB)', icon: 'BNB' }\n  ];\n\n\n\n  const handleWithdraw = async (e) => {\n    e.preventDefault();\n    const amount = parseFloat(withdrawAmount);\n    \n    if (amount && walletAddress && amount <= (user.balance || 0)) {\n      try {\n        const response = await apiService.withdraw({\n          userId: user.id,\n          amount,\n          currency: selectedCrypto,\n          walletAddress\n        });\n        const updatedUser = { ...user, balance: (user.balance || 0) - amount };\n        dispatch(setUser(updatedUser));\n        localStorage.setItem('user', JSON.stringify({ ...JSON.parse(localStorage.getItem('user')), user: updatedUser }));\n        alert(response.data.message);\n        setWithdrawAmount('');\n        setWalletAddress('');\n      } catch (error) {\n        setError(error.response?.data?.message || 'Withdrawal failed');\n      }\n    } else {\n      alert('Insufficient balance or invalid amount');\n    }\n  };\n\n\n\n\n\n  return (\n    <div className=\"account-page\">\n      <div className=\"account-header\">\n        <h1>My Account</h1>\n        <div className=\"account-balance\">\n          <span className=\"balance-label\">Balance:</span>\n          <span className=\"balance-amount\">${(profileData.balance || 0).toFixed(2)}</span>\n        </div>\n      </div>\n\n      <div className=\"account-tabs\">\n        <button \n          className={`account-tab ${activeTab === 'profile' ? 'active' : ''}`}\n          onClick={() => setActiveTab('profile')}\n        >\n          Profile\n        </button>\n        <button \n          className={`account-tab ${activeTab === 'deposit' ? 'active' : ''}`}\n          onClick={() => setActiveTab('deposit')}\n        >\n          Deposit\n        </button>\n        <button \n          className={`account-tab ${activeTab === 'withdraw' ? 'active' : ''}`}\n          onClick={() => setActiveTab('withdraw')}\n        >\n          Withdraw\n        </button>\n        <button \n          className={`account-tab ${activeTab === 'history' ? 'active' : ''}`}\n          onClick={() => setActiveTab('history')}\n        >\n          Transaction History\n        </button>\n      </div>\n\n      <div className=\"account-content\">\n        {activeTab === 'profile' && (\n          <div className=\"profile-section\">\n            <h2>Profile Information</h2>\n            {loading ? (\n              <p>Loading profile...</p>\n            ) : error ? (\n              <p className=\"error-message\">{error}</p>\n            ) : (\n              <div className=\"profile-form\">\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input type=\"text\" value={profileData.username || ''} readOnly />\n                </div>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <input type=\"email\" value={profileData.email || ''} readOnly />\n                </div>\n                <div className=\"form-group\">\n                  <label>First Name</label>\n                  <input type=\"text\" value={profileData.firstName || ''} readOnly />\n                </div>\n                <div className=\"form-group\">\n                  <label>Last Name</label>\n                  <input type=\"text\" value={profileData.lastName || ''} readOnly />\n                </div>\n                <div className=\"form-group\">\n                  <label>Phone Number</label>\n                  <input type=\"text\" value={profileData.phoneNumber || ''} readOnly />\n                </div>\n                <div className=\"form-group\">\n                  <label>Address</label>\n                  <input type=\"text\" value={profileData.address || ''} readOnly />\n                </div>\n                <div className=\"form-group\">\n                  <label>Member Since</label>\n                  <input type=\"text\" value={profileData.createdAt ? new Date(profileData.createdAt).toLocaleDateString() : ''} readOnly />\n                </div>\n                <div className=\"form-group\">\n                  <label>Lifetime Winnings</label>\n                  <input type=\"text\" value={`$${(profileData.lifetimeWinnings || 0).toFixed(2)}`} readOnly />\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'deposit' && (\n          <NowPaymentsDeposit />\n        )}\n\n        {activeTab === 'withdraw' && (\n          <div className=\"withdraw-section\">\n            <h2>Withdraw Funds</h2>\n            <div className=\"crypto-withdraw\">\n              <form onSubmit={handleWithdraw}>\n                <div className=\"form-group\">\n                  <label>Select Cryptocurrency</label>\n                  <select \n                    value={selectedCrypto} \n                    onChange={(e) => setSelectedCrypto(e.target.value)}\n                    className=\"crypto-select\"\n                  >\n                    {cryptoOptions.map(crypto => (\n                      <option key={crypto.value} value={crypto.value}>\n                        {crypto.icon} {crypto.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"form-group\">\n                  <label>Withdrawal Amount (USD)</label>\n                  <input\n                    type=\"number\"\n                    value={withdrawAmount}\n                    onChange={(e) => setWithdrawAmount(e.target.value)}\n                    placeholder=\"Enter amount\"\n                    min=\"20\"\n                    max={user.balance || 0}\n                    step=\"0.01\"\n                    required\n                  />\n                  <small>Available: ${(user.balance || 0).toFixed(2)}</small>\n                </div>\n\n                <div className=\"form-group\">\n                  <label>Withdrawal Address</label>\n                  <input\n                    type=\"text\"\n                    value={walletAddress}\n                    onChange={(e) => setWalletAddress(e.target.value)}\n                    placeholder=\"Enter your wallet address\"\n                    required\n                  />\n                </div>\n\n                <div className=\"withdraw-info\">\n                  <p>⚠️ Minimum withdrawal: $20</p>\n                  <p>⚠️ Withdrawals are processed within 24 hours</p>\n                  <p>⚠️ Network fees may apply</p>\n                </div>\n\n                <button type=\"submit\" className=\"withdraw-btn\">\n                  Request Withdrawal\n                </button>\n              </form>\n            </div>\n          </div>\n        )}\n\n\n\n        {activeTab === 'history' && (\n          <div className=\"history-section\">\n            <h2>Transaction History</h2>\n            <div className=\"transaction-list\">\n              <div className=\"no-transactions\">\n                <p>No transactions yet</p>\n                <p>Your deposit and withdrawal history will appear here</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Account;"],"names":["toUnit","amount","decimals","whole","frac","String","split","fracPadded","repeat","slice","concat","replace","buildPaymentUri","_ref","currency","address","memoTag","cur","toUpperCase","addr","ethers","_unused","checksumIfEvm","wei","USDT_CONTRACT","units","USDC_CONTRACT","DAI_CONTRACT","LINK_CONTRACT","base","toLowerCase","generateCryptoQR","payAddress","payCurrency","arguments","length","undefined","NowPaymentsDeposit","loading","setLoading","useState","error","setError","success","setSuccess","setAmount","selectedCurrency","setSelectedCurrency","description","setDescription","payment","setPayment","paymentStatus","setPaymentStatus","getStatusColor","status","getStatusText","copyToClipboard","text","buttonElement","navigator","clipboard","writeText","then","classList","add","textContent","setTimeout","remove","catch","err","console","_jsx","className","children","_jsxs","style","backgroundColor","priceAmount","payAmount","type","value","readOnly","onClick","e","target","payinExtraId","QRCode","includes","size","level","includeMargin","renderAs","onSubmit","async","preventDefault","parseFloat","retryCount","attemptPayment","apiService","createPayment","_error$response","response","delay","Math","pow","log","Promise","resolve","data","isMockPayment","isManualProcessing","_response$data","_response$data2","_response$data3","errorMessage","details","suggestion","_error$response2","code","message","_error$response3","_error$response3$data","_error$response4","_error$response4$data","_error$response5","_error$response5$data","onChange","name","icon","map","crypto","placeholder","min","step","required","disabled","Account","user","useSelector","state","auth","dispatch","useDispatch","activeTab","setActiveTab","profileData","setProfileData","username","email","firstName","lastName","phoneNumber","balance","lifetimeWinnings","createdAt","withdrawAmount","setWithdrawAmount","selectedCrypto","setSelectedCrypto","walletAddress","setWalletAddress","useEffect","localUser","localStorage","getItem","JSON","parse","token","setUser","getUserProfile","userData","Error","_err$response","_err$response$data","fetchProfile","toFixed","Date","toLocaleDateString","withdraw","userId","id","updatedUser","_objectSpread","setItem","stringify","alert","_error$response$data","label","max"],"sourceRoot":""}