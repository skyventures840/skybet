{"version":3,"file":"static/js/576.4c607228.chunk.js","mappings":"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","sources":["pages/Tennis.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MatchCard from '../components/MatchCard';\nimport apiService from '../services/api';\nimport { computeFullLeagueTitle } from '../utils/leagueTitle';\n\nconst Tennis = () => {\n  const [matches, setMatches] = useState([]);\n  const [filteredMatches, setFilteredMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n\n  // Global search functionality\n  useEffect(() => {\n    const handleGlobalSearch = (event) => {\n      const { searchTerm: globalSearchTerm } = event.detail;\n      setSearchTerm(globalSearchTerm);\n    };\n\n    const handleGlobalDateFilter = (event) => {\n      const { selectedDate: globalSelectedDate } = event.detail;\n      setSelectedDate(globalSelectedDate);\n    };\n\n    // Listen for global search and date filter events\n    window.addEventListener('globalSearch', handleGlobalSearch);\n    window.addEventListener('globalDateFilter', handleGlobalDateFilter);\n\n    // Check for existing search term and date in localStorage\n    const existingSearchTerm = localStorage.getItem('globalSearchTerm');\n    const existingSelectedDate = localStorage.getItem('globalSelectedDate');\n    \n    if (existingSearchTerm) {\n      setSearchTerm(existingSearchTerm);\n    }\n    if (existingSelectedDate) {\n      setSelectedDate(existingSelectedDate);\n    }\n\n    return () => {\n      window.removeEventListener('globalSearch', handleGlobalSearch);\n      window.removeEventListener('globalDateFilter', handleGlobalDateFilter);\n    };\n  }, []);\n\n  // Filter matches based on search term and date\n  useEffect(() => {\n    let filtered = matches;\n\n    // Filter by search term\n    if (searchTerm.trim()) {\n      filtered = filtered.filter(match => {\n        const searchLower = searchTerm.toLowerCase();\n        return (\n          match.homeTeam?.toLowerCase().includes(searchLower) ||\n          match.awayTeam?.toLowerCase().includes(searchLower) ||\n          match.league?.toLowerCase().includes(searchLower) ||\n          match.sport?.toLowerCase().includes(searchLower)\n        );\n      });\n    }\n\n    // Filter by date\n    if (selectedDate) {\n      const selectedDateObj = new Date(selectedDate);\n      selectedDateObj.setHours(0, 0, 0, 0);\n      const nextDay = new Date(selectedDateObj);\n      nextDay.setDate(nextDay.getDate() + 1);\n\n      filtered = filtered.filter(match => {\n        const matchDate = new Date(match.startTime);\n        return matchDate >= selectedDateObj && matchDate < nextDay;\n      });\n    }\n\n    // Hide past matches (only show upcoming)\n    const now = new Date();\n    filtered = filtered.filter(match => new Date(match.startTime) >= now);\n\n    setFilteredMatches(filtered);\n  }, [matches, searchTerm, selectedDate]);\n\n  // Transform odds data to match frontend format for tennis\n  const transformOddsToMatches = (oddsData) => {\n    return oddsData\n      .filter(odds => odds.sport_key === 'tennis')\n      .map(odds => {\n        // Get the first bookmaker's markets\n        const bookmaker = odds.bookmakers?.[0];\n        if (!bookmaker || !bookmaker.markets || bookmaker.markets.length === 0) {\n          return null; // Skip matches with no bookmakers or markets\n        }\n\n        const h2hMarket = bookmaker.markets.find(market => market.key === 'h2h');\n        const totalsMarket = bookmaker.markets.find(market => market.key === 'totals');\n        \n        // Check if h2h market has valid outcomes\n        if (!h2hMarket || !h2hMarket.outcomes || h2hMarket.outcomes.length < 2) {\n          return null; // Skip matches with invalid h2h market\n        }\n        \n        const outcomes = h2hMarket.outcomes;\n        \n        // Create odds object for tennis (no draw option)\n        const oddsObj = {\n          '1': outcomes[0]?.price || null,\n          '2': outcomes[1]?.price || null,\n          'X': 0, // No draw in tennis\n          '1X': 0,\n          '12': 0,\n          '2X': 0\n        };\n\n        // Add totals market if available and valid\n        if (totalsMarket && totalsMarket.outcomes && totalsMarket.outcomes.length >= 2) {\n          const overOutcome = totalsMarket.outcomes.find(o => (o.name || '').toLowerCase().startsWith('over')) || totalsMarket.outcomes[0];\n          const underOutcome = totalsMarket.outcomes.find(o => (o.name || '').toLowerCase().startsWith('under')) || totalsMarket.outcomes[1];\n          const point = (overOutcome && overOutcome.point != null) ? overOutcome.point : (underOutcome && underOutcome.point != null ? underOutcome.point : null);\n          \n          oddsObj['Total'] = point;\n          if (overOutcome && overOutcome.price) {\n            const label = point != null ? `Over (${point})` : 'Over';\n            oddsObj[label] = overOutcome.price;\n          }\n          if (underOutcome && underOutcome.price) {\n            const label = point != null ? `Under (${point})` : 'Under';\n            oddsObj[label] = underOutcome.price;\n          }\n        }\n\n        // Only return match if we have at least basic odds\n        if (!oddsObj['1'] || !oddsObj['2']) {\n          return null;\n        }\n\n        // Count additional markets\n        const ignoredLineKeys = ['Total','total','handicapLine','handicap_line','Over','Under'];\n        const displayedOddsCount = Object.keys(oddsObj).filter(key => oddsObj[key] !== null && oddsObj[key] !== 0 && !ignoredLineKeys.includes(key)).length;\n        const totalAvailableMarkets = bookmaker.markets.filter(market => \n          market.outcomes && market.outcomes.length > 0 && \n          market.outcomes.some(outcome => outcome.price > 0)\n        ).length;\n\n        // Calculate additional markets as total available minus displayed\n        const actualAdditionalMarkets = Math.max(0, totalAvailableMarkets - displayedOddsCount);\n\n        return {\n          id: odds.gameId,\n          league: odds.sport_title,\n          time: new Date(odds.commence_time).toLocaleString('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            day: '2-digit',\n            month: '2-digit'\n          }),\n          startTime: new Date(odds.commence_time),\n          homeTeam: odds.home_team,\n          awayTeam: odds.away_team,\n          odds: oddsObj,\n          additionalOdds: actualAdditionalMarkets > 0 ? `+${actualAdditionalMarkets}` : null,\n          sport: 'Tennis'\n        };\n      }).filter(match => match !== null); // Remove null matches\n  };\n\n  const fetchMatches = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Fetch odds data from API\n      const response = await apiService.getMatches();\n      const oddsData = response.data.data || [];\n      \n      // Transform odds data to match frontend format\n      const tennisMatches = transformOddsToMatches(oddsData);\n      setMatches(tennisMatches);\n      \n    } catch (err) {\n      console.error('Error fetching tennis matches:', err);\n      setError('Failed to load tennis matches. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMatches();\n  }, []);\n\n  // Group matches by subcategory\n  const groupMatchesBySubcategory = () => {\n    const groupedMatches = {};\n    \n    filteredMatches.forEach(match => {\n      const subcategoryKey = match.league || 'Other';\n      if (!groupedMatches[subcategoryKey]) {\n        groupedMatches[subcategoryKey] = [];\n      }\n      groupedMatches[subcategoryKey].push(match);\n    });\n    \n    return groupedMatches;\n  };\n\n  const groupedMatches = groupMatchesBySubcategory();\n\n  if (loading) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">Tennis</h1>\n          <p className=\"sport-subtitle\">Bet on ATP, WTA and Grand Slam tournaments</p>\n        </div>\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading tennis matches...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">Tennis</h1>\n          <p className=\"sport-subtitle\">Bet on ATP, WTA and Grand Slam tournaments</p>\n        </div>\n        <div className=\"error-container\">\n          <p className=\"error-message\">{error}</p>\n          <button onClick={fetchMatches} className=\"retry-btn\">Try Again</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"sport-page\">\n      <div className=\"sport-header\">\n        <h1 className=\"sport-title\">Tennis</h1>\n        <p className=\"sport-subtitle\">Bet on ATP, WTA and Grand Slam tournaments</p>\n      </div>\n\n      <div className=\"matches-section\">\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">UPCOMING MATCHES</h2>\n          <button className=\"view-all-btn\">View All</button>\n        </div>\n\n        {Object.keys(groupedMatches).length === 0 ? (\n          <div className=\"no-matches\">\n            <p>No tennis matches available at the moment.</p>\n          </div>\n        ) : (\n          Object.entries(groupedMatches).map(([subcategory, subcategoryMatches]) => {\n            const first = subcategoryMatches[0] || {};\n            const groupTitle = first.fullLeagueTitle || computeFullLeagueTitle({\n              sportKeyOrName: first.sport_key || first.sport || 'Tennis',\n              country: first.country || subcategory || '',\n              leagueName: first.league || subcategory,\n              fallbackSportTitle: 'Tennis'\n            });\n            return (\n              <div key={subcategory} className=\"subcategory-section\">\n                <h3 className=\"subcategory-title\">{groupTitle}</h3>\n                <div className=\"matches-grid\">\n                  {subcategoryMatches.map(match => (\n                    <MatchCard key={match.id} match={match} />\n                  ))}\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Tennis;"],"names":["Tennis","matches","setMatches","useState","filteredMatches","setFilteredMatches","loading","setLoading","error","setError","searchTerm","setSearchTerm","selectedDate","setSelectedDate","useEffect","handleGlobalSearch","event","globalSearchTerm","detail","handleGlobalDateFilter","globalSelectedDate","window","addEventListener","existingSearchTerm","localStorage","getItem","existingSelectedDate","removeEventListener","filtered","trim","filter","match","_match$homeTeam","_match$awayTeam","_match$league","_match$sport","searchLower","toLowerCase","homeTeam","includes","awayTeam","league","sport","selectedDateObj","Date","setHours","nextDay","setDate","getDate","matchDate","startTime","now","fetchMatches","async","response","apiService","getMatches","tennisMatches","oddsData","odds","sport_key","map","_odds$bookmakers","_outcomes$","_outcomes$2","bookmaker","bookmakers","markets","length","h2hMarket","find","market","key","totalsMarket","outcomes","oddsObj","price","overOutcome","o","name","startsWith","underOutcome","point","label","concat","ignoredLineKeys","displayedOddsCount","Object","keys","totalAvailableMarkets","some","outcome","actualAdditionalMarkets","Math","max","id","gameId","sport_title","time","commence_time","toLocaleString","hour","minute","day","month","home_team","away_team","additionalOdds","transformOddsToMatches","data","err","console","groupedMatches","groupMatchesBySubcategory","forEach","subcategoryKey","push","_jsxs","className","children","_jsx","onClick","entries","_ref","subcategory","subcategoryMatches","first","groupTitle","fullLeagueTitle","computeFullLeagueTitle","sportKeyOrName","country","leagueName","fallbackSportTitle","MatchCard"],"sourceRoot":""}