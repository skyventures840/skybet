{"version":3,"file":"static/js/6.07f5cf44.chunk.js","mappings":"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","sources":["pages/Football.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MatchCard from '../components/MatchCard';\nimport apiService from '../services/api';\n\nconst Football = () => {\n  const [matches, setMatches] = useState([]);\n  const [filteredMatches, setFilteredMatches] = useState([]);\n  const [selectedLeague, setSelectedLeague] = useState('all');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n\n  const leagues = [\n    { id: 'all', name: 'All Leagues', count: 516 },\n    { id: 'nfl', name: 'NFL', count: 32 },\n    { id: 'college', name: 'College Football', count: 484 }\n  ];\n\n  // Global search functionality\n  useEffect(() => {\n    const handleGlobalSearch = (event) => {\n      const { searchTerm: globalSearchTerm } = event.detail;\n      setSearchTerm(globalSearchTerm);\n    };\n\n    const handleGlobalDateFilter = (event) => {\n      const { selectedDate: globalSelectedDate } = event.detail;\n      setSelectedDate(globalSelectedDate);\n    };\n\n    // Listen for global search and date filter events\n    window.addEventListener('globalSearch', handleGlobalSearch);\n    window.addEventListener('globalDateFilter', handleGlobalDateFilter);\n\n    // Check for existing search term and date in localStorage\n    const existingSearchTerm = localStorage.getItem('globalSearchTerm');\n    const existingSelectedDate = localStorage.getItem('globalSelectedDate');\n    \n    if (existingSearchTerm) {\n      setSearchTerm(existingSearchTerm);\n    }\n    if (existingSelectedDate) {\n      setSelectedDate(existingSelectedDate);\n    }\n\n    return () => {\n      window.removeEventListener('globalSearch', handleGlobalSearch);\n      window.removeEventListener('globalDateFilter', handleGlobalDateFilter);\n    };\n  }, []);\n\n  // Filter matches based on search term, date, and league\n  useEffect(() => {\n    let filtered = matches;\n\n    // Filter by search term\n    if (searchTerm.trim()) {\n      filtered = filtered.filter(match => {\n        const searchLower = searchTerm.toLowerCase();\n        return (\n          match.homeTeam?.toLowerCase().includes(searchLower) ||\n          match.awayTeam?.toLowerCase().includes(searchLower) ||\n          match.league?.toLowerCase().includes(searchLower) ||\n          match.sport?.toLowerCase().includes(searchLower)\n        );\n      });\n    }\n\n    // Filter by date\n    if (selectedDate) {\n      const selectedDateObj = new Date(selectedDate);\n      selectedDateObj.setHours(0, 0, 0, 0);\n      const nextDay = new Date(selectedDateObj);\n      nextDay.setDate(nextDay.getDate() + 1);\n\n      filtered = filtered.filter(match => {\n        const matchDate = new Date(match.startTime);\n        return matchDate >= selectedDateObj && matchDate < nextDay;\n      });\n    }\n\n    // Filter by league\n    if (selectedLeague !== 'all') {\n      filtered = filtered.filter(match => \n        match.league.toLowerCase().includes(selectedLeague)\n      );\n    }\n\n    // Hide past matches (only show upcoming)\n    const now = new Date();\n    filtered = filtered.filter(match => new Date(match.startTime) >= now);\n\n    setFilteredMatches(filtered);\n  }, [matches, searchTerm, selectedDate, selectedLeague]);\n\n  // Transform odds data to match frontend format for football\n  const transformOddsToMatches = (oddsData) => {\n    return oddsData\n      .filter(odds => odds.sport_key === 'americanfootball_nfl')\n      .map(odds => {\n        // Get the first bookmaker's markets\n        const bookmaker = odds.bookmakers?.[0];\n        if (!bookmaker || !bookmaker.markets || bookmaker.markets.length === 0) {\n          return null; // Skip matches with no bookmakers or markets\n        }\n\n        const h2hMarket = bookmaker.markets.find(market => market.key === 'h2h');\n        const totalsMarket = bookmaker.markets.find(market => market.key === 'totals');\n        \n        // Check if h2h market has valid outcomes\n        if (!h2hMarket || !h2hMarket.outcomes || h2hMarket.outcomes.length < 2) {\n          return null; // Skip matches with invalid h2h market\n        }\n        \n        const outcomes = h2hMarket.outcomes;\n        \n        // Create odds object for football (includes draw option)\n        const oddsObj = {\n          '1': outcomes[0]?.price || null,\n          '2': outcomes[1]?.price || null\n        };\n\n        // Add draw option for football if available (rare but possible)\n        if (outcomes.length > 2) {\n          oddsObj['X'] = outcomes[2]?.price || null;\n        } else {\n          oddsObj['X'] = 25.00; // Default high odds for draw in football\n        }\n\n        // Add totals as Over/Under with line in parentheses; do not expose raw 'Total' line\n        if (totalsMarket && totalsMarket.outcomes && totalsMarket.outcomes.length >= 2) {\n          const overOutcome = totalsMarket.outcomes.find(o => (o.name || '').toLowerCase().startsWith('over')) || totalsMarket.outcomes[0];\n          const underOutcome = totalsMarket.outcomes.find(o => (o.name || '').toLowerCase().startsWith('under')) || totalsMarket.outcomes[1] || null;\n          const point = (overOutcome && overOutcome.point != null) ? overOutcome.point : (underOutcome && underOutcome.point != null ? underOutcome.point : null);\n          if (overOutcome && overOutcome.price) {\n            const label = point != null ? `Over (${point})` : 'Over';\n            oddsObj[label] = overOutcome.price;\n          }\n          if (underOutcome && underOutcome.price) {\n            const label = point != null ? `Under (${point})` : 'Under';\n            oddsObj[label] = underOutcome.price;\n          }\n        }\n\n        // Only return match if we have at least basic odds\n        if (!oddsObj['1'] || !oddsObj['2']) {\n          return null;\n        }\n\n        // Count additional markets\n        const ignoredLineKeys = ['Total','total','handicapLine','handicap_line'];\n        const displayedOddsCount = Object.keys(oddsObj).filter(key => oddsObj[key] !== null && !ignoredLineKeys.includes(key)).length;\n        const totalAvailableMarkets = bookmaker.markets.filter(market => \n          market.outcomes && market.outcomes.length > 0 && \n          market.outcomes.some(outcome => outcome.price > 0)\n        ).length;\n\n        // Calculate additional markets as total available minus displayed\n        const actualAdditionalMarkets = Math.max(0, totalAvailableMarkets - displayedOddsCount);\n\n        return {\n          id: odds.gameId,\n          league: odds.sport_title,\n          time: new Date(odds.commence_time).toLocaleString('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            day: '2-digit',\n            month: '2-digit'\n          }),\n          startTime: new Date(odds.commence_time),\n          homeTeam: odds.home_team,\n          awayTeam: odds.away_team,\n          odds: oddsObj,\n          additionalOdds: actualAdditionalMarkets > 0 ? `+${actualAdditionalMarkets}` : null,\n          sport: 'Football'\n        };\n      }).filter(match => match !== null); // Remove null matches\n  };\n\n  const fetchMatches = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Fetch odds data from API\n      const response = await apiService.getMatches();\n      const oddsData = response.data.data || [];\n      \n      // Transform odds data to match frontend format\n      const footballMatches = transformOddsToMatches(oddsData);\n      setMatches(footballMatches);\n      \n    } catch (err) {\n      console.error('Error fetching football matches:', err);\n      setError('Failed to load football matches. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMatches();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">American Football</h1>\n          <p className=\"sport-subtitle\">Bet on NFL, College Football and more</p>\n        </div>\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading football matches...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">American Football</h1>\n          <p className=\"sport-subtitle\">Bet on NFL, College Football and more</p>\n        </div>\n        <div className=\"error-container\">\n          <p className=\"error-message\">{error}</p>\n          <button onClick={fetchMatches} className=\"retry-btn\">Try Again</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"sport-page\">\n      <div className=\"sport-header\">\n        <h1 className=\"sport-title\">American Football</h1>\n        <p className=\"sport-subtitle\">Bet on NFL, College Football and more</p>\n      </div>\n\n      <div className=\"leagues-grid\">\n        {leagues.map(league => (\n          <div \n            key={league.id}\n            className={`league-card ${selectedLeague === league.id ? 'active' : ''}`}\n            onClick={() => setSelectedLeague(league.id)}\n          >\n            <div className=\"league-header\">\n              <h3 className=\"league-name\">{league.name}</h3>\n              <span className=\"league-matches\">{league.count} matches</span>\n            </div>\n            <p className=\"league-description\">\n              {league.id === 'nfl' && 'Professional American Football League'}\n              {league.id === 'college' && 'College Football Championships and Bowl Games'}\n              {league.id === 'all' && 'All available American Football matches'}\n            </p>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"matches-section\">\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">UPCOMING MATCHES</h2>\n          <button className=\"view-all-btn\">View All</button>\n        </div>\n\n        {filteredMatches.length === 0 ? (\n          <div className=\"no-matches\">\n            <p>No football matches available at the moment.</p>\n          </div>\n        ) : (\n          <div className=\"matches-grid\">\n            {filteredMatches.map(match => (\n              <MatchCard key={match.id} match={match} />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Football;"],"names":["Football","matches","setMatches","useState","filteredMatches","setFilteredMatches","selectedLeague","setSelectedLeague","loading","setLoading","error","setError","searchTerm","setSearchTerm","selectedDate","setSelectedDate","useEffect","handleGlobalSearch","event","globalSearchTerm","detail","handleGlobalDateFilter","globalSelectedDate","window","addEventListener","existingSearchTerm","localStorage","getItem","existingSelectedDate","removeEventListener","filtered","trim","filter","match","_match$homeTeam","_match$awayTeam","_match$league","_match$sport","searchLower","toLowerCase","homeTeam","includes","awayTeam","league","sport","selectedDateObj","Date","setHours","nextDay","setDate","getDate","matchDate","startTime","now","fetchMatches","async","response","apiService","getMatches","footballMatches","oddsData","odds","sport_key","map","_odds$bookmakers","_outcomes$","_outcomes$2","bookmaker","bookmakers","markets","length","h2hMarket","find","market","key","totalsMarket","outcomes","oddsObj","price","_outcomes$3","overOutcome","o","name","startsWith","underOutcome","point","label","concat","ignoredLineKeys","displayedOddsCount","Object","keys","totalAvailableMarkets","some","outcome","actualAdditionalMarkets","Math","max","id","gameId","sport_title","time","commence_time","toLocaleString","hour","minute","day","month","home_team","away_team","additionalOdds","transformOddsToMatches","data","err","console","_jsxs","className","children","_jsx","onClick","count","MatchCard"],"sourceRoot":""}