{"version":3,"file":"static/js/772.e5dbfce9.chunk.js","mappings":"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","sources":["pages/Basketball.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MatchCard from '../components/MatchCard';\nimport apiService from '../services/api';\n\nconst Basketball = () => {\n  const [matches, setMatches] = useState([]);\n  const [filteredMatches, setFilteredMatches] = useState([]);\n  const [selectedLeague, setSelectedLeague] = useState('all');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n\n  const leagues = [\n    { id: 'all', name: 'All Leagues', count: 88 },\n    { id: 'nba', name: 'NBA', count: 30 },\n    { id: 'college', name: 'College Basketball', count: 58 }\n  ];\n\n  // Global search functionality\n  useEffect(() => {\n    const handleGlobalSearch = (event) => {\n      const { searchTerm: globalSearchTerm } = event.detail;\n      setSearchTerm(globalSearchTerm);\n    };\n\n    const handleGlobalDateFilter = (event) => {\n      const { selectedDate: globalSelectedDate } = event.detail;\n      setSelectedDate(globalSelectedDate);\n    };\n\n    // Listen for global search and date filter events\n    window.addEventListener('globalSearch', handleGlobalSearch);\n    window.addEventListener('globalDateFilter', handleGlobalDateFilter);\n\n    // Check for existing search term and date in localStorage\n    const existingSearchTerm = localStorage.getItem('globalSearchTerm');\n    const existingSelectedDate = localStorage.getItem('globalSelectedDate');\n    \n    if (existingSearchTerm) {\n      setSearchTerm(existingSearchTerm);\n    }\n    if (existingSelectedDate) {\n      setSelectedDate(existingSelectedDate);\n    }\n\n    return () => {\n      window.removeEventListener('globalSearch', handleGlobalSearch);\n      window.removeEventListener('globalDateFilter', handleGlobalDateFilter);\n    };\n  }, []);\n\n  // Filter matches based on search term and date\n  useEffect(() => {\n    let filtered = matches;\n\n    // Filter by search term\n    if (searchTerm.trim()) {\n      filtered = filtered.filter(match => {\n        const searchLower = searchTerm.toLowerCase();\n        return (\n          match.homeTeam?.toLowerCase().includes(searchLower) ||\n          match.awayTeam?.toLowerCase().includes(searchLower) ||\n          match.league?.toLowerCase().includes(searchLower) ||\n          match.sport?.toLowerCase().includes(searchLower)\n        );\n      });\n    }\n\n    // Filter by date\n    if (selectedDate) {\n      const selectedDateObj = new Date(selectedDate);\n      selectedDateObj.setHours(0, 0, 0, 0);\n      const nextDay = new Date(selectedDateObj);\n      nextDay.setDate(nextDay.getDate() + 1);\n\n      filtered = filtered.filter(match => {\n        const matchDate = new Date(match.startTime);\n        return matchDate >= selectedDateObj && matchDate < nextDay;\n      });\n    }\n\n    // Hide past matches (only show upcoming)\n    const now = new Date();\n    filtered = filtered.filter(match => new Date(match.startTime) >= now);\n\n    setFilteredMatches(filtered);\n  }, [matches, searchTerm, selectedDate]);\n\n  // Transform odds data to match frontend format\n  const transformOddsToMatches = (oddsData) => {\n    return oddsData\n      .filter(odds => odds.sport_key === 'basketball')\n      .map(odds => {\n        // Get the first bookmaker's markets\n        const bookmaker = odds.bookmakers?.[0];\n        if (!bookmaker || !bookmaker.markets || bookmaker.markets.length === 0) {\n          return null; // Skip matches with no bookmakers or markets\n        }\n\n        const h2hMarket = bookmaker.markets.find(market => market.key === 'h2h');\n        const totalsMarket = bookmaker.markets.find(market => market.key === 'totals');\n        \n        // Check if h2h market has valid outcomes\n        if (!h2hMarket || !h2hMarket.outcomes || h2hMarket.outcomes.length < 2) {\n          return null; // Skip matches with invalid h2h market\n        }\n        \n        const outcomes = h2hMarket.outcomes;\n        \n        // Create odds object only with valid data\n        const oddsObj = {\n          '1': outcomes[0]?.price || null,\n          '2': outcomes[1]?.price || null\n        };\n\n        // Add totals as Over/Under with line in parentheses; do not expose raw 'Total' line\n        if (totalsMarket && totalsMarket.outcomes && totalsMarket.outcomes.length >= 2) {\n          const overOutcome = totalsMarket.outcomes.find(o => (o.name || '').toLowerCase().startsWith('over')) || totalsMarket.outcomes[0];\n          const underOutcome = totalsMarket.outcomes.find(o => (o.name || '').toLowerCase().startsWith('under')) || totalsMarket.outcomes[1] || null;\n          const point = (overOutcome && overOutcome.point != null) ? overOutcome.point : (underOutcome && underOutcome.point != null ? underOutcome.point : null);\n          if (overOutcome && overOutcome.price) {\n            const label = point != null ? `Over (${point})` : 'Over';\n            oddsObj[label] = overOutcome.price;\n          }\n          if (underOutcome && underOutcome.price) {\n            const label = point != null ? `Under (${point})` : 'Under';\n            oddsObj[label] = underOutcome.price;\n          }\n        }\n\n        // Only return match if we have at least basic odds\n        if (!oddsObj['1'] || !oddsObj['2']) {\n          return null;\n        }\n        // Also count markets that might be available but not displayed in main odds\n        const ignoredLineKeys = ['Total','total','handicapLine','handicap_line'];\n        const displayedOddsCount = Object.keys(oddsObj).filter(key => oddsObj[key] !== null && !ignoredLineKeys.includes(key)).length;\n        const totalAvailableMarkets = bookmaker.markets.filter(market => \n          market.outcomes && market.outcomes.length > 0 && \n          market.outcomes.some(outcome => outcome.price > 0)\n        ).length;\n\n        // Calculate additional markets as total available minus displayed\n        const actualAdditionalMarkets = Math.max(0, totalAvailableMarkets - displayedOddsCount);\n\n        return {\n          id: odds.gameId,\n          league: odds.sport_title,\n          time: new Date(odds.commence_time).toLocaleString('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            day: '2-digit',\n            month: '2-digit'\n          }),\n          startTime: new Date(odds.commence_time),\n          homeTeam: odds.home_team,\n          awayTeam: odds.away_team,\n          odds: oddsObj,\n          additionalOdds: actualAdditionalMarkets > 0 ? `+${actualAdditionalMarkets}` : null,\n          sport: 'Basketball'\n        };\n      }).filter(match => match !== null); // Remove null matches\n  };\n\n  const fetchMatches = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Fetch odds data from API\n      const response = await apiService.getMatches();\n      const oddsData = response.data.data || [];\n      \n      // Transform odds data to match frontend format\n      const basketballMatches = transformOddsToMatches(oddsData);\n      setMatches(basketballMatches);\n      \n    } catch (err) {\n      console.error('Error fetching basketball matches:', err);\n      setError('Failed to load basketball matches. Please try again later.');\n      setMatches([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMatches();\n  }, []);\n\n  const filteredMatchesByLeague = selectedLeague === 'all' \n    ? filteredMatches \n    : filteredMatches.filter(match => match.league.toLowerCase().includes(selectedLeague));\n\n  // Group matches by subcategory\n  const groupMatchesBySubcategory = () => {\n    const groupedMatches = {};\n    \n    filteredMatchesByLeague.forEach(match => {\n      const subcategoryKey = match.league || 'Other';\n      if (!groupedMatches[subcategoryKey]) {\n        groupedMatches[subcategoryKey] = [];\n      }\n      groupedMatches[subcategoryKey].push(match);\n    });\n    \n    return groupedMatches;\n  };\n\n  const groupedMatches = groupMatchesBySubcategory();\n\n  if (loading) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">Basketball</h1>\n          <p className=\"sport-subtitle\">Bet on NBA, College Basketball and international leagues</p>\n        </div>\n        <div className=\"matches-section\">\n          <div className=\"section-header\">\n            <h2 className=\"section-title\">UPCOMING MATCHES</h2>\n            <div className=\"view-all-btn empty\" style={{ opacity: 0.5 }}>Loading…</div>\n          </div>\n          <div className=\"matches-skeleton-grid\">\n            {Array.from({ length: 8 }).map((_, idx) => (\n              <div key={idx} className=\"skeleton\" style={{ padding: 16 }}>\n                <div className=\"skeleton-line\" style={{ width: '60%', height: 16, marginBottom: 8 }}></div>\n                <div className=\"skeleton-line\" style={{ width: '80%', height: 12, marginBottom: 12 }}></div>\n                <div style={{ display: 'flex', gap: 8 }}>\n                  <div className=\"skeleton-odds\"></div>\n                  <div className=\"skeleton-odds\"></div>\n                  <div className=\"skeleton-odds\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"sport-page\">\n        <div className=\"sport-header\">\n          <h1 className=\"sport-title\">Basketball</h1>\n          <p className=\"sport-subtitle\">Bet on NBA, College Basketball and international leagues</p>\n        </div>\n        <div className=\"error-container\">\n          <p className=\"error-message\">{error}</p>\n          <button onClick={fetchMatches} className=\"retry-btn\">Retry</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"sport-page\">\n      <div className=\"sport-header\">\n        <h1 className=\"sport-title\">Basketball</h1>\n        <p className=\"sport-subtitle\">Bet on NBA, College Basketball and international leagues</p>\n      </div>\n\n      <div className=\"leagues-grid\">\n        {leagues.map(league => (\n          <div \n            key={league.id}\n            className={`league-card ${selectedLeague === league.id ? 'active' : ''}`}\n            onClick={() => setSelectedLeague(league.id)}\n          >\n            <div className=\"league-header\">\n              <h3 className=\"league-name\">{league.name}</h3>\n              <span className=\"league-matches\">{league.count} matches</span>\n            </div>\n            <p className=\"league-description\">\n              {league.id === 'nba' && 'National Basketball Association'}\n              {league.id === 'college' && 'NCAA Basketball Championships'}\n              {league.id === 'all' && 'All available Basketball matches'}\n            </p>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"matches-section\">\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">UPCOMING MATCHES</h2>\n          <button className=\"view-all-btn\">View All</button>\n        </div>\n\n        <div className=\"matches-grid\">\n          {Object.entries(groupedMatches).map(([subcategory, matches]) => (\n            <div key={subcategory} className=\"subcategory-group\">\n              <h3 className=\"subcategory-title\">{subcategory}</h3>\n              {matches.map(match => (\n                <MatchCard \n                  key={match.id} \n                  match={match} \n                  sport={match.sport}\n                  league={match.league}\n                  subcategory={subcategory}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Basketball;"],"names":["Basketball","matches","setMatches","useState","filteredMatches","setFilteredMatches","selectedLeague","setSelectedLeague","loading","setLoading","error","setError","searchTerm","setSearchTerm","selectedDate","setSelectedDate","useEffect","handleGlobalSearch","event","globalSearchTerm","detail","handleGlobalDateFilter","globalSelectedDate","window","addEventListener","existingSearchTerm","localStorage","getItem","existingSelectedDate","removeEventListener","filtered","trim","filter","match","_match$homeTeam","_match$awayTeam","_match$league","_match$sport","searchLower","toLowerCase","homeTeam","includes","awayTeam","league","sport","selectedDateObj","Date","setHours","nextDay","setDate","getDate","matchDate","startTime","now","fetchMatches","async","response","apiService","getMatches","basketballMatches","oddsData","odds","sport_key","map","_odds$bookmakers","_outcomes$","_outcomes$2","bookmaker","bookmakers","markets","length","h2hMarket","find","market","key","totalsMarket","outcomes","oddsObj","price","overOutcome","o","name","startsWith","underOutcome","point","label","concat","ignoredLineKeys","displayedOddsCount","Object","keys","totalAvailableMarkets","some","outcome","actualAdditionalMarkets","Math","max","id","gameId","sport_title","time","commence_time","toLocaleString","hour","minute","day","month","home_team","away_team","additionalOdds","transformOddsToMatches","data","err","console","filteredMatchesByLeague","groupedMatches","groupMatchesBySubcategory","forEach","subcategoryKey","push","_jsxs","className","children","_jsx","style","opacity","Array","from","_","idx","padding","width","height","marginBottom","display","gap","onClick","count","entries","_ref","subcategory","MatchCard"],"sourceRoot":""}